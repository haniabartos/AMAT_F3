
AMAT_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007cb0  08007cb0  00008cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080cc  080080cc  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080080cc  080080cc  000090cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d4  080080d4  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d4  080080d4  000090d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080d8  080080d8  000090d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080080dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e4  2**0
                  CONTENTS
 10 .bss          00000358  200001e4  200001e4  0000a1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000053c  2000053c  0000a1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdf4  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4c  00000000  00000000  00016008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  00017e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e8  00000000  00000000  00018760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5f6  00000000  00000000  00018e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5c7  00000000  00000000  0003543e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4062  00000000  00000000  00042a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e6a67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033f4  00000000  00000000  000e6aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000e9ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c94 	.word	0x08007c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007c94 	.word	0x08007c94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <module_active>:
float prev_values2[4]={0};
float prev_values3[4]={0};
float prev_values4[4]={0};
float prev_values5[4]={0};

void module_active(Module *module, int id){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	if((module->values[6]>2000)){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c58:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000c80 <module_active+0x38>
 8000c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	dc00      	bgt.n	8000c68 <module_active+0x20>
		module->active = true;
		printf("Detected module number: %d\r\n", id);
	}

}
 8000c66:	e006      	b.n	8000c76 <module_active+0x2e>
		module->active = true;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		printf("Detected module number: %d\r\n", id);
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <module_active+0x3c>)
 8000c72:	f005 f835 	bl	8005ce0 <iprintf>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	44fa0000 	.word	0x44fa0000
 8000c84:	08007cb0 	.word	0x08007cb0

08000c88 <modules_init>:

void modules_init(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]


	module_active(module1,1);
 8000c96:	2101      	movs	r1, #1
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff ffd5 	bl	8000c48 <module_active>
	module_active(module2,2);
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	68b8      	ldr	r0, [r7, #8]
 8000ca2:	f7ff ffd1 	bl	8000c48 <module_active>
	module_active(module3,3);
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ffcd 	bl	8000c48 <module_active>
	module_active(module4,4);
 8000cae:	2104      	movs	r1, #4
 8000cb0:	6838      	ldr	r0, [r7, #0]
 8000cb2:	f7ff ffc9 	bl	8000c48 <module_active>
	module_active(module5,5);
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	69b8      	ldr	r0, [r7, #24]
 8000cba:	f7ff ffc5 	bl	8000c48 <module_active>

	// if not active we're not waiting to heat

	if (!module1->active) module1->heated = 1;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <modules_init+0x4a>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	605a      	str	r2, [r3, #4]
	if (!module2->active) module2->heated = 1;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f083 0301 	eor.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <modules_init+0x5e>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	605a      	str	r2, [r3, #4]
	if (!module3->active) module3->heated = 1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <modules_init+0x72>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	605a      	str	r2, [r3, #4]
	if (!module4->active) module4->heated = 1;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <modules_init+0x86>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	605a      	str	r2, [r3, #4]
	if (!module5->active) module5->heated = 1;
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <modules_init+0x9a>
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	605a      	str	r2, [r3, #4]


}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <is_module_heated>:
void is_module_heated(Module *module, float *prev_values){
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]

	// let's assume it's heating and then try to deny

    module->heated = 1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	605a      	str	r2, [r3, #4]


	for (int i = 0; i < 4; i++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e01e      	b.n	8000d7e <is_module_heated+0x54>
	        if (abs(module->values[i] - prev_values[i]) > 2) {
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3302      	adds	r3, #2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	ed93 7a00 	vldr	s14, [r3]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	edd3 7a00 	vldr	s15, [r3]
 8000d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d62:	ee17 3a90 	vmov	r3, s15
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	bfb8      	it	lt
 8000d6a:	425b      	neglt	r3, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	dd03      	ble.n	8000d78 <is_module_heated+0x4e>
	            module->heated = 0; /*if just one value differs from the previous one more than 2 units (around 1,6 mV)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
	            we consider the module to be still heating */
	            break;
 8000d76:	e005      	b.n	8000d84 <is_module_heated+0x5a>
	for (int i = 0; i < 4; i++) {
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	dddd      	ble.n	8000d40 <is_module_heated+0x16>
	        }
	    }

	    for (int j = 0; j < 4; j++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	e00d      	b.n	8000da6 <is_module_heated+0x7c>
	           prev_values[j] = module->values[j];
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	4413      	add	r3, r2
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	3202      	adds	r2, #2
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	440a      	add	r2, r1
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	ddee      	ble.n	8000d8a <is_module_heated+0x60>
	       }

}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <all_heated>:

bool all_heated(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5, uint16_t *heating_counter){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]

		/* checks if all the modules have heated or the heating time is over 4 hours */

	static bool printed = false;

    if ((module1->heated == 1 && module2->heated == 1 && module3->heated == 1 && module4->heated == 1 && module5->heated == 1) || (*heating_counter == 12)){
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10f      	bne.n	8000df2 <all_heated+0x36>
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10b      	bne.n	8000df2 <all_heated+0x36>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d107      	bne.n	8000df2 <all_heated+0x36>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d103      	bne.n	8000df2 <all_heated+0x36>
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d003      	beq.n	8000dfa <all_heated+0x3e>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	2b0c      	cmp	r3, #12
 8000df8:	d114      	bne.n	8000e24 <all_heated+0x68>

        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f002 fad1 	bl	80033a8 <HAL_GPIO_WritePin>
        if (!printed) {
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <all_heated+0x74>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <all_heated+0x64>
                   printf("ALL_HEATED\r\n");
 8000e14:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <all_heated+0x78>)
 8000e16:	f004 ffcb 	bl	8005db0 <puts>
                   printed = true;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <all_heated+0x74>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
               }
        return true;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <all_heated+0x6a>

    }
    return false;
 8000e24:	2300      	movs	r3, #0

}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000250 	.word	0x20000250
 8000e34:	08007cd0 	.word	0x08007cd0

08000e38 <modules_heating>:

void modules_heating(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5, uint16_t *heating_counter,float *vtec){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]

		/* controls the process of heating the modules*/



	while(!all_heated(module1,module2,module3,module4, module5, heating_counter)){
 8000e46:	e0a2      	b.n	8000f8e <modules_heating+0x156>

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e50:	f002 faaa 	bl	80033a8 <HAL_GPIO_WritePin>
		measurement(module1,module2,module3,module4, module5,vtec);
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 fc6e 	bl	8001744 <measurement>
		printf("Heating in progress...\r\n");
 8000e68:	4854      	ldr	r0, [pc, #336]	@ (8000fbc <modules_heating+0x184>)
 8000e6a:	f004 ffa1 	bl	8005db0 <puts>

		 if (module1->active && module1->heated == 0) {
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <modules_heating+0x4e>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <modules_heating+0x4e>
				//	HAL_GPIO_WritePin(P2_LED_GPIO_Port, P2_LED_Pin, GPIO_PIN_SET);
					is_module_heated(module1,prev_values1);
 8000e7e:	4950      	ldr	r1, [pc, #320]	@ (8000fc0 <modules_heating+0x188>)
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff ff52 	bl	8000d2a <is_module_heated>
				 /*       if (module1->heated == 1) {
				                    HAL_GPIO_WritePin(P2_LED_GPIO_Port, P2_LED_Pin, GPIO_PIN_RESET);
				    	}*/
				 }
		 if (module2->active && module2->heated == 0) {
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d015      	beq.n	8000eba <modules_heating+0x82>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d111      	bne.n	8000eba <modules_heating+0x82>
			 	  HAL_GPIO_WritePin(P3_LED_GPIO_Port, P3_LED_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2108      	movs	r1, #8
 8000e9a:	484a      	ldr	r0, [pc, #296]	@ (8000fc4 <modules_heating+0x18c>)
 8000e9c:	f002 fa84 	bl	80033a8 <HAL_GPIO_WritePin>
				   is_module_heated(module2,prev_values2);
 8000ea0:	4949      	ldr	r1, [pc, #292]	@ (8000fc8 <modules_heating+0x190>)
 8000ea2:	68b8      	ldr	r0, [r7, #8]
 8000ea4:	f7ff ff41 	bl	8000d2a <is_module_heated>
				       if (module2->heated == 1) {
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d104      	bne.n	8000eba <modules_heating+0x82>
				                    HAL_GPIO_WritePin(P3_LED_GPIO_Port, P3_LED_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	4843      	ldr	r0, [pc, #268]	@ (8000fc4 <modules_heating+0x18c>)
 8000eb6:	f002 fa77 	bl	80033a8 <HAL_GPIO_WritePin>
				    	}
				    }
		 if (module3->active && module3->heated == 0) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d015      	beq.n	8000eee <modules_heating+0xb6>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d111      	bne.n	8000eee <modules_heating+0xb6>
				  HAL_GPIO_WritePin(P4_LED_GPIO_Port, P4_LED_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2101      	movs	r1, #1
 8000ece:	483d      	ldr	r0, [pc, #244]	@ (8000fc4 <modules_heating+0x18c>)
 8000ed0:	f002 fa6a 	bl	80033a8 <HAL_GPIO_WritePin>
				   is_module_heated(module3,prev_values3);
 8000ed4:	493d      	ldr	r1, [pc, #244]	@ (8000fcc <modules_heating+0x194>)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff27 	bl	8000d2a <is_module_heated>
				      if (module3->heated == 1) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d104      	bne.n	8000eee <modules_heating+0xb6>
				                    HAL_GPIO_WritePin(P4_LED_GPIO_Port, P4_LED_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4836      	ldr	r0, [pc, #216]	@ (8000fc4 <modules_heating+0x18c>)
 8000eea:	f002 fa5d 	bl	80033a8 <HAL_GPIO_WritePin>
				    	}
				    }
		 if (module4->active && module4->heated == 0) {
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d019      	beq.n	8000f2a <modules_heating+0xf2>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d115      	bne.n	8000f2a <modules_heating+0xf2>
				   HAL_GPIO_WritePin(P5_LED_GPIO_Port, P5_LED_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f08:	f002 fa4e 	bl	80033a8 <HAL_GPIO_WritePin>
			       is_module_heated(module4,prev_values4);
 8000f0c:	4930      	ldr	r1, [pc, #192]	@ (8000fd0 <modules_heating+0x198>)
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	f7ff ff0b 	bl	8000d2a <is_module_heated>
				        if (module4->heated == 1) {
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d106      	bne.n	8000f2a <modules_heating+0xf2>
				                    HAL_GPIO_WritePin(P5_LED_GPIO_Port, P5_LED_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f002 fa3f 	bl	80033a8 <HAL_GPIO_WritePin>
				    	}
				    }
		 if (module5->active && module5->heated == 0) {
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d017      	beq.n	8000f62 <modules_heating+0x12a>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d113      	bne.n	8000f62 <modules_heating+0x12a>
				  	HAL_GPIO_WritePin(P6_LED_GPIO_Port, P6_LED_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f002 fa31 	bl	80033a8 <HAL_GPIO_WritePin>
				   is_module_heated(module5,prev_values5);
 8000f46:	4923      	ldr	r1, [pc, #140]	@ (8000fd4 <modules_heating+0x19c>)
 8000f48:	69b8      	ldr	r0, [r7, #24]
 8000f4a:	f7ff feee 	bl	8000d2a <is_module_heated>
				          if (module5->heated == 1) {
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <modules_heating+0x12a>
				                    HAL_GPIO_WritePin(P6_LED_GPIO_Port, P6_LED_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f002 fa23 	bl	80033a8 <HAL_GPIO_WritePin>
				        }
				    }

		 if (all_heated(module1, module2, module3, module4, module5, heating_counter)) {
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ff23 	bl	8000dbc <all_heated>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11a      	bne.n	8000fb2 <modules_heating+0x17a>
		            break;
		        }

		 (*heating_counter)++;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	801a      	strh	r2, [r3, #0]

		 HAL_Delay(HEATING_TIME);
 8000f88:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <modules_heating+0x1a0>)
 8000f8a:	f001 f873 	bl	8002074 <HAL_Delay>
	while(!all_heated(module1,module2,module3,module4, module5, heating_counter)){
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff ff0d 	bl	8000dbc <all_heated>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f47f af4c 	bne.w	8000e48 <modules_heating+0x10>


	}
}
 8000fb0:	e000      	b.n	8000fb4 <modules_heating+0x17c>
		            break;
 8000fb2:	bf00      	nop
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08007cdc 	.word	0x08007cdc
 8000fc0:	20000200 	.word	0x20000200
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	20000210 	.word	0x20000210
 8000fcc:	20000220 	.word	0x20000220
 8000fd0:	20000230 	.word	0x20000230
 8000fd4:	20000240 	.word	0x20000240
 8000fd8:	00124f80 	.word	0x00124f80

08000fdc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b0a      	cmp	r3, #10
 8000fe8:	d102      	bne.n	8000ff0 <__io_putchar+0x14>
    __io_putchar('\r');
 8000fea:	200d      	movs	r0, #13
 8000fec:	f7ff fff6 	bl	8000fdc <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ff0:	1d39      	adds	r1, r7, #4
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <__io_putchar+0x2c>)
 8000ffa:	f003 fd7f 	bl	8004afc <HAL_UART_Transmit>

  return 1;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000254 	.word	0x20000254

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001010:	b094      	sub	sp, #80	@ 0x50
 8001012:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 ffc8 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f9f0 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 faf2 	bl	8001604 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001020:	f000 fa46 	bl	80014b0 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8001024:	f000 fabe 	bl	80015a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8001028:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800102c:	f001 f822 	bl	8002074 <HAL_Delay>


  callibration();
 8001030:	f000 fb44 	bl	80016bc <callibration>

  for(int i =0; i<4;i++){
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e00c      	b.n	8001054 <main+0x48>
	  measurement(&m1,&m2,&m3,&m4,&m5,&vtec);
 800103a:	4b9e      	ldr	r3, [pc, #632]	@ (80012b4 <main+0x2a8>)
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b9e      	ldr	r3, [pc, #632]	@ (80012b8 <main+0x2ac>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4b9e      	ldr	r3, [pc, #632]	@ (80012bc <main+0x2b0>)
 8001044:	4a9e      	ldr	r2, [pc, #632]	@ (80012c0 <main+0x2b4>)
 8001046:	499f      	ldr	r1, [pc, #636]	@ (80012c4 <main+0x2b8>)
 8001048:	489f      	ldr	r0, [pc, #636]	@ (80012c8 <main+0x2bc>)
 800104a:	f000 fb7b 	bl	8001744 <measurement>
  for(int i =0; i<4;i++){
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b03      	cmp	r3, #3
 8001058:	ddef      	ble.n	800103a <main+0x2e>

  }

  modules_init(&m1,&m2,&m3,&m4,&m5);
 800105a:	4b97      	ldr	r3, [pc, #604]	@ (80012b8 <main+0x2ac>)
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b97      	ldr	r3, [pc, #604]	@ (80012bc <main+0x2b0>)
 8001060:	4a97      	ldr	r2, [pc, #604]	@ (80012c0 <main+0x2b4>)
 8001062:	4998      	ldr	r1, [pc, #608]	@ (80012c4 <main+0x2b8>)
 8001064:	4898      	ldr	r0, [pc, #608]	@ (80012c8 <main+0x2bc>)
 8001066:	f7ff fe0f 	bl	8000c88 <modules_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	    measurement(&m1,&m2,&m3,&m4,&m5,&vtec);
 800106a:	4b92      	ldr	r3, [pc, #584]	@ (80012b4 <main+0x2a8>)
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	4b92      	ldr	r3, [pc, #584]	@ (80012b8 <main+0x2ac>)
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4b92      	ldr	r3, [pc, #584]	@ (80012bc <main+0x2b0>)
 8001074:	4a92      	ldr	r2, [pc, #584]	@ (80012c0 <main+0x2b4>)
 8001076:	4993      	ldr	r1, [pc, #588]	@ (80012c4 <main+0x2b8>)
 8001078:	4893      	ldr	r0, [pc, #588]	@ (80012c8 <main+0x2bc>)
 800107a:	f000 fb63 	bl	8001744 <measurement>
	  		modules_heating(&m1,&m2,&m3,&m4,&m5,&heating_counter,&vtec);
 800107e:	4b8d      	ldr	r3, [pc, #564]	@ (80012b4 <main+0x2a8>)
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	4b92      	ldr	r3, [pc, #584]	@ (80012cc <main+0x2c0>)
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	4b8c      	ldr	r3, [pc, #560]	@ (80012b8 <main+0x2ac>)
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b8c      	ldr	r3, [pc, #560]	@ (80012bc <main+0x2b0>)
 800108c:	4a8c      	ldr	r2, [pc, #560]	@ (80012c0 <main+0x2b4>)
 800108e:	498d      	ldr	r1, [pc, #564]	@ (80012c4 <main+0x2b8>)
 8001090:	488d      	ldr	r0, [pc, #564]	@ (80012c8 <main+0x2bc>)
 8001092:	f7ff fed1 	bl	8000e38 <modules_heating>

	  		values_eval(m1.values, &vtec);
 8001096:	4987      	ldr	r1, [pc, #540]	@ (80012b4 <main+0x2a8>)
 8001098:	488d      	ldr	r0, [pc, #564]	@ (80012d0 <main+0x2c4>)
 800109a:	f000 fd11 	bl	8001ac0 <values_eval>
	  		values_eval(m2.values, &vtec);
 800109e:	4985      	ldr	r1, [pc, #532]	@ (80012b4 <main+0x2a8>)
 80010a0:	488c      	ldr	r0, [pc, #560]	@ (80012d4 <main+0x2c8>)
 80010a2:	f000 fd0d 	bl	8001ac0 <values_eval>
	  		values_eval(m3.values, &vtec);
 80010a6:	4983      	ldr	r1, [pc, #524]	@ (80012b4 <main+0x2a8>)
 80010a8:	488b      	ldr	r0, [pc, #556]	@ (80012d8 <main+0x2cc>)
 80010aa:	f000 fd09 	bl	8001ac0 <values_eval>
	  		values_eval(m4.values, &vtec);
 80010ae:	4981      	ldr	r1, [pc, #516]	@ (80012b4 <main+0x2a8>)
 80010b0:	488a      	ldr	r0, [pc, #552]	@ (80012dc <main+0x2d0>)
 80010b2:	f000 fd05 	bl	8001ac0 <values_eval>
	  		values_eval(m5.values, &vtec);
 80010b6:	497f      	ldr	r1, [pc, #508]	@ (80012b4 <main+0x2a8>)
 80010b8:	4889      	ldr	r0, [pc, #548]	@ (80012e0 <main+0x2d4>)
 80010ba:	f000 fd01 	bl	8001ac0 <values_eval>

	  		if(m1.active){
 80010be:	4b82      	ldr	r3, [pc, #520]	@ (80012c8 <main+0x2bc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d045      	beq.n	8001152 <main+0x146>
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 80010c6:	4b80      	ldr	r3, [pc, #512]	@ (80012c8 <main+0x2bc>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa3c 	bl	8000548 <__aeabi_f2d>
 80010d0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80010d4:	4b7c      	ldr	r3, [pc, #496]	@ (80012c8 <main+0x2bc>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	4680      	mov	r8, r0
 80010e0:	4689      	mov	r9, r1
 80010e2:	4b79      	ldr	r3, [pc, #484]	@ (80012c8 <main+0x2bc>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4682      	mov	sl, r0
 80010ee:	468b      	mov	fp, r1
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 80010f0:	4b75      	ldr	r3, [pc, #468]	@ (80012c8 <main+0x2bc>)
 80010f2:	695b      	ldr	r3, [r3, #20]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa27 	bl	8000548 <__aeabi_f2d>
 80010fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 80010fe:	4b72      	ldr	r3, [pc, #456]	@ (80012c8 <main+0x2bc>)
 8001100:	699b      	ldr	r3, [r3, #24]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	e9c7 0100 	strd	r0, r1, [r7]
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 800110c:	4b6e      	ldr	r3, [pc, #440]	@ (80012c8 <main+0x2bc>)
 800110e:	69db      	ldr	r3, [r3, #28]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 800111a:	4b6b      	ldr	r3, [pc, #428]	@ (80012c8 <main+0x2bc>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800112c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001130:	ed97 7b00 	vldr	d7, [r7]
 8001134:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001138:	ed97 7b02 	vldr	d7, [r7, #8]
 800113c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001140:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001144:	e9cd 8900 	strd	r8, r9, [sp]
 8001148:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800114c:	4865      	ldr	r0, [pc, #404]	@ (80012e4 <main+0x2d8>)
 800114e:	f004 fdc7 	bl	8005ce0 <iprintf>
	  		}
	  		if(m2.active){
 8001152:	4b5c      	ldr	r3, [pc, #368]	@ (80012c4 <main+0x2b8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d045      	beq.n	80011e6 <main+0x1da>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <main+0x2b8>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9f2 	bl	8000548 <__aeabi_f2d>
 8001164:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001168:	4b56      	ldr	r3, [pc, #344]	@ (80012c4 <main+0x2b8>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9eb 	bl	8000548 <__aeabi_f2d>
 8001172:	4680      	mov	r8, r0
 8001174:	4689      	mov	r9, r1
 8001176:	4b53      	ldr	r3, [pc, #332]	@ (80012c4 <main+0x2b8>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9e4 	bl	8000548 <__aeabi_f2d>
 8001180:	4682      	mov	sl, r0
 8001182:	468b      	mov	fp, r1
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6]);
 8001184:	4b4f      	ldr	r3, [pc, #316]	@ (80012c4 <main+0x2b8>)
 8001186:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9dd 	bl	8000548 <__aeabi_f2d>
 800118e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6]);
 8001192:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <main+0x2b8>)
 8001194:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	e9c7 0100 	strd	r0, r1, [r7]
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6]);
 80011a0:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <main+0x2b8>)
 80011a2:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9cf 	bl	8000548 <__aeabi_f2d>
 80011aa:	4604      	mov	r4, r0
 80011ac:	460d      	mov	r5, r1
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6]);
 80011ae:	4b45      	ldr	r3, [pc, #276]	@ (80012c4 <main+0x2b8>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9c8 	bl	8000548 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80011c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80011c4:	ed97 7b00 	vldr	d7, [r7]
 80011c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80011cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80011d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80011d4:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80011d8:	e9cd 8900 	strd	r8, r9, [sp]
 80011dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011e0:	4840      	ldr	r0, [pc, #256]	@ (80012e4 <main+0x2d8>)
 80011e2:	f004 fd7d 	bl	8005ce0 <iprintf>
	  				}
	  		if(m3.active){
 80011e6:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <main+0x2b4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d045      	beq.n	800127a <main+0x26e>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 80011ee:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <main+0x2b4>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9a8 	bl	8000548 <__aeabi_f2d>
 80011f8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80011fc:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <main+0x2b4>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9a1 	bl	8000548 <__aeabi_f2d>
 8001206:	4680      	mov	r8, r0
 8001208:	4689      	mov	r9, r1
 800120a:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <main+0x2b4>)
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f99a 	bl	8000548 <__aeabi_f2d>
 8001214:	4682      	mov	sl, r0
 8001216:	468b      	mov	fp, r1
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 8001218:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <main+0x2b4>)
 800121a:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f993 	bl	8000548 <__aeabi_f2d>
 8001222:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <main+0x2b4>)
 8001228:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f98c 	bl	8000548 <__aeabi_f2d>
 8001230:	e9c7 0100 	strd	r0, r1, [r7]
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <main+0x2b4>)
 8001236:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	4604      	mov	r4, r0
 8001240:	460d      	mov	r5, r1
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <main+0x2b4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f97e 	bl	8000548 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001254:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001258:	ed97 7b00 	vldr	d7, [r7]
 800125c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001260:	ed97 7b02 	vldr	d7, [r7, #8]
 8001264:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001268:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800126c:	e9cd 8900 	strd	r8, r9, [sp]
 8001270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001274:	481b      	ldr	r0, [pc, #108]	@ (80012e4 <main+0x2d8>)
 8001276:	f004 fd33 	bl	8005ce0 <iprintf>
	  				}
	  		if(m4.active){
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <main+0x2b0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d060      	beq.n	8001344 <main+0x338>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <main+0x2b0>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f95e 	bl	8000548 <__aeabi_f2d>
 800128c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <main+0x2b0>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f957 	bl	8000548 <__aeabi_f2d>
 800129a:	4680      	mov	r8, r0
 800129c:	4689      	mov	r9, r1
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <main+0x2b0>)
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f950 	bl	8000548 <__aeabi_f2d>
 80012a8:	4682      	mov	sl, r0
 80012aa:	468b      	mov	fp, r1
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <main+0x2b0>)
 80012ae:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 80012b0:	4618      	mov	r0, r3
 80012b2:	e019      	b.n	80012e8 <main+0x2dc>
 80012b4:	20000390 	.word	0x20000390
 80012b8:	2000036c 	.word	0x2000036c
 80012bc:	20000348 	.word	0x20000348
 80012c0:	20000324 	.word	0x20000324
 80012c4:	20000300 	.word	0x20000300
 80012c8:	200002dc 	.word	0x200002dc
 80012cc:	20000394 	.word	0x20000394
 80012d0:	200002e4 	.word	0x200002e4
 80012d4:	20000308 	.word	0x20000308
 80012d8:	2000032c 	.word	0x2000032c
 80012dc:	20000350 	.word	0x20000350
 80012e0:	20000374 	.word	0x20000374
 80012e4:	08007cf4 	.word	0x08007cf4
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 80012f0:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <main+0x3e4>)
 80012f2:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f927 	bl	8000548 <__aeabi_f2d>
 80012fa:	e9c7 0100 	strd	r0, r1, [r7]
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 80012fe:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <main+0x3e4>)
 8001300:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 800130c:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <main+0x3e4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800131e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001322:	ed97 7b00 	vldr	d7, [r7]
 8001326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800132a:	ed97 7b02 	vldr	d7, [r7, #8]
 800132e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001332:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001336:	e9cd 8900 	strd	r8, r9, [sp]
 800133a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800133e:	482d      	ldr	r0, [pc, #180]	@ (80013f4 <main+0x3e8>)
 8001340:	f004 fcce 	bl	8005ce0 <iprintf>
	  				}
	  		if(m5.active){
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <main+0x3ec>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d045      	beq.n	80013d8 <main+0x3cc>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 800134c:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <main+0x3ec>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8f9 	bl	8000548 <__aeabi_f2d>
 8001356:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <main+0x3ec>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4680      	mov	r8, r0
 8001366:	4689      	mov	r9, r1
 8001368:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <main+0x3ec>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4682      	mov	sl, r0
 8001374:	468b      	mov	fp, r1
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <main+0x3ec>)
 8001378:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8e4 	bl	8000548 <__aeabi_f2d>
 8001380:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <main+0x3ec>)
 8001386:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	e9c7 0100 	strd	r0, r1, [r7]
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <main+0x3ec>)
 8001394:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8d6 	bl	8000548 <__aeabi_f2d>
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <main+0x3ec>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8cf 	bl	8000548 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80013b2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80013b6:	ed97 7b00 	vldr	d7, [r7]
 80013ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013be:	ed97 7b02 	vldr	d7, [r7, #8]
 80013c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80013c6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80013ca:	e9cd 8900 	strd	r8, r9, [sp]
 80013ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013d2:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <main+0x3e8>)
 80013d4:	f004 fc84 	bl	8005ce0 <iprintf>
	  				}

	  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2101      	movs	r1, #1
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e0:	f001 ffe2 	bl	80033a8 <HAL_GPIO_WritePin>
	  		HAL_Delay(10000);
 80013e4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80013e8:	f000 fe44 	bl	8002074 <HAL_Delay>
	  	    measurement(&m1,&m2,&m3,&m4,&m5,&vtec);
 80013ec:	e63d      	b.n	800106a <main+0x5e>
 80013ee:	bf00      	nop
 80013f0:	20000348 	.word	0x20000348
 80013f4:	08007cf4 	.word	0x08007cf4
 80013f8:	2000036c 	.word	0x2000036c

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b096      	sub	sp, #88	@ 0x58
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001406:	2228      	movs	r2, #40	@ 0x28
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fdb0 	bl	8005f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001444:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001448:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800144e:	4618      	mov	r0, r3
 8001450:	f001 ffc2 	bl	80033d8 <HAL_RCC_OscConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800145a:	f000 f929 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145e:	230f      	movs	r3, #15
 8001460:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f002 ffba 	bl	80043f4 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001486:	f000 f913 	bl	80016b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800148e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001492:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4618      	mov	r0, r3
 8001498:	f003 f9be 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014a2:	f000 f905 	bl	80016b0 <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3758      	adds	r7, #88	@ 0x58
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b6:	463b      	mov	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014c6:	4b35      	ldr	r3, [pc, #212]	@ (800159c <MX_ADC2_Init+0xec>)
 80014c8:	4a35      	ldr	r2, [pc, #212]	@ (80015a0 <MX_ADC2_Init+0xf0>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <MX_ADC2_Init+0xec>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d2:	4b32      	ldr	r3, [pc, #200]	@ (800159c <MX_ADC2_Init+0xec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d8:	4b30      	ldr	r3, [pc, #192]	@ (800159c <MX_ADC2_Init+0xec>)
 80014da:	2201      	movs	r2, #1
 80014dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <MX_ADC2_Init+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <MX_ADC2_Init+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <MX_ADC2_Init+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f2:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <MX_ADC2_Init+0xec>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <MX_ADC2_Init+0xec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80014fe:	4b27      	ldr	r3, [pc, #156]	@ (800159c <MX_ADC2_Init+0xec>)
 8001500:	2203      	movs	r2, #3
 8001502:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <MX_ADC2_Init+0xec>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <MX_ADC2_Init+0xec>)
 800150e:	2204      	movs	r2, #4
 8001510:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <MX_ADC2_Init+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <MX_ADC2_Init+0xec>)
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800151e:	481f      	ldr	r0, [pc, #124]	@ (800159c <MX_ADC2_Init+0xec>)
 8001520:	f000 fdcc 	bl	80020bc <HAL_ADC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800152a:	f000 f8c1 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800152e:	2304      	movs	r3, #4
 8001530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001532:	2301      	movs	r3, #1
 8001534:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800153a:	2307      	movs	r3, #7
 800153c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4814      	ldr	r0, [pc, #80]	@ (800159c <MX_ADC2_Init+0xec>)
 800154c:	f001 f94c 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001556:	f000 f8ab 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800155a:	2303      	movs	r3, #3
 800155c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800155e:	2302      	movs	r3, #2
 8001560:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_ADC2_Init+0xec>)
 8001568:	f001 f93e 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001572:	f000 f89d 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001576:	2302      	movs	r3, #2
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800157a:	2303      	movs	r3, #3
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	@ (800159c <MX_ADC2_Init+0xec>)
 8001584:	f001 f930 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800158e:	f000 f88f 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000398 	.word	0x20000398
 80015a0:	50000100 	.word	0x50000100

080015a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <MX_USART2_UART_Init+0x5c>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_USART2_UART_Init+0x58>)
 80015e8:	f003 fa3a 	bl	8004a60 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f2:	f000 f85d 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000254 	.word	0x20000254
 8001600:	40004400 	.word	0x40004400

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <MX_GPIO_Init+0xa4>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a22      	ldr	r2, [pc, #136]	@ (80016a8 <MX_GPIO_Init+0xa4>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_GPIO_Init+0xa4>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_GPIO_Init+0xa4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <MX_GPIO_Init+0xa4>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_GPIO_Init+0xa4>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|S0_Pin|P6_LED_Pin
 800164a:	2200      	movs	r2, #0
 800164c:	f241 711b 	movw	r1, #5915	@ 0x171b
 8001650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001654:	f001 fea8 	bl	80033a8 <HAL_GPIO_WritePin>
                          |S1_Pin|S2_Pin|S3_Pin|P5_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P4_LED_Pin|P3_LED_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2109      	movs	r1, #9
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <MX_GPIO_Init+0xa8>)
 800165e:	f001 fea3 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin S0_Pin P6_LED_Pin
                           S1_Pin S2_Pin S3_Pin P5_LED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|S0_Pin|P6_LED_Pin
 8001662:	f241 731b 	movw	r3, #5915	@ 0x171b
 8001666:	60fb      	str	r3, [r7, #12]
                          |S1_Pin|S2_Pin|S3_Pin|P5_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167e:	f001 fd21 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P4_LED_Pin P3_LED_Pin */
  GPIO_InitStruct.Pin = P4_LED_Pin|P3_LED_Pin;
 8001682:	2309      	movs	r3, #9
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_GPIO_Init+0xa8>)
 800169a:	f001 fd13 	bl	80030c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <Error_Handler+0x8>

080016bc <callibration>:


int selectPins[4] = {S0_Pin, S1_Pin, S2_Pin, S3_Pin};


void callibration(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4802      	ldr	r0, [pc, #8]	@ (80016cc <callibration+0x10>)
 80016c4:	f001 f81d 	bl	8002702 <HAL_ADCEx_Calibration_Start>

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000398 	.word	0x20000398

080016d0 <mux_select>:

void mux_select(int pin){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	   for (int i = 0; i < 4; i++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e00d      	b.n	80016fa <mux_select+0x2a>
	        HAL_GPIO_WritePin(selectpinsPort, selectPins[i], GPIO_PIN_RESET);
 80016de:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <mux_select+0x70>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f0:	f001 fe5a 	bl	80033a8 <HAL_GPIO_WritePin>
	   for (int i = 0; i < 4; i++) {
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3301      	adds	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	ddee      	ble.n	80016de <mux_select+0xe>
	    }

	    // sets the pins to the correct value of the channel -> 0 to 4 bit shift
	    for (int i = 3; i >= 0; i--) {
 8001700:	2303      	movs	r3, #3
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	e014      	b.n	8001730 <mux_select+0x60>
	        HAL_GPIO_WritePin(selectpinsPort, selectPins[i], (GPIO_PinState)((pin >> i) & 0x01));
 8001706:	4a0e      	ldr	r2, [pc, #56]	@ (8001740 <mux_select+0x70>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	b299      	uxth	r1, r3
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	fa42 f303 	asr.w	r3, r2, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001726:	f001 fe3f 	bl	80033a8 <HAL_GPIO_WritePin>
	    for (int i = 3; i >= 0; i--) {
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3b01      	subs	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dae7      	bge.n	8001706 <mux_select+0x36>
	    }
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000

08001744 <measurement>:

void measurement(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5,float *vtec)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0d3      	sub	sp, #332	@ 0x14c
 8001748:	af00      	add	r7, sp, #0
 800174a:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800174e:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001758:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800175c:	6001      	str	r1, [r0, #0]
 800175e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001762:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8001766:	600a      	str	r2, [r1, #0]
 8001768:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800176c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8001770:	6013      	str	r3, [r2, #0]
	  uint16_t temp_mux1[16] = {0};
 8001772:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001776:	2220      	movs	r2, #32
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fbf8 	bl	8005f70 <memset>
	  uint16_t temp_mux2[16] = {0};
 8001780:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001784:	2220      	movs	r2, #32
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fbf1 	bl	8005f70 <memset>
	  uint16_t temp_mux3[16] = {0};
 800178e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001792:	2220      	movs	r2, #32
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fbea 	bl	8005f70 <memset>

	  float mux1_values[16] ={0};
 800179c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80017a0:	2240      	movs	r2, #64	@ 0x40
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fbe3 	bl	8005f70 <memset>
	  float mux2_values[16] ={0};
 80017aa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80017ae:	2240      	movs	r2, #64	@ 0x40
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 fbdc 	bl	8005f70 <memset>
	  float mux3_values[16] ={0};
 80017b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017c0:	4618      	mov	r0, r3
 80017c2:	2340      	movs	r3, #64	@ 0x40
 80017c4:	461a      	mov	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	f004 fbd2 	bl	8005f70 <memset>

	for (int s = 0; s < SAMPLES; s++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80017d2:	e06c      	b.n	80018ae <measurement+0x16a>
	  for (int j = 0; j < 16; j++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80017da:	e05f      	b.n	800189c <measurement+0x158>
		  mux_select(j);
 80017dc:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 80017e0:	f7ff ff76 	bl	80016d0 <mux_select>

		  HAL_ADC_Start(&hadc2);
 80017e4:	48b2      	ldr	r0, [pc, #712]	@ (8001ab0 <measurement+0x36c>)
 80017e6:	f000 fdfb 	bl	80023e0 <HAL_ADC_Start>

		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80017ea:	f04f 31ff 	mov.w	r1, #4294967295
 80017ee:	48b0      	ldr	r0, [pc, #704]	@ (8001ab0 <measurement+0x36c>)
 80017f0:	f000 feac 	bl	800254c <HAL_ADC_PollForConversion>
		  temp_mux1[j] += HAL_ADC_GetValue(&hadc2);
 80017f4:	48ae      	ldr	r0, [pc, #696]	@ (8001ab0 <measurement+0x36c>)
 80017f6:	f000 ff77 	bl	80026e8 <HAL_ADC_GetValue>
 80017fa:	4601      	mov	r1, r0
 80017fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001806:	443b      	add	r3, r7
 8001808:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 800180c:	b28b      	uxth	r3, r1
 800180e:	4413      	add	r3, r2
 8001810:	b29a      	uxth	r2, r3
 8001812:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800181c:	443b      	add	r3, r7
 800181e:	f823 2c38 	strh.w	r2, [r3, #-56]
		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001822:	f04f 31ff 	mov.w	r1, #4294967295
 8001826:	48a2      	ldr	r0, [pc, #648]	@ (8001ab0 <measurement+0x36c>)
 8001828:	f000 fe90 	bl	800254c <HAL_ADC_PollForConversion>
		  temp_mux2[j] += HAL_ADC_GetValue(&hadc2);
 800182c:	48a0      	ldr	r0, [pc, #640]	@ (8001ab0 <measurement+0x36c>)
 800182e:	f000 ff5b 	bl	80026e8 <HAL_ADC_GetValue>
 8001832:	4601      	mov	r1, r0
 8001834:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800183e:	443b      	add	r3, r7
 8001840:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 8001844:	b28b      	uxth	r3, r1
 8001846:	4413      	add	r3, r2
 8001848:	b29a      	uxth	r2, r3
 800184a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001854:	443b      	add	r3, r7
 8001856:	f823 2c58 	strh.w	r2, [r3, #-88]
		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800185a:	f04f 31ff 	mov.w	r1, #4294967295
 800185e:	4894      	ldr	r0, [pc, #592]	@ (8001ab0 <measurement+0x36c>)
 8001860:	f000 fe74 	bl	800254c <HAL_ADC_PollForConversion>
		  temp_mux3[j] += HAL_ADC_GetValue(&hadc2);
 8001864:	4892      	ldr	r0, [pc, #584]	@ (8001ab0 <measurement+0x36c>)
 8001866:	f000 ff3f 	bl	80026e8 <HAL_ADC_GetValue>
 800186a:	4601      	mov	r1, r0
 800186c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001876:	443b      	add	r3, r7
 8001878:	f833 2c78 	ldrh.w	r2, [r3, #-120]
 800187c:	b28b      	uxth	r3, r1
 800187e:	4413      	add	r3, r2
 8001880:	b29a      	uxth	r2, r3
 8001882:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800188c:	443b      	add	r3, r7
 800188e:	f823 2c78 	strh.w	r2, [r3, #-120]
	  for (int j = 0; j < 16; j++) {
 8001892:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001896:	3301      	adds	r3, #1
 8001898:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800189c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	dd9b      	ble.n	80017dc <measurement+0x98>
	for (int s = 0; s < SAMPLES; s++) {
 80018a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80018ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	dd8e      	ble.n	80017d4 <measurement+0x90>


	  }
	}

			for (int i = 0; i < 16; i++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80018bc:	e053      	b.n	8001966 <measurement+0x222>
		        mux1_values[i] = temp_mux1[i] / SAMPLES;
 80018be:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80018c8:	443b      	add	r3, r7
 80018ca:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80018ce:	4a79      	ldr	r2, [pc, #484]	@ (8001ab4 <measurement+0x370>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80018ea:	443b      	add	r3, r7
 80018ec:	3bb8      	subs	r3, #184	@ 0xb8
 80018ee:	edc3 7a00 	vstr	s15, [r3]
		        mux2_values[i] = temp_mux2[i] / SAMPLES;
 80018f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80018fc:	443b      	add	r3, r7
 80018fe:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8001902:	4a6c      	ldr	r2, [pc, #432]	@ (8001ab4 <measurement+0x370>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	b29b      	uxth	r3, r3
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001914:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800191e:	443b      	add	r3, r7
 8001920:	3bf8      	subs	r3, #248	@ 0xf8
 8001922:	edc3 7a00 	vstr	s15, [r3]
		        mux3_values[i] = temp_mux3[i] / SAMPLES;
 8001926:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001930:	443b      	add	r3, r7
 8001932:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8001936:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab4 <measurement+0x370>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	b29b      	uxth	r3, r3
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800194c:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8001950:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < 16; i++) {
 800195c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001960:	3301      	adds	r3, #1
 8001962:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001966:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800196a:	2b0f      	cmp	r3, #15
 800196c:	dda7      	ble.n	80018be <measurement+0x17a>
		    }

		    for (int z = 0; z < 7; z++) {
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001974:	e03b      	b.n	80019ee <measurement+0x2aa>
		        module1->values[z] = mux1_values[z];
 8001976:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001980:	443b      	add	r3, r7
 8001982:	3bb8      	subs	r3, #184	@ 0xb8
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800198a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001994:	3302      	adds	r3, #2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	601a      	str	r2, [r3, #0]
		        module3->values[z] = mux2_values[z];
 800199c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80019a6:	443b      	add	r3, r7
 80019a8:	3bf8      	subs	r3, #248	@ 0xf8
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019ba:	3302      	adds	r3, #2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	601a      	str	r2, [r3, #0]
		        module5->values[z] = mux3_values[z];
 80019c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019c6:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80019ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80019d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019dc:	3302      	adds	r3, #2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	601a      	str	r2, [r3, #0]
		    for (int z = 0; z < 7; z++) {
 80019e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019e8:	3301      	adds	r3, #1
 80019ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80019ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	ddbf      	ble.n	8001976 <measurement+0x232>
		    }

		    for (int y = 0, x = 7; y < 7 && x < 14; y++, x++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80019fc:	2307      	movs	r3, #7
 80019fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001a02:	e02f      	b.n	8001a64 <measurement+0x320>
		        module2->values[y] = mux1_values[x];
 8001a04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001a0e:	443b      	add	r3, r7
 8001a10:	3bb8      	subs	r3, #184	@ 0xb8
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a1c:	6819      	ldr	r1, [r3, #0]
 8001a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a22:	3302      	adds	r3, #2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	601a      	str	r2, [r3, #0]
		        module4->values[y] = mux2_values[x];
 8001a2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001a34:	443b      	add	r3, r7
 8001a36:	3bf8      	subs	r3, #248	@ 0xf8
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a3e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a48:	3302      	adds	r3, #2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	601a      	str	r2, [r3, #0]
		    for (int y = 0, x = 7; y < 7 && x < 14; y++, x++) {
 8001a50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001a5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	dc03      	bgt.n	8001a74 <measurement+0x330>
 8001a6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a70:	2b0d      	cmp	r3, #13
 8001a72:	ddc7      	ble.n	8001a04 <measurement+0x2c0>
		    }

		    *vtec = mux3_values[7] * 2 * 3.3f / 4095;
 8001a74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a78:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a84:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001ab8 <measurement+0x374>
 8001a88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a8c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001abc <measurement+0x378>
 8001a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a94:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001a98:	edc3 7a00 	vstr	s15, [r3]


		    HAL_Delay(1000);
 8001a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa0:	f000 fae8 	bl	8002074 <HAL_Delay>
}
 8001aa4:	bf00      	nop
 8001aa6:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000398 	.word	0x20000398
 8001ab4:	cccccccd 	.word	0xcccccccd
 8001ab8:	40533333 	.word	0x40533333
 8001abc:	457ff000 	.word	0x457ff000

08001ac0 <values_eval>:

void values_eval(float *module, float *vtec){
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]

	//OFFSET VALUES [V]
	for(int i = 0; i<4 ; i++){
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e016      	b.n	8001afe <values_eval+0x3e>
		module[i] = module[i]*3.3f/4095;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001be8 <values_eval+0x128>
 8001ae0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001bec <values_eval+0x12c>
 8001af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<4 ; i++){
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	dde5      	ble.n	8001ad0 <values_eval+0x10>
	}

	//each current (+ and -) calculation and substraction  (TEC_CURRENT) [mA]
	float tec_current = ((module[4]*3.3f/4095)/(19.3*0.1)*1000) - ((module[5]*3.3f/4095)/(150*0.1)*1000);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3310      	adds	r3, #16
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001be8 <values_eval+0x128>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001bec <values_eval+0x12c>
 8001b18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b1c:	ee16 0a90 	vmov	r0, s13
 8001b20:	f7fe fd12 	bl	8000548 <__aeabi_f2d>
 8001b24:	a32e      	add	r3, pc, #184	@ (adr r3, 8001be0 <values_eval+0x120>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fe8f 	bl	800084c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <values_eval+0x130>)
 8001b3c:	f7fe fd5c 	bl	80005f8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4614      	mov	r4, r2
 8001b46:	461d      	mov	r5, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3314      	adds	r3, #20
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001be8 <values_eval+0x128>
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001bec <values_eval+0x12c>
 8001b5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b60:	ee16 0a90 	vmov	r0, s13
 8001b64:	f7fe fcf0 	bl	8000548 <__aeabi_f2d>
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <values_eval+0x134>)
 8001b6e:	f7fe fe6d 	bl	800084c <__aeabi_ddiv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <values_eval+0x130>)
 8001b80:	f7fe fd3a 	bl	80005f8 <__aeabi_dmul>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fb7c 	bl	8000288 <__aeabi_dsub>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f806 	bl	8000ba8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60bb      	str	r3, [r7, #8]

	//changing the place of VTH in the table [V]
	module[4] = module[6]*3.3f/4095;;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001be8 <values_eval+0x128>
 8001bac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3310      	adds	r3, #16
 8001bb4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001bec <values_eval+0x12c>
 8001bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbc:	edc3 7a00 	vstr	s15, [r3]

	module[6] = tec_current;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	601a      	str	r2, [r3, #0]

	module[5] = *vtec;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3314      	adds	r3, #20
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	601a      	str	r2, [r3, #0]

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	ae147ae2 	.word	0xae147ae2
 8001be4:	3ffee147 	.word	0x3ffee147
 8001be8:	40533333 	.word	0x40533333
 8001bec:	457ff000 	.word	0x457ff000
 8001bf0:	408f4000 	.word	0x408f4000
 8001bf4:	402e0000 	.word	0x402e0000

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_MspInit+0x44>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	@ (8001c3c <HAL_MspInit+0x44>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <HAL_MspInit+0x44>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_MspInit+0x44>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_MspInit+0x44>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_MspInit+0x44>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	@ (8001cb4 <HAL_ADC_MspInit+0x74>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d124      	bne.n	8001cac <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c84:	6153      	str	r3, [r2, #20]
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c92:	23e0      	movs	r3, #224	@ 0xe0
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca8:	f001 fa0c 	bl	80030c4 <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	@ 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	50000100 	.word	0x50000100
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <HAL_UART_MspInit+0x80>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d129      	bne.n	8001d32 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001d0e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d20:	2307      	movs	r3, #7
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2e:	f001 f9c9 	bl	80030c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40004400 	.word	0x40004400
 8001d40:	40021000 	.word	0x40021000

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f94b 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_kill>:

int _kill(int pid, int sig)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dbc:	f004 f92a 	bl	8006014 <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2216      	movs	r2, #22
 8001dc4:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_exit>:

void _exit (int status)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dda:	f04f 31ff 	mov.w	r1, #4294967295
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffe7 	bl	8001db2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <_exit+0x12>

08001de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfa:	f3af 8000 	nop.w
 8001dfe:	4601      	mov	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
  }

  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f8cd 	bl	8000fdc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf1      	blt.n	8001e34 <_write+0x12>
  }
  return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_close>:

int _close(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e82:	605a      	str	r2, [r3, #4]
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f004 f88e 	bl	8006014 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20003000 	.word	0x20003000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200003e8 	.word	0x200003e8
 8001f2c:	20000540 	.word	0x20000540

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f58:	f7ff ffea 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	@ (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f82:	f004 f84d 	bl	8006020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f86:	f7ff f841 	bl	800100c <main>

08001f8a <LoopForever>:

LoopForever:
    b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f8c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f98:	080080dc 	.word	0x080080dc
  ldr r2, =_sbss
 8001f9c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fa0:	2000053c 	.word	0x2000053c

08001fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_2_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_Init+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_Init+0x28>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f001 f84f 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fe18 	bl	8001bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 f859 	bl	80030aa <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f001 f82f 	bl	8003072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000010 	.word	0x20000010
 800202c:	20000018 	.word	0x20000018
 8002030:	20000014 	.word	0x20000014

08002034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000018 	.word	0x20000018
 8002058:	200003ec 	.word	0x200003ec

0800205c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200003ec 	.word	0x200003ec

08002074 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000018 	.word	0x20000018

080020bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b09a      	sub	sp, #104	@ 0x68
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e172      	b.n	80023c2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d176      	bne.n	80021dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d152      	bne.n	800219c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fd95 	bl	8001c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13b      	bne.n	800219c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fe81 	bl	8002e2c <ADC_Disable>
 800212a:	4603      	mov	r3, r0
 800212c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d12f      	bne.n	800219c <HAL_ADC_Init+0xe0>
 800213c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002140:	2b00      	cmp	r3, #0
 8002142:	d12b      	bne.n	800219c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800214c:	f023 0302 	bic.w	r3, r3, #2
 8002150:	f043 0202 	orr.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002166:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002176:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002178:	4b94      	ldr	r3, [pc, #592]	@ (80023cc <HAL_ADC_Init+0x310>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a94      	ldr	r2, [pc, #592]	@ (80023d0 <HAL_ADC_Init+0x314>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9a      	lsrs	r2, r3, #18
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800218e:	e002      	b.n	8002196 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3b01      	subs	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b8:	d110      	bne.n	80021dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f023 0312 	bic.w	r3, r3, #18
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 80df 	bne.w	80023a8 <HAL_ADC_Init+0x2ec>
 80021ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80da 	bne.w	80023a8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 80d2 	bne.w	80023a8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800220c:	f043 0202 	orr.w	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002214:	4b6f      	ldr	r3, [pc, #444]	@ (80023d4 <HAL_ADC_Init+0x318>)
 8002216:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002220:	d102      	bne.n	8002228 <HAL_ADC_Init+0x16c>
 8002222:	4b6d      	ldr	r3, [pc, #436]	@ (80023d8 <HAL_ADC_Init+0x31c>)
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	e002      	b.n	800222e <HAL_ADC_Init+0x172>
 8002228:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800222c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d108      	bne.n	800224e <HAL_ADC_Init+0x192>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x192>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_ADC_Init+0x194>
 800224e:	2300      	movs	r3, #0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d11c      	bne.n	800228e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002254:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_ADC_Init+0x1ba>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_ADC_Init+0x1ba>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_ADC_Init+0x1bc>
 8002276:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800227c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	431a      	orrs	r2, r3
 800228a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800228c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7e5b      	ldrb	r3, [r3, #25]
 8002292:	035b      	lsls	r3, r3, #13
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002298:	2a01      	cmp	r2, #1
 800229a:	d002      	beq.n	80022a2 <HAL_ADC_Init+0x1e6>
 800229c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022a0:	e000      	b.n	80022a4 <HAL_ADC_Init+0x1e8>
 80022a2:	2200      	movs	r2, #0
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022b4:	4313      	orrs	r3, r2
 80022b6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d11b      	bne.n	80022fa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7e5b      	ldrb	r3, [r3, #25]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	3b01      	subs	r3, #1
 80022d0:	045a      	lsls	r2, r3, #17
 80022d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022da:	663b      	str	r3, [r7, #96]	@ 0x60
 80022dc:	e00d      	b.n	80022fa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80022e6:	f043 0220 	orr.w	r2, r3, #32
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d007      	beq.n	8002312 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	4313      	orrs	r3, r2
 800230c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800230e:	4313      	orrs	r3, r2
 8002310:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b00      	cmp	r3, #0
 800231e:	d114      	bne.n	800234a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800232e:	f023 0302 	bic.w	r3, r3, #2
 8002332:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e1b      	ldrb	r3, [r3, #24]
 8002338:	039a      	lsls	r2, r3, #14
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4313      	orrs	r3, r2
 8002344:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002346:	4313      	orrs	r3, r2
 8002348:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <HAL_ADC_Init+0x320>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800235a:	430b      	orrs	r3, r1
 800235c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10c      	bne.n	8002380 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	f023 010f 	bic.w	r1, r3, #15
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
 800237e:	e007      	b.n	8002390 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020f 	bic.w	r2, r2, #15
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80023a6:	e00a      	b.n	80023be <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	f023 0312 	bic.w	r3, r3, #18
 80023b0:	f043 0210 	orr.w	r2, r3, #16
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3768      	adds	r7, #104	@ 0x68
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000010 	.word	0x20000010
 80023d0:	431bde83 	.word	0x431bde83
 80023d4:	50000300 	.word	0x50000300
 80023d8:	50000100 	.word	0x50000100
 80023dc:	fff0c007 	.word	0xfff0c007

080023e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 809c 	bne.w	8002534 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADC_Start+0x2a>
 8002406:	2302      	movs	r3, #2
 8002408:	e097      	b.n	800253a <HAL_ADC_Start+0x15a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fca6 	bl	8002d64 <ADC_Enable>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 8083 	bne.w	800252a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002438:	4b42      	ldr	r3, [pc, #264]	@ (8002544 <HAL_ADC_Start+0x164>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_ADC_Start+0x6e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244c:	d115      	bne.n	800247a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d027      	beq.n	80024b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002470:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002478:	e01e      	b.n	80024b8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248e:	d004      	beq.n	800249a <HAL_ADC_Start+0xba>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2c      	ldr	r2, [pc, #176]	@ (8002548 <HAL_ADC_Start+0x168>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10e      	bne.n	80024b8 <HAL_ADC_Start+0xd8>
 800249a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c4:	d106      	bne.n	80024d4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f023 0206 	bic.w	r2, r3, #6
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80024d2:	e002      	b.n	80024da <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	221c      	movs	r2, #28
 80024e8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024ea:	4b16      	ldr	r3, [pc, #88]	@ (8002544 <HAL_ADC_Start+0x164>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_ADC_Start+0x138>
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <HAL_ADC_Start+0x164>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d00a      	beq.n	8002518 <HAL_ADC_Start+0x138>
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <HAL_ADC_Start+0x164>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2b09      	cmp	r3, #9
 800250c:	d004      	beq.n	8002518 <HAL_ADC_Start+0x138>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002516:	d10f      	bne.n	8002538 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0204 	orr.w	r2, r2, #4
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e006      	b.n	8002538 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002532:	e001      	b.n	8002538 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002534:	2302      	movs	r3, #2
 8002536:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	50000300 	.word	0x50000300
 8002548:	50000100 	.word	0x50000100

0800254c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d102      	bne.n	8002568 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002562:	2308      	movs	r3, #8
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e02e      	b.n	80025c6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002568:	4b5e      	ldr	r3, [pc, #376]	@ (80026e4 <HAL_ADC_PollForConversion+0x198>)
 800256a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d112      	bne.n	800259e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d11d      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e09d      	b.n	80026da <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08b      	b.n	80026da <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025c2:	230c      	movs	r3, #12
 80025c4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025c6:	4b47      	ldr	r3, [pc, #284]	@ (80026e4 <HAL_ADC_PollForConversion+0x198>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_ADC_PollForConversion+0x90>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025da:	d104      	bne.n	80025e6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e003      	b.n	80025ee <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80025ee:	f7ff fd35 	bl	800205c <HAL_GetTick>
 80025f2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025f4:	e021      	b.n	800263a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d01d      	beq.n	800263a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_ADC_PollForConversion+0xc8>
 8002604:	f7ff fd2a 	bl	800205c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d212      	bcs.n	800263a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0d6      	beq.n	80025f6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800265e:	2b00      	cmp	r3, #0
 8002660:	d131      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002668:	2b00      	cmp	r3, #0
 800266a:	d12c      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d125      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d112      	bne.n	80026ae <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d112      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80026ac:	e00b      	b.n	80026c6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	50000300 	.word	0x50000300

080026e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADCEx_Calibration_Start+0x1c>
 800271a:	2302      	movs	r3, #2
 800271c:	e05f      	b.n	80027de <HAL_ADCEx_Calibration_Start+0xdc>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb80 	bl	8002e2c <ADC_Disable>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d14e      	bne.n	80027d4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800274a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002760:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002770:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002772:	f7ff fc73 	bl	800205c <HAL_GetTick>
 8002776:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002778:	e01c      	b.n	80027b4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800277a:	f7ff fc6f 	bl	800205c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b0a      	cmp	r3, #10
 8002786:	d915      	bls.n	80027b4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002792:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002796:	d10d      	bne.n	80027b4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f023 0312 	bic.w	r3, r3, #18
 80027a0:	f043 0210 	orr.w	r2, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e014      	b.n	80027de <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027c2:	d0da      	beq.n	800277a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f023 0303 	bic.w	r3, r3, #3
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b09b      	sub	sp, #108	@ 0x6c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22>
 8002806:	2302      	movs	r3, #2
 8002808:	e2a1      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x566>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 8285 	bne.w	8002d2c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b04      	cmp	r3, #4
 8002828:	d81c      	bhi.n	8002864 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	461a      	mov	r2, r3
 800283e:	231f      	movs	r3, #31
 8002840:	4093      	lsls	r3, r2
 8002842:	43db      	mvns	r3, r3
 8002844:	4019      	ands	r1, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa00 f203 	lsl.w	r2, r0, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	631a      	str	r2, [r3, #48]	@ 0x30
 8002862:	e063      	b.n	800292c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b09      	cmp	r3, #9
 800286a:	d81e      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	3b1e      	subs	r3, #30
 8002880:	221f      	movs	r2, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	4019      	ands	r1, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	3b1e      	subs	r3, #30
 800289c:	fa00 f203 	lsl.w	r2, r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80028a8:	e040      	b.n	800292c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b0e      	cmp	r3, #14
 80028b0:	d81e      	bhi.n	80028f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	3b3c      	subs	r3, #60	@ 0x3c
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	4019      	ands	r1, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	3b3c      	subs	r3, #60	@ 0x3c
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80028ee:	e01d      	b.n	800292c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	3b5a      	subs	r3, #90	@ 0x5a
 8002904:	221f      	movs	r2, #31
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	4019      	ands	r1, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	3b5a      	subs	r3, #90	@ 0x5a
 8002920:	fa00 f203 	lsl.w	r2, r0, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 80e5 	bne.w	8002b06 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b09      	cmp	r3, #9
 8002942:	d91c      	bls.n	800297e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6999      	ldr	r1, [r3, #24]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3b1e      	subs	r3, #30
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	4019      	ands	r1, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6898      	ldr	r0, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	3b1e      	subs	r3, #30
 8002970:	fa00 f203 	lsl.w	r2, r0, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	619a      	str	r2, [r3, #24]
 800297c:	e019      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6959      	ldr	r1, [r3, #20]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	2207      	movs	r2, #7
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6898      	ldr	r0, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d84f      	bhi.n	8002a74 <HAL_ADC_ConfigChannel+0x28c>
 80029d4:	a201      	add	r2, pc, #4	@ (adr r2, 80029dc <HAL_ADC_ConfigChannel+0x1f4>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	08002a0f 	.word	0x08002a0f
 80029e4:	08002a31 	.word	0x08002a31
 80029e8:	08002a53 	.word	0x08002a53
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002c64 <HAL_ADC_ConfigChannel+0x47c>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	0691      	lsls	r1, r2, #26
 80029fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029fe:	430a      	orrs	r2, r1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a0a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a0c:	e07b      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a14:	4b93      	ldr	r3, [pc, #588]	@ (8002c64 <HAL_ADC_ConfigChannel+0x47c>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	0691      	lsls	r1, r2, #26
 8002a1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a20:	430a      	orrs	r2, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a2c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a2e:	e06a      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a36:	4b8b      	ldr	r3, [pc, #556]	@ (8002c64 <HAL_ADC_ConfigChannel+0x47c>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	0691      	lsls	r1, r2, #26
 8002a40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a42:	430a      	orrs	r2, r1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a4e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a50:	e059      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a58:	4b82      	ldr	r3, [pc, #520]	@ (8002c64 <HAL_ADC_ConfigChannel+0x47c>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	0691      	lsls	r1, r2, #26
 8002a62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a64:	430a      	orrs	r2, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a70:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a72:	e048      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d107      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a96:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	069b      	lsls	r3, r3, #26
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aba:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	069b      	lsls	r3, r3, #26
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d107      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ade:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b02:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002b04:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x33e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x33e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x340>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 810a 	bne.w	8002d42 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d00f      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002b54:	e049      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	409a      	lsls	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d91c      	bls.n	8002bb2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6999      	ldr	r1, [r3, #24]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	3b1b      	subs	r3, #27
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4019      	ands	r1, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6898      	ldr	r0, [r3, #8]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b1b      	subs	r3, #27
 8002ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]
 8002bb0:	e01b      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6959      	ldr	r1, [r3, #20]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6898      	ldr	r0, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bea:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <HAL_ADC_ConfigChannel+0x480>)
 8002bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d105      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d015      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c06:	2b11      	cmp	r3, #17
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	f040 8091 	bne.w	8002d42 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 808a 	bne.w	8002d42 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c36:	d102      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x456>
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_ADC_ConfigChannel+0x484>)
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x45c>
 8002c3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c42:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d10e      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x488>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x488>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e006      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x48a>
 8002c64:	83fff000 	.word	0x83fff000
 8002c68:	50000300 	.word	0x50000300
 8002c6c:	50000100 	.word	0x50000100
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d150      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d107      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x4b0>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x4b0>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x4b2>
 8002c98:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d13c      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x4fa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cae:	d118      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cbc:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <HAL_ADC_ConfigChannel+0x574>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_ADC_ConfigChannel+0x578>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0c9a      	lsrs	r2, r3, #18
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cd2:	e002      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce0:	e02e      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b11      	cmp	r3, #17
 8002ce8:	d10b      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x51a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf2:	d106      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cfe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d00:	e01e      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d11a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d14:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d16:	e013      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002d2a:	e00a      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002d3e:	e000      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d40:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	376c      	adds	r7, #108	@ 0x6c
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000010 	.word	0x20000010
 8002d60:	431bde83 	.word	0x431bde83

08002d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <ADC_Enable+0x2c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <ADC_Enable+0x2c>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <ADC_Enable+0x2e>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d143      	bne.n	8002e1e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <ADC_Enable+0xc4>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e02f      	b.n	8002e20 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002dd0:	f7ff f944 	bl	800205c <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dd6:	e01b      	b.n	8002e10 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dd8:	f7ff f940 	bl	800205c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d914      	bls.n	8002e10 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d00d      	beq.n	8002e10 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d1dc      	bne.n	8002dd8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	8000003f 	.word	0x8000003f

08002e2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <ADC_Disable+0x2c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <ADC_Disable+0x2c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <ADC_Disable+0x2e>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d047      	beq.n	8002eee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030d 	and.w	r3, r3, #13
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10f      	bne.n	8002e8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0202 	orr.w	r2, r2, #2
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2203      	movs	r2, #3
 8002e82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e84:	f7ff f8ea 	bl	800205c <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e8a:	e029      	b.n	8002ee0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e023      	b.n	8002ef0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ea8:	f7ff f8d8 	bl	800205c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d914      	bls.n	8002ee0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0210 	orr.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	f043 0201 	orr.w	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d0dc      	beq.n	8002ea8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2a:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60d3      	str	r3, [r2, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	@ (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	@ (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f7ff ff8e 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff47 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff5c 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffb0 	bl	8003018 <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d2:	e14e      	b.n	8003372 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8140 	beq.w	800336c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d005      	beq.n	8003104 <HAL_GPIO_Init+0x40>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d130      	bne.n	8003166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313a:	2201      	movs	r2, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0201 	and.w	r2, r3, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d017      	beq.n	80031a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d123      	bne.n	80031f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	6939      	ldr	r1, [r7, #16]
 80031f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 809a 	beq.w	800336c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003238:	4b55      	ldr	r3, [pc, #340]	@ (8003390 <HAL_GPIO_Init+0x2cc>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4a54      	ldr	r2, [pc, #336]	@ (8003390 <HAL_GPIO_Init+0x2cc>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6193      	str	r3, [r2, #24]
 8003244:	4b52      	ldr	r3, [pc, #328]	@ (8003390 <HAL_GPIO_Init+0x2cc>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003250:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <HAL_GPIO_Init+0x2d0>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800327a:	d013      	beq.n	80032a4 <HAL_GPIO_Init+0x1e0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a46      	ldr	r2, [pc, #280]	@ (8003398 <HAL_GPIO_Init+0x2d4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00d      	beq.n	80032a0 <HAL_GPIO_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a45      	ldr	r2, [pc, #276]	@ (800339c <HAL_GPIO_Init+0x2d8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <HAL_GPIO_Init+0x1d8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a44      	ldr	r2, [pc, #272]	@ (80033a0 <HAL_GPIO_Init+0x2dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_GPIO_Init+0x1d4>
 8003294:	2303      	movs	r3, #3
 8003296:	e006      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 8003298:	2305      	movs	r3, #5
 800329a:	e004      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 800329c:	2302      	movs	r3, #2
 800329e:	e002      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 80032a4:	2300      	movs	r3, #0
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	f002 0203 	and.w	r2, r2, #3
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032b6:	4937      	ldr	r1, [pc, #220]	@ (8003394 <HAL_GPIO_Init+0x2d0>)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c4:	4b37      	ldr	r3, [pc, #220]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032e8:	4a2e      	ldr	r2, [pc, #184]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ee:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003312:	4a24      	ldr	r2, [pc, #144]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003318:	4b22      	ldr	r3, [pc, #136]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800333c:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003366:	4a0f      	ldr	r2, [pc, #60]	@ (80033a4 <HAL_GPIO_Init+0x2e0>)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	f47f aea9 	bne.w	80030d4 <HAL_GPIO_Init+0x10>
  }
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40021000 	.word	0x40021000
 8003394:	40010000 	.word	0x40010000
 8003398:	48000400 	.word	0x48000400
 800339c:	48000800 	.word	0x48000800
 80033a0:	48000c00 	.word	0x48000c00
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80033de:	af00      	add	r7, sp, #0
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f000 bff4 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 816d 	beq.w	80036ee <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003414:	4bb4      	ldr	r3, [pc, #720]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b04      	cmp	r3, #4
 800341e:	d00c      	beq.n	800343a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003420:	4bb1      	ldr	r3, [pc, #708]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d157      	bne.n	80034dc <HAL_RCC_OscConfig+0x104>
 800342c:	4bae      	ldr	r3, [pc, #696]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003438:	d150      	bne.n	80034dc <HAL_RCC_OscConfig+0x104>
 800343a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800343e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b3f      	cmp	r3, #63	@ 0x3f
 800345a:	d802      	bhi.n	8003462 <HAL_RCC_OscConfig+0x8a>
 800345c:	4ba2      	ldr	r3, [pc, #648]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	e015      	b.n	800348e <HAL_RCC_OscConfig+0xb6>
 8003462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003466:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003476:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800347a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800347e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800348a:	4b97      	ldr	r3, [pc, #604]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003492:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003496:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800349a:	fa92 f2a2 	rbit	r2, r2
 800349e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80034a2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8114 	beq.w	80036ec <HAL_RCC_OscConfig+0x314>
 80034c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 810b 	bne.w	80036ec <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f000 bf85 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x124>
 80034ee:	4b7e      	ldr	r3, [pc, #504]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e036      	b.n	800356a <HAL_RCC_OscConfig+0x192>
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x14e>
 800350c:	4b76      	ldr	r3, [pc, #472]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a75      	ldr	r2, [pc, #468]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b73      	ldr	r3, [pc, #460]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a72      	ldr	r2, [pc, #456]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e021      	b.n	800356a <HAL_RCC_OscConfig+0x192>
 8003526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003536:	d10c      	bne.n	8003552 <HAL_RCC_OscConfig+0x17a>
 8003538:	4b6b      	ldr	r3, [pc, #428]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6a      	ldr	r2, [pc, #424]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800353e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b68      	ldr	r3, [pc, #416]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a67      	ldr	r2, [pc, #412]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e00b      	b.n	800356a <HAL_RCC_OscConfig+0x192>
 8003552:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a64      	ldr	r2, [pc, #400]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b62      	ldr	r3, [pc, #392]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a61      	ldr	r2, [pc, #388]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800356a:	4b5f      	ldr	r3, [pc, #380]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	495a      	ldr	r1, [pc, #360]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003580:	4313      	orrs	r3, r2
 8003582:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d054      	beq.n	800363e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fd62 	bl	800205c <HAL_GetTick>
 8003598:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359e:	f7fe fd5d 	bl	800205c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d902      	bls.n	80035b4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	f000 bf19 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
 80035b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035b8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80035c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80035d4:	d802      	bhi.n	80035dc <HAL_RCC_OscConfig+0x204>
 80035d6:	4b44      	ldr	r3, [pc, #272]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e015      	b.n	8003608 <HAL_RCC_OscConfig+0x230>
 80035dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035e0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80035f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035f4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80035f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003604:	4b38      	ldr	r3, [pc, #224]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800360c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003610:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003614:	fa92 f2a2 	rbit	r2, r2
 8003618:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800361c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003620:	fab2 f282 	clz	r2, r2
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	f042 0220 	orr.w	r2, r2, #32
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f002 021f 	and.w	r2, r2, #31
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f202 	lsl.w	r2, r1, r2
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0b0      	beq.n	800359e <HAL_RCC_OscConfig+0x1c6>
 800363c:	e057      	b.n	80036ee <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fe fd0d 	bl	800205c <HAL_GetTick>
 8003642:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fd08 	bl	800205c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b64      	cmp	r3, #100	@ 0x64
 8003656:	d902      	bls.n	800365e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	f000 bec4 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
 800365e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003662:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003672:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b3f      	cmp	r3, #63	@ 0x3f
 800367e:	d802      	bhi.n	8003686 <HAL_RCC_OscConfig+0x2ae>
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x2da>
 8003686:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800368a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800369a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800369e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80036a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80036ae:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <HAL_RCC_OscConfig+0x310>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036b6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80036ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80036be:	fa92 f2a2 	rbit	r2, r2
 80036c2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80036c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80036ca:	fab2 f282 	clz	r2, r2
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f042 0220 	orr.w	r2, r2, #32
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f002 021f 	and.w	r2, r2, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f202 	lsl.w	r2, r1, r2
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1b0      	bne.n	8003648 <HAL_RCC_OscConfig+0x270>
 80036e6:	e002      	b.n	80036ee <HAL_RCC_OscConfig+0x316>
 80036e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 816c 	beq.w	80039dc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003704:	4bcc      	ldr	r3, [pc, #816]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003710:	4bc9      	ldr	r3, [pc, #804]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b08      	cmp	r3, #8
 800371a:	d16d      	bne.n	80037f8 <HAL_RCC_OscConfig+0x420>
 800371c:	4bc6      	ldr	r3, [pc, #792]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d167      	bne.n	80037f8 <HAL_RCC_OscConfig+0x420>
 8003728:	2302      	movs	r3, #2
 800372a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800373a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b3f      	cmp	r3, #63	@ 0x3f
 8003746:	d802      	bhi.n	800374e <HAL_RCC_OscConfig+0x376>
 8003748:	4bbb      	ldr	r3, [pc, #748]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	e013      	b.n	8003776 <HAL_RCC_OscConfig+0x39e>
 800374e:	2302      	movs	r3, #2
 8003750:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003760:	2302      	movs	r3, #2
 8003762:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003766:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003772:	4bb1      	ldr	r3, [pc, #708]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	2202      	movs	r2, #2
 8003778:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800377c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003788:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f042 0220 	orr.w	r2, r2, #32
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f002 021f 	and.w	r2, r2, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCC_OscConfig+0x3e6>
 80037a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f000 be14 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b9e      	ldr	r3, [pc, #632]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	21f8      	movs	r1, #248	@ 0xf8
 80037d4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80037dc:	fa91 f1a1 	rbit	r1, r1
 80037e0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80037e4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80037e8:	fab1 f181 	clz	r1, r1
 80037ec:	b2c9      	uxtb	r1, r1
 80037ee:	408b      	lsls	r3, r1
 80037f0:	4991      	ldr	r1, [pc, #580]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	e0f1      	b.n	80039dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8083 	beq.w	8003910 <HAL_RCC_OscConfig+0x538>
 800380a:	2301      	movs	r3, #1
 800380c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800381c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800382a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	461a      	mov	r2, r3
 8003832:	2301      	movs	r3, #1
 8003834:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fc11 	bl	800205c <HAL_GetTick>
 800383a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003840:	f7fe fc0c 	bl	800205c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d902      	bls.n	8003856 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	f000 bdc8 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
 8003856:	2302      	movs	r3, #2
 8003858:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003868:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b3f      	cmp	r3, #63	@ 0x3f
 8003874:	d802      	bhi.n	800387c <HAL_RCC_OscConfig+0x4a4>
 8003876:	4b70      	ldr	r3, [pc, #448]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x4cc>
 800387c:	2302      	movs	r3, #2
 800387e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800388e:	2302      	movs	r3, #2
 8003890:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003894:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80038a0:	4b65      	ldr	r3, [pc, #404]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	2202      	movs	r2, #2
 80038a6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80038aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80038ae:	fa92 f2a2 	rbit	r2, r2
 80038b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80038b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0220 	orr.w	r2, r2, #32
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0b4      	beq.n	8003840 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b58      	ldr	r3, [pc, #352]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	21f8      	movs	r1, #248	@ 0xf8
 80038ec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80038f4:	fa91 f1a1 	rbit	r1, r1
 80038f8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80038fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003900:	fab1 f181 	clz	r1, r1
 8003904:	b2c9      	uxtb	r1, r1
 8003906:	408b      	lsls	r3, r1
 8003908:	494b      	ldr	r1, [pc, #300]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
 800390e:	e065      	b.n	80039dc <HAL_RCC_OscConfig+0x604>
 8003910:	2301      	movs	r3, #1
 8003912:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003922:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003930:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	461a      	mov	r2, r3
 8003938:	2300      	movs	r3, #0
 800393a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fb8e 	bl	800205c <HAL_GetTick>
 8003940:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003946:	f7fe fb89 	bl	800205c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	f000 bd45 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
 800395c:	2302      	movs	r3, #2
 800395e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800396e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b3f      	cmp	r3, #63	@ 0x3f
 800397a:	d802      	bhi.n	8003982 <HAL_RCC_OscConfig+0x5aa>
 800397c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	e013      	b.n	80039aa <HAL_RCC_OscConfig+0x5d2>
 8003982:	2302      	movs	r3, #2
 8003984:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003994:	2302      	movs	r3, #2
 8003996:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800399a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80039a6:	4b24      	ldr	r3, [pc, #144]	@ (8003a38 <HAL_RCC_OscConfig+0x660>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	2202      	movs	r2, #2
 80039ac:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80039b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80039b4:	fa92 f2a2 	rbit	r2, r2
 80039b8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80039bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1b4      	bne.n	8003946 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8115 	beq.w	8003c1c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d07e      	beq.n	8003b00 <HAL_RCC_OscConfig+0x728>
 8003a02:	2301      	movs	r3, #1
 8003a04:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_OscConfig+0x664>)
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	461a      	mov	r2, r3
 8003a28:	2301      	movs	r3, #1
 8003a2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fb16 	bl	800205c <HAL_GetTick>
 8003a30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a34:	e00f      	b.n	8003a56 <HAL_RCC_OscConfig+0x67e>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe fb0c 	bl	800205c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d902      	bls.n	8003a56 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	f000 bcc8 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003a70:	2202      	movs	r2, #2
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a94:	2202      	movs	r2, #2
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fa93 f2a3 	rbit	r2, r3
 8003aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003aae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab0:	4bb0      	ldr	r3, [pc, #704]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003abc:	2102      	movs	r1, #2
 8003abe:	6019      	str	r1, [r3, #0]
 8003ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	fa93 f1a3 	rbit	r1, r3
 8003ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ad6:	6019      	str	r1, [r3, #0]
  return result;
 8003ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003adc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0a0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x668>
 8003afe:	e08d      	b.n	8003c1c <HAL_RCC_OscConfig+0x844>
 8003b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003b22:	601a      	str	r2, [r3, #0]
  return result;
 8003b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b28:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003b2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b90      	ldr	r3, [pc, #576]	@ (8003d78 <HAL_RCC_OscConfig+0x9a0>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fa8b 	bl	800205c <HAL_GetTick>
 8003b46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fe fa86 	bl	800205c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d902      	bls.n	8003b62 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	f000 bc42 	b.w	80043e6 <HAL_RCC_OscConfig+0x100e>
 8003b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	fa93 f2a3 	rbit	r2, r3
 8003b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003b8e:	2202      	movs	r2, #2
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f2a3 	rbit	r2, r3
 8003bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003bcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bce:	4b69      	ldr	r3, [pc, #420]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003bda:	2102      	movs	r1, #2
 8003bdc:	6019      	str	r1, [r3, #0]
 8003bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f1a3 	rbit	r1, r3
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003bf4:	6019      	str	r1, [r3, #0]
  return result;
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d197      	bne.n	8003b4c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 819e 	beq.w	8003f6e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c38:	4b4e      	ldr	r3, [pc, #312]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b4b      	ldr	r3, [pc, #300]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4a4a      	ldr	r2, [pc, #296]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	61d3      	str	r3, [r2, #28]
 8003c50:	4b48      	ldr	r3, [pc, #288]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003c6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b42      	ldr	r3, [pc, #264]	@ (8003d7c <HAL_RCC_OscConfig+0x9a4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <HAL_RCC_OscConfig+0x9a4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3e      	ldr	r2, [pc, #248]	@ (8003d7c <HAL_RCC_OscConfig+0x9a4>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe f9e7 	bl	800205c <HAL_GetTick>
 8003c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	e009      	b.n	8003ca8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fe f9e2 	bl	800205c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	@ 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e39e      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x9a4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x8fa>
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6213      	str	r3, [r2, #32]
 8003cd0:	e035      	b.n	8003d3e <HAL_RCC_OscConfig+0x966>
 8003cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x924>
 8003ce2:	4b24      	ldr	r3, [pc, #144]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	4b21      	ldr	r3, [pc, #132]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	6213      	str	r3, [r2, #32]
 8003cfa:	e020      	b.n	8003d3e <HAL_RCC_OscConfig+0x966>
 8003cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d10c      	bne.n	8003d26 <HAL_RCC_OscConfig+0x94e>
 8003d0c:	4b19      	ldr	r3, [pc, #100]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	4b16      	ldr	r3, [pc, #88]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6213      	str	r3, [r2, #32]
 8003d24:	e00b      	b.n	8003d3e <HAL_RCC_OscConfig+0x966>
 8003d26:	4b13      	ldr	r3, [pc, #76]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	4a12      	ldr	r2, [pc, #72]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6213      	str	r3, [r2, #32]
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4a0f      	ldr	r2, [pc, #60]	@ (8003d74 <HAL_RCC_OscConfig+0x99c>)
 8003d38:	f023 0304 	bic.w	r3, r3, #4
 8003d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8087 	beq.w	8003e5e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d50:	f7fe f984 	bl	800205c <HAL_GetTick>
 8003d54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	e012      	b.n	8003d80 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe f97f 	bl	800205c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d908      	bls.n	8003d80 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e339      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000
 8003d78:	10908120 	.word	0x10908120
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d88:	2202      	movs	r2, #2
 8003d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	fa93 f2a3 	rbit	r2, r3
 8003d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003dac:	2202      	movs	r2, #2
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003dc6:	601a      	str	r2, [r3, #0]
  return result;
 8003dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dcc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003dd0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_RCC_OscConfig+0xa10>
 8003de2:	4b98      	ldr	r3, [pc, #608]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	e013      	b.n	8003e10 <HAL_RCC_OscConfig+0xa38>
 8003de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003df0:	2202      	movs	r2, #2
 8003df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	fa93 f2a3 	rbit	r2, r3
 8003e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e06:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e14:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003e18:	2102      	movs	r1, #2
 8003e1a:	6011      	str	r1, [r2, #0]
 8003e1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e20:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	fa92 f1a2 	rbit	r1, r2
 8003e2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e2e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003e32:	6011      	str	r1, [r2, #0]
  return result;
 8003e34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e38:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	fab2 f282 	clz	r2, r2
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f002 021f 	and.w	r2, r2, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f202 	lsl.w	r2, r1, r2
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f43f af7f 	beq.w	8003d5a <HAL_RCC_OscConfig+0x982>
 8003e5c:	e07d      	b.n	8003f5a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f8fd 	bl	800205c <HAL_GetTick>
 8003e62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fe f8f8 	bl	800205c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2b2      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
 8003e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e84:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003e88:	2202      	movs	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e90:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fa93 f2a3 	rbit	r2, r3
 8003ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ec6:	601a      	str	r2, [r3, #0]
  return result;
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ed0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xb10>
 8003ee2:	4b58      	ldr	r3, [pc, #352]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	e013      	b.n	8003f10 <HAL_RCC_OscConfig+0xb38>
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f06:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f14:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003f18:	2102      	movs	r1, #2
 8003f1a:	6011      	str	r1, [r2, #0]
 8003f1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f20:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	fa92 f1a2 	rbit	r1, r2
 8003f2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f2e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003f32:	6011      	str	r1, [r2, #0]
  return result;
 8003f34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	fab2 f282 	clz	r2, r2
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	f002 021f 	and.w	r2, r2, #31
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f202 	lsl.w	r2, r1, r2
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d186      	bne.n	8003e68 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f5a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b38      	ldr	r3, [pc, #224]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4a37      	ldr	r2, [pc, #220]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8232 	beq.w	80043e4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f80:	4b30      	ldr	r3, [pc, #192]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f000 8201 	beq.w	8004390 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	f040 8157 	bne.w	800424e <HAL_RCC_OscConfig+0xe76>
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003fa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fa93 f2a3 	rbit	r2, r3
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003fc4:	601a      	str	r2, [r3, #0]
  return result;
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003fce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f839 	bl	800205c <HAL_GetTick>
 8003fea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fee:	e009      	b.n	8004004 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe f834 	bl	800205c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1f0      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800400c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004016:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004028:	601a      	str	r2, [r3, #0]
  return result;
 800402a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b3f      	cmp	r3, #63	@ 0x3f
 800403c:	d804      	bhi.n	8004048 <HAL_RCC_OscConfig+0xc70>
 800403e:	4b01      	ldr	r3, [pc, #4]	@ (8004044 <HAL_RCC_OscConfig+0xc6c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	e029      	b.n	8004098 <HAL_RCC_OscConfig+0xcc0>
 8004044:	40021000 	.word	0x40021000
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004050:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f2a3 	rbit	r2, r3
 8004064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004068:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004072:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004076:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004080:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	4bc3      	ldr	r3, [pc, #780]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800409c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80040a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040aa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	fa92 f1a2 	rbit	r1, r2
 80040b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80040bc:	6011      	str	r1, [r2, #0]
  return result;
 80040be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	fab2 f282 	clz	r2, r2
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f042 0220 	orr.w	r2, r2, #32
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f002 021f 	and.w	r2, r2, #31
 80040d8:	2101      	movs	r1, #1
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d185      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e4:	4baf      	ldr	r3, [pc, #700]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80040ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80040f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	430b      	orrs	r3, r1
 8004106:	49a7      	ldr	r1, [pc, #668]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
 800410c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004110:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004114:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	fa93 f2a3 	rbit	r2, r3
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004130:	601a      	str	r2, [r3, #0]
  return result;
 8004132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004136:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800413a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004146:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	461a      	mov	r2, r3
 800414e:	2301      	movs	r3, #1
 8004150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fd ff83 	bl	800205c <HAL_GetTick>
 8004156:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800415a:	e009      	b.n	8004170 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd ff7e 	bl	800205c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e13a      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004178:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800417c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004182:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004190:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004194:	601a      	str	r2, [r3, #0]
  return result;
 8004196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800419e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80041a8:	d802      	bhi.n	80041b0 <HAL_RCC_OscConfig+0xdd8>
 80041aa:	4b7e      	ldr	r3, [pc, #504]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	e027      	b.n	8004200 <HAL_RCC_OscConfig+0xe28>
 80041b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80041b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	fa93 f2a3 	rbit	r2, r3
 80041cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041da:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80041de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	fa93 f2a3 	rbit	r2, r3
 80041f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	4b69      	ldr	r3, [pc, #420]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004204:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004208:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004212:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	fa92 f1a2 	rbit	r1, r2
 800421c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004220:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004224:	6011      	str	r1, [r2, #0]
  return result;
 8004226:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800422a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f042 0220 	orr.w	r2, r2, #32
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	f002 021f 	and.w	r2, r2, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f202 	lsl.w	r2, r1, r2
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d087      	beq.n	800415c <HAL_RCC_OscConfig+0xd84>
 800424c:	e0ca      	b.n	80043e4 <HAL_RCC_OscConfig+0x100c>
 800424e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004252:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004256:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800425a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004260:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004272:	601a      	str	r2, [r3, #0]
  return result;
 8004274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004278:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800427c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004288:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fd fee2 	bl	800205c <HAL_GetTick>
 8004298:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429c:	e009      	b.n	80042b2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429e:	f7fd fedd 	bl	800205c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e099      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80042ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f2a3 	rbit	r2, r3
 80042ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80042d6:	601a      	str	r2, [r3, #0]
  return result;
 80042d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042dc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80042e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80042ea:	d802      	bhi.n	80042f2 <HAL_RCC_OscConfig+0xf1a>
 80042ec:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	e027      	b.n	8004342 <HAL_RCC_OscConfig+0xf6a>
 80042f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80042fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004304:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004312:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004320:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	fa93 f2a3 	rbit	r2, r3
 8004334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004338:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	4b19      	ldr	r3, [pc, #100]	@ (80043a4 <HAL_RCC_OscConfig+0xfcc>)
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004346:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800434a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800434e:	6011      	str	r1, [r2, #0]
 8004350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004354:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	fa92 f1a2 	rbit	r1, r2
 800435e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004362:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004366:	6011      	str	r1, [r2, #0]
  return result;
 8004368:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800436c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	fab2 f282 	clz	r2, r2
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f042 0220 	orr.w	r2, r2, #32
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f002 021f 	and.w	r2, r2, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d187      	bne.n	800429e <HAL_RCC_OscConfig+0xec6>
 800438e:	e029      	b.n	80043e4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d103      	bne.n	80043a8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e020      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
 80043a4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a8:	4b11      	ldr	r3, [pc, #68]	@ (80043f0 <HAL_RCC_OscConfig+0x1018>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80043b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80043cc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000

080043f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b09e      	sub	sp, #120	@ 0x78
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e154      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b89      	ldr	r3, [pc, #548]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d910      	bls.n	800443c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b86      	ldr	r3, [pc, #536]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 0207 	bic.w	r2, r3, #7
 8004422:	4984      	ldr	r1, [pc, #528]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b82      	ldr	r3, [pc, #520]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e13c      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b7b      	ldr	r3, [pc, #492]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4978      	ldr	r1, [pc, #480]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80cd 	beq.w	8004602 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d137      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xec>
 8004470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004474:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800447e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004480:	fab3 f383 	clz	r3, r3
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b3f      	cmp	r3, #63	@ 0x3f
 8004488:	d802      	bhi.n	8004490 <HAL_RCC_ClockConfig+0x9c>
 800448a:	4b6b      	ldr	r3, [pc, #428]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	e00f      	b.n	80044b0 <HAL_RCC_ClockConfig+0xbc>
 8004490:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	667b      	str	r3, [r7, #100]	@ 0x64
 800449e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80044a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ac:	4b62      	ldr	r3, [pc, #392]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044b8:	fa92 f2a2 	rbit	r2, r2
 80044bc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80044be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	f042 0220 	orr.w	r2, r2, #32
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	f002 021f 	and.w	r2, r2, #31
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f202 	lsl.w	r2, r1, r2
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d171      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0ea      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d137      	bne.n	8004558 <HAL_RCC_ClockConfig+0x164>
 80044e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80044f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8004500:	d802      	bhi.n	8004508 <HAL_RCC_ClockConfig+0x114>
 8004502:	4b4d      	ldr	r3, [pc, #308]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	e00f      	b.n	8004528 <HAL_RCC_ClockConfig+0x134>
 8004508:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800450c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800451a:	643b      	str	r3, [r7, #64]	@ 0x40
 800451c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004524:	4b44      	ldr	r3, [pc, #272]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800452c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800452e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004530:	fa92 f2a2 	rbit	r2, r2
 8004534:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004536:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004538:	fab2 f282 	clz	r2, r2
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	f042 0220 	orr.w	r2, r2, #32
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	f002 021f 	and.w	r2, r2, #31
 8004548:	2101      	movs	r1, #1
 800454a:	fa01 f202 	lsl.w	r2, r1, r2
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d135      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0ae      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
 8004558:	2302      	movs	r3, #2
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b3f      	cmp	r3, #63	@ 0x3f
 800456e:	d802      	bhi.n	8004576 <HAL_RCC_ClockConfig+0x182>
 8004570:	4b31      	ldr	r3, [pc, #196]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	e00d      	b.n	8004592 <HAL_RCC_ClockConfig+0x19e>
 8004576:	2302      	movs	r3, #2
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
 8004582:	2302      	movs	r3, #2
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	2202      	movs	r2, #2
 8004594:	61ba      	str	r2, [r7, #24]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	fa92 f2a2 	rbit	r2, r2
 800459c:	617a      	str	r2, [r7, #20]
  return result;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	fab2 f282 	clz	r2, r2
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	f042 0220 	orr.w	r2, r2, #32
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	f002 021f 	and.w	r2, r2, #31
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f202 	lsl.w	r2, r1, r2
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e07a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 0203 	bic.w	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	491a      	ldr	r1, [pc, #104]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d2:	f7fd fd43 	bl	800205c <HAL_GetTick>
 80045d6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045da:	f7fd fd3f 	bl	800205c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e062      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f0:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 020c 	and.w	r2, r3, #12
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	429a      	cmp	r2, r3
 8004600:	d1eb      	bne.n	80045da <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004602:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d215      	bcs.n	800463c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 0207 	bic.w	r2, r3, #7
 8004618:	4906      	ldr	r1, [pc, #24]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004620:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <HAL_RCC_ClockConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d006      	beq.n	800463c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e041      	b.n	80046b6 <HAL_RCC_ClockConfig+0x2c2>
 8004632:	bf00      	nop
 8004634:	40022000 	.word	0x40022000
 8004638:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004648:	4b1d      	ldr	r3, [pc, #116]	@ (80046c0 <HAL_RCC_ClockConfig+0x2cc>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	491a      	ldr	r1, [pc, #104]	@ (80046c0 <HAL_RCC_ClockConfig+0x2cc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004666:	4b16      	ldr	r3, [pc, #88]	@ (80046c0 <HAL_RCC_ClockConfig+0x2cc>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4912      	ldr	r1, [pc, #72]	@ (80046c0 <HAL_RCC_ClockConfig+0x2cc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800467a:	f000 f829 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800467e:	4601      	mov	r1, r0
 8004680:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <HAL_RCC_ClockConfig+0x2cc>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004688:	22f0      	movs	r2, #240	@ 0xf0
 800468a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	fa92 f2a2 	rbit	r2, r2
 8004692:	60fa      	str	r2, [r7, #12]
  return result;
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	fab2 f282 	clz	r2, r2
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	40d3      	lsrs	r3, r2
 800469e:	4a09      	ldr	r2, [pc, #36]	@ (80046c4 <HAL_RCC_ClockConfig+0x2d0>)
 80046a0:	5cd3      	ldrb	r3, [r2, r3]
 80046a2:	fa21 f303 	lsr.w	r3, r1, r3
 80046a6:	4a08      	ldr	r2, [pc, #32]	@ (80046c8 <HAL_RCC_ClockConfig+0x2d4>)
 80046a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046aa:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <HAL_RCC_ClockConfig+0x2d8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd fc90 	bl	8001fd4 <HAL_InitTick>
  
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3778      	adds	r7, #120	@ 0x78
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08007d1c 	.word	0x08007d1c
 80046c8:	20000010 	.word	0x20000010
 80046cc:	20000014 	.word	0x20000014

080046d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80046ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x94>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x30>
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x36>
 80046fe:	e026      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004700:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004702:	613b      	str	r3, [r7, #16]
      break;
 8004704:	e026      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0c9b      	lsrs	r3, r3, #18
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	4a17      	ldr	r2, [pc, #92]	@ (800476c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
 8004712:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004714:	4b13      	ldr	r3, [pc, #76]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x94>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	4a14      	ldr	r2, [pc, #80]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xa0>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800472c:	4a0e      	ldr	r2, [pc, #56]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	fbb2 f2f3 	udiv	r2, r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e004      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a0c      	ldr	r2, [pc, #48]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	613b      	str	r3, [r7, #16]
      break;
 800474c:	e002      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800474e:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004750:	613b      	str	r3, [r7, #16]
      break;
 8004752:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004754:	693b      	ldr	r3, [r7, #16]
}
 8004756:	4618      	mov	r0, r3
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	007a1200 	.word	0x007a1200
 800476c:	08007d34 	.word	0x08007d34
 8004770:	08007d44 	.word	0x08007d44
 8004774:	003d0900 	.word	0x003d0900

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b03      	ldr	r3, [pc, #12]	@ (800478c <HAL_RCC_GetHCLKFreq+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000010 	.word	0x20000010

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004796:	f7ff ffef 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 800479a:	4601      	mov	r1, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047a4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80047a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	fa92 f2a2 	rbit	r2, r2
 80047b0:	603a      	str	r2, [r7, #0]
  return result;
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	fab2 f282 	clz	r2, r2
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	40d3      	lsrs	r3, r2
 80047bc:	4a04      	ldr	r2, [pc, #16]	@ (80047d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	08007d2c 	.word	0x08007d2c

080047d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047da:	f7ff ffcd 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047de:	4601      	mov	r1, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80047e8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80047ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	fa92 f2a2 	rbit	r2, r2
 80047f4:	603a      	str	r2, [r7, #0]
  return result;
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	40d3      	lsrs	r3, r2
 8004800:	4a04      	ldr	r2, [pc, #16]	@ (8004814 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	08007d2c 	.word	0x08007d2c

08004818 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b092      	sub	sp, #72	@ 0x48
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80cb 	beq.w	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483c:	4b85      	ldr	r3, [pc, #532]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10e      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4b82      	ldr	r3, [pc, #520]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4a81      	ldr	r2, [pc, #516]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004852:	61d3      	str	r3, [r2, #28]
 8004854:	4b7f      	ldr	r3, [pc, #508]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b7c      	ldr	r3, [pc, #496]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d118      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b79      	ldr	r3, [pc, #484]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a78      	ldr	r2, [pc, #480]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487e:	f7fd fbed 	bl	800205c <HAL_GetTick>
 8004882:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	e008      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fd fbe9 	bl	800205c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	@ 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0d9      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b6f      	ldr	r3, [pc, #444]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d07b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x194>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048be:	429a      	cmp	r2, r3
 80048c0:	d074      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048c2:	4b64      	ldr	r3, [pc, #400]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048d0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b5d      	ldr	r3, [pc, #372]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	461a      	mov	r2, r3
 80048ec:	2301      	movs	r3, #1
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80048fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	4b54      	ldr	r3, [pc, #336]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	461a      	mov	r2, r3
 8004910:	2300      	movs	r3, #0
 8004912:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004914:	4a4f      	ldr	r2, [pc, #316]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004918:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800491a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d043      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd fb9a 	bl	800205c <HAL_GetTick>
 8004928:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd fb96 	bl	800205c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e084      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004942:	2302      	movs	r3, #2
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	2302      	movs	r3, #2
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	61fb      	str	r3, [r7, #28]
  return result;
 800495a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800496c:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	e007      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004972:	2302      	movs	r3, #2
 8004974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	4b35      	ldr	r3, [pc, #212]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	2202      	movs	r2, #2
 8004984:	613a      	str	r2, [r7, #16]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	fa92 f2a2 	rbit	r2, r2
 800498c:	60fa      	str	r2, [r7, #12]
  return result;
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	fab2 f282 	clz	r2, r2
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f002 021f 	and.w	r2, r2, #31
 80049a0:	2101      	movs	r1, #1
 80049a2:	fa01 f202 	lsl.w	r2, r1, r2
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0bf      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049ac:	4b29      	ldr	r3, [pc, #164]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4926      	ldr	r1, [pc, #152]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d105      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c6:	4b23      	ldr	r3, [pc, #140]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	491a      	ldr	r1, [pc, #104]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049fc:	4b15      	ldr	r3, [pc, #84]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	f023 0210 	bic.w	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4912      	ldr	r1, [pc, #72]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	490b      	ldr	r1, [pc, #44]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a38:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	4903      	ldr	r1, [pc, #12]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3748      	adds	r7, #72	@ 0x48
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	10908100 	.word	0x10908100

08004a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e040      	b.n	8004af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fd f91a 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	@ 0x24
 8004a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9e8 	bl	8004e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8af 	bl	8004c10 <UART_SetConfig>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e01b      	b.n	8004af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa67 	bl	8004fc0 <UART_CheckIdleState>
 8004af2:	4603      	mov	r3, r0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	@ 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d177      	bne.n	8004c04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Transmit+0x24>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e070      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2221      	movs	r2, #33	@ 0x21
 8004b30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b32:	f7fd fa93 	bl	800205c <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b50:	d108      	bne.n	8004b64 <HAL_UART_Transmit+0x68>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e003      	b.n	8004b6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b6c:	e02f      	b.n	8004bce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2180      	movs	r1, #128	@ 0x80
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fac9 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e03b      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	881a      	ldrh	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e007      	b.n	8004bbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1c9      	bne.n	8004b6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2140      	movs	r1, #64	@ 0x40
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa93 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e005      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8a      	ldr	r3, [pc, #552]	@ (8004e64 <UART_SetConfig+0x254>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a78      	ldr	r2, [pc, #480]	@ (8004e68 <UART_SetConfig+0x258>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d120      	bne.n	8004cce <UART_SetConfig+0xbe>
 8004c8c:	4b77      	ldr	r3, [pc, #476]	@ (8004e6c <UART_SetConfig+0x25c>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d817      	bhi.n	8004cc8 <UART_SetConfig+0xb8>
 8004c98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x90>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cbd 	.word	0x08004cbd
 8004ca8:	08004cc3 	.word	0x08004cc3
 8004cac:	08004cb7 	.word	0x08004cb7
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e01d      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e01a      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e017      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e014      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e011      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a67      	ldr	r2, [pc, #412]	@ (8004e70 <UART_SetConfig+0x260>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d102      	bne.n	8004cde <UART_SetConfig+0xce>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e009      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a64      	ldr	r2, [pc, #400]	@ (8004e74 <UART_SetConfig+0x264>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d102      	bne.n	8004cee <UART_SetConfig+0xde>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e001      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cee:	2310      	movs	r3, #16
 8004cf0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cfa:	d15a      	bne.n	8004db2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d827      	bhi.n	8004d52 <UART_SetConfig+0x142>
 8004d02:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <UART_SetConfig+0xf8>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	08004d53 	.word	0x08004d53
 8004d18:	08004d43 	.word	0x08004d43
 8004d1c:	08004d53 	.word	0x08004d53
 8004d20:	08004d53 	.word	0x08004d53
 8004d24:	08004d53 	.word	0x08004d53
 8004d28:	08004d4b 	.word	0x08004d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7ff fd30 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8004d30:	61b8      	str	r0, [r7, #24]
        break;
 8004d32:	e013      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7ff fd4e 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 8004d38:	61b8      	str	r0, [r7, #24]
        break;
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004e78 <UART_SetConfig+0x268>)
 8004d3e:	61bb      	str	r3, [r7, #24]
        break;
 8004d40:	e00c      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d42:	f7ff fcc5 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 8004d46:	61b8      	str	r0, [r7, #24]
        break;
 8004d48:	e008      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4e:	61bb      	str	r3, [r7, #24]
        break;
 8004d50:	e004      	b.n	8004d5c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77bb      	strb	r3, [r7, #30]
        break;
 8004d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d074      	beq.n	8004e4c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	005a      	lsls	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b0f      	cmp	r3, #15
 8004d7c:	d916      	bls.n	8004dac <UART_SetConfig+0x19c>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d212      	bcs.n	8004dac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f023 030f 	bic.w	r3, r3, #15
 8004d8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	89fa      	ldrh	r2, [r7, #14]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e04f      	b.n	8004e4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77bb      	strb	r3, [r7, #30]
 8004db0:	e04c      	b.n	8004e4c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d828      	bhi.n	8004e0a <UART_SetConfig+0x1fa>
 8004db8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0x1b0>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7ff fcd4 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8004de8:	61b8      	str	r0, [r7, #24]
        break;
 8004dea:	e013      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7ff fcf2 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 8004df0:	61b8      	str	r0, [r7, #24]
        break;
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b20      	ldr	r3, [pc, #128]	@ (8004e78 <UART_SetConfig+0x268>)
 8004df6:	61bb      	str	r3, [r7, #24]
        break;
 8004df8:	e00c      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7ff fc69 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 8004dfe:	61b8      	str	r0, [r7, #24]
        break;
 8004e00:	e008      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e004      	b.n	8004e14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	77bb      	strb	r3, [r7, #30]
        break;
 8004e12:	bf00      	nop
    }

    if (pclk != 0U)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d018      	beq.n	8004e4c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	085a      	lsrs	r2, r3, #1
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	441a      	add	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b0f      	cmp	r3, #15
 8004e32:	d909      	bls.n	8004e48 <UART_SetConfig+0x238>
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3a:	d205      	bcs.n	8004e48 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	e001      	b.n	8004e4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	efff69f3 	.word	0xefff69f3
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7a:	d10a      	bne.n	8004f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b098      	sub	sp, #96	@ 0x60
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd0:	f7fd f844 	bl	800205c <HAL_GetTick>
 8004fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d12e      	bne.n	8005042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88c 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d021      	beq.n	8005042 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800500c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005012:	653b      	str	r3, [r7, #80]	@ 0x50
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800501c:	647b      	str	r3, [r7, #68]	@ 0x44
 800501e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800502a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e6      	bne.n	8004ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e062      	b.n	8005108 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d149      	bne.n	80050e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f856 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03c      	beq.n	80050e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	623b      	str	r3, [r7, #32]
   return(result);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005088:	633b      	str	r3, [r7, #48]	@ 0x30
 800508a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800508e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e5      	bne.n	800509c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e011      	b.n	8005108 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3758      	adds	r7, #88	@ 0x58
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	e04f      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d04b      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fc ff97 	bl	800205c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <UART_WaitOnFlagUntilTimeout+0x30>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e04e      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d037      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b80      	cmp	r3, #128	@ 0x80
 8005156:	d034      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d031      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d110      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2208      	movs	r2, #8
 8005172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f838 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2208      	movs	r2, #8
 800517e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e029      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800519c:	d111      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f81e 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00f      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d0a0      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b095      	sub	sp, #84	@ 0x54
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
 8005212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800524a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	2b01      	cmp	r3, #1
 800525e:	d118      	bne.n	8005292 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	60bb      	str	r3, [r7, #8]
   return(result);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	647b      	str	r3, [r7, #68]	@ 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	613b      	str	r3, [r7, #16]
   return(result);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052a6:	bf00      	nop
 80052a8:	3754      	adds	r7, #84	@ 0x54
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <__cvt>:
 80052b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b6:	ec57 6b10 	vmov	r6, r7, d0
 80052ba:	2f00      	cmp	r7, #0
 80052bc:	460c      	mov	r4, r1
 80052be:	4619      	mov	r1, r3
 80052c0:	463b      	mov	r3, r7
 80052c2:	bfbb      	ittet	lt
 80052c4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052c8:	461f      	movlt	r7, r3
 80052ca:	2300      	movge	r3, #0
 80052cc:	232d      	movlt	r3, #45	@ 0x2d
 80052ce:	700b      	strb	r3, [r1, #0]
 80052d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052d2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052d6:	4691      	mov	r9, r2
 80052d8:	f023 0820 	bic.w	r8, r3, #32
 80052dc:	bfbc      	itt	lt
 80052de:	4632      	movlt	r2, r6
 80052e0:	4616      	movlt	r6, r2
 80052e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052e6:	d005      	beq.n	80052f4 <__cvt+0x42>
 80052e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052ec:	d100      	bne.n	80052f0 <__cvt+0x3e>
 80052ee:	3401      	adds	r4, #1
 80052f0:	2102      	movs	r1, #2
 80052f2:	e000      	b.n	80052f6 <__cvt+0x44>
 80052f4:	2103      	movs	r1, #3
 80052f6:	ab03      	add	r3, sp, #12
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	ab02      	add	r3, sp, #8
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	ec47 6b10 	vmov	d0, r6, r7
 8005302:	4653      	mov	r3, sl
 8005304:	4622      	mov	r2, r4
 8005306:	f000 ff3b 	bl	8006180 <_dtoa_r>
 800530a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800530e:	4605      	mov	r5, r0
 8005310:	d119      	bne.n	8005346 <__cvt+0x94>
 8005312:	f019 0f01 	tst.w	r9, #1
 8005316:	d00e      	beq.n	8005336 <__cvt+0x84>
 8005318:	eb00 0904 	add.w	r9, r0, r4
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005328:	b108      	cbz	r0, 800532e <__cvt+0x7c>
 800532a:	f8cd 900c 	str.w	r9, [sp, #12]
 800532e:	2230      	movs	r2, #48	@ 0x30
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	454b      	cmp	r3, r9
 8005334:	d31e      	bcc.n	8005374 <__cvt+0xc2>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800533a:	1b5b      	subs	r3, r3, r5
 800533c:	4628      	mov	r0, r5
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	b004      	add	sp, #16
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800534a:	eb00 0904 	add.w	r9, r0, r4
 800534e:	d1e5      	bne.n	800531c <__cvt+0x6a>
 8005350:	7803      	ldrb	r3, [r0, #0]
 8005352:	2b30      	cmp	r3, #48	@ 0x30
 8005354:	d10a      	bne.n	800536c <__cvt+0xba>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4630      	mov	r0, r6
 800535c:	4639      	mov	r1, r7
 800535e:	f7fb fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005362:	b918      	cbnz	r0, 800536c <__cvt+0xba>
 8005364:	f1c4 0401 	rsb	r4, r4, #1
 8005368:	f8ca 4000 	str.w	r4, [sl]
 800536c:	f8da 3000 	ldr.w	r3, [sl]
 8005370:	4499      	add	r9, r3
 8005372:	e7d3      	b.n	800531c <__cvt+0x6a>
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	9103      	str	r1, [sp, #12]
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e7d9      	b.n	8005330 <__cvt+0x7e>

0800537c <__exponent>:
 800537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800537e:	2900      	cmp	r1, #0
 8005380:	bfba      	itte	lt
 8005382:	4249      	neglt	r1, r1
 8005384:	232d      	movlt	r3, #45	@ 0x2d
 8005386:	232b      	movge	r3, #43	@ 0x2b
 8005388:	2909      	cmp	r1, #9
 800538a:	7002      	strb	r2, [r0, #0]
 800538c:	7043      	strb	r3, [r0, #1]
 800538e:	dd29      	ble.n	80053e4 <__exponent+0x68>
 8005390:	f10d 0307 	add.w	r3, sp, #7
 8005394:	461d      	mov	r5, r3
 8005396:	270a      	movs	r7, #10
 8005398:	461a      	mov	r2, r3
 800539a:	fbb1 f6f7 	udiv	r6, r1, r7
 800539e:	fb07 1416 	mls	r4, r7, r6, r1
 80053a2:	3430      	adds	r4, #48	@ 0x30
 80053a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053a8:	460c      	mov	r4, r1
 80053aa:	2c63      	cmp	r4, #99	@ 0x63
 80053ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80053b0:	4631      	mov	r1, r6
 80053b2:	dcf1      	bgt.n	8005398 <__exponent+0x1c>
 80053b4:	3130      	adds	r1, #48	@ 0x30
 80053b6:	1e94      	subs	r4, r2, #2
 80053b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053bc:	1c41      	adds	r1, r0, #1
 80053be:	4623      	mov	r3, r4
 80053c0:	42ab      	cmp	r3, r5
 80053c2:	d30a      	bcc.n	80053da <__exponent+0x5e>
 80053c4:	f10d 0309 	add.w	r3, sp, #9
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	42ac      	cmp	r4, r5
 80053cc:	bf88      	it	hi
 80053ce:	2300      	movhi	r3, #0
 80053d0:	3302      	adds	r3, #2
 80053d2:	4403      	add	r3, r0
 80053d4:	1a18      	subs	r0, r3, r0
 80053d6:	b003      	add	sp, #12
 80053d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053e2:	e7ed      	b.n	80053c0 <__exponent+0x44>
 80053e4:	2330      	movs	r3, #48	@ 0x30
 80053e6:	3130      	adds	r1, #48	@ 0x30
 80053e8:	7083      	strb	r3, [r0, #2]
 80053ea:	70c1      	strb	r1, [r0, #3]
 80053ec:	1d03      	adds	r3, r0, #4
 80053ee:	e7f1      	b.n	80053d4 <__exponent+0x58>

080053f0 <_printf_float>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	b08d      	sub	sp, #52	@ 0x34
 80053f6:	460c      	mov	r4, r1
 80053f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053fc:	4616      	mov	r6, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	4605      	mov	r5, r0
 8005402:	f000 fdbd 	bl	8005f80 <_localeconv_r>
 8005406:	6803      	ldr	r3, [r0, #0]
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fa ff30 	bl	8000270 <strlen>
 8005410:	2300      	movs	r3, #0
 8005412:	930a      	str	r3, [sp, #40]	@ 0x28
 8005414:	f8d8 3000 	ldr.w	r3, [r8]
 8005418:	9005      	str	r0, [sp, #20]
 800541a:	3307      	adds	r3, #7
 800541c:	f023 0307 	bic.w	r3, r3, #7
 8005420:	f103 0208 	add.w	r2, r3, #8
 8005424:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005428:	f8d4 b000 	ldr.w	fp, [r4]
 800542c:	f8c8 2000 	str.w	r2, [r8]
 8005430:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005434:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005438:	9307      	str	r3, [sp, #28]
 800543a:	f8cd 8018 	str.w	r8, [sp, #24]
 800543e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005446:	4b9c      	ldr	r3, [pc, #624]	@ (80056b8 <_printf_float+0x2c8>)
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	f7fb fb6e 	bl	8000b2c <__aeabi_dcmpun>
 8005450:	bb70      	cbnz	r0, 80054b0 <_printf_float+0xc0>
 8005452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005456:	4b98      	ldr	r3, [pc, #608]	@ (80056b8 <_printf_float+0x2c8>)
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	f7fb fb48 	bl	8000af0 <__aeabi_dcmple>
 8005460:	bb30      	cbnz	r0, 80054b0 <_printf_float+0xc0>
 8005462:	2200      	movs	r2, #0
 8005464:	2300      	movs	r3, #0
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f7fb fb37 	bl	8000adc <__aeabi_dcmplt>
 800546e:	b110      	cbz	r0, 8005476 <_printf_float+0x86>
 8005470:	232d      	movs	r3, #45	@ 0x2d
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005476:	4a91      	ldr	r2, [pc, #580]	@ (80056bc <_printf_float+0x2cc>)
 8005478:	4b91      	ldr	r3, [pc, #580]	@ (80056c0 <_printf_float+0x2d0>)
 800547a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800547e:	bf8c      	ite	hi
 8005480:	4690      	movhi	r8, r2
 8005482:	4698      	movls	r8, r3
 8005484:	2303      	movs	r3, #3
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	f02b 0304 	bic.w	r3, fp, #4
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	9700      	str	r7, [sp, #0]
 8005494:	4633      	mov	r3, r6
 8005496:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005498:	4621      	mov	r1, r4
 800549a:	4628      	mov	r0, r5
 800549c:	f000 f9d2 	bl	8005844 <_printf_common>
 80054a0:	3001      	adds	r0, #1
 80054a2:	f040 808d 	bne.w	80055c0 <_printf_float+0x1d0>
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	b00d      	add	sp, #52	@ 0x34
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	4640      	mov	r0, r8
 80054b6:	4649      	mov	r1, r9
 80054b8:	f7fb fb38 	bl	8000b2c <__aeabi_dcmpun>
 80054bc:	b140      	cbz	r0, 80054d0 <_printf_float+0xe0>
 80054be:	464b      	mov	r3, r9
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfbc      	itt	lt
 80054c4:	232d      	movlt	r3, #45	@ 0x2d
 80054c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054ca:	4a7e      	ldr	r2, [pc, #504]	@ (80056c4 <_printf_float+0x2d4>)
 80054cc:	4b7e      	ldr	r3, [pc, #504]	@ (80056c8 <_printf_float+0x2d8>)
 80054ce:	e7d4      	b.n	800547a <_printf_float+0x8a>
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054d6:	9206      	str	r2, [sp, #24]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	d13b      	bne.n	8005554 <_printf_float+0x164>
 80054dc:	2306      	movs	r3, #6
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054e4:	2300      	movs	r3, #0
 80054e6:	6022      	str	r2, [r4, #0]
 80054e8:	9303      	str	r3, [sp, #12]
 80054ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80054ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054f0:	ab09      	add	r3, sp, #36	@ 0x24
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	6861      	ldr	r1, [r4, #4]
 80054f6:	ec49 8b10 	vmov	d0, r8, r9
 80054fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054fe:	4628      	mov	r0, r5
 8005500:	f7ff fed7 	bl	80052b2 <__cvt>
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005508:	2b47      	cmp	r3, #71	@ 0x47
 800550a:	4680      	mov	r8, r0
 800550c:	d129      	bne.n	8005562 <_printf_float+0x172>
 800550e:	1cc8      	adds	r0, r1, #3
 8005510:	db02      	blt.n	8005518 <_printf_float+0x128>
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	4299      	cmp	r1, r3
 8005516:	dd41      	ble.n	800559c <_printf_float+0x1ac>
 8005518:	f1aa 0a02 	sub.w	sl, sl, #2
 800551c:	fa5f fa8a 	uxtb.w	sl, sl
 8005520:	3901      	subs	r1, #1
 8005522:	4652      	mov	r2, sl
 8005524:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005528:	9109      	str	r1, [sp, #36]	@ 0x24
 800552a:	f7ff ff27 	bl	800537c <__exponent>
 800552e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005530:	1813      	adds	r3, r2, r0
 8005532:	2a01      	cmp	r2, #1
 8005534:	4681      	mov	r9, r0
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	dc02      	bgt.n	8005540 <_printf_float+0x150>
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	07d2      	lsls	r2, r2, #31
 800553e:	d501      	bpl.n	8005544 <_printf_float+0x154>
 8005540:	3301      	adds	r3, #1
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0a2      	beq.n	8005492 <_printf_float+0xa2>
 800554c:	232d      	movs	r3, #45	@ 0x2d
 800554e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005552:	e79e      	b.n	8005492 <_printf_float+0xa2>
 8005554:	9a06      	ldr	r2, [sp, #24]
 8005556:	2a47      	cmp	r2, #71	@ 0x47
 8005558:	d1c2      	bne.n	80054e0 <_printf_float+0xf0>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1c0      	bne.n	80054e0 <_printf_float+0xf0>
 800555e:	2301      	movs	r3, #1
 8005560:	e7bd      	b.n	80054de <_printf_float+0xee>
 8005562:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005566:	d9db      	bls.n	8005520 <_printf_float+0x130>
 8005568:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800556c:	d118      	bne.n	80055a0 <_printf_float+0x1b0>
 800556e:	2900      	cmp	r1, #0
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	dd0b      	ble.n	800558c <_printf_float+0x19c>
 8005574:	6121      	str	r1, [r4, #16]
 8005576:	b913      	cbnz	r3, 800557e <_printf_float+0x18e>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	07d0      	lsls	r0, r2, #31
 800557c:	d502      	bpl.n	8005584 <_printf_float+0x194>
 800557e:	3301      	adds	r3, #1
 8005580:	440b      	add	r3, r1
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005586:	f04f 0900 	mov.w	r9, #0
 800558a:	e7db      	b.n	8005544 <_printf_float+0x154>
 800558c:	b913      	cbnz	r3, 8005594 <_printf_float+0x1a4>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	07d2      	lsls	r2, r2, #31
 8005592:	d501      	bpl.n	8005598 <_printf_float+0x1a8>
 8005594:	3302      	adds	r3, #2
 8005596:	e7f4      	b.n	8005582 <_printf_float+0x192>
 8005598:	2301      	movs	r3, #1
 800559a:	e7f2      	b.n	8005582 <_printf_float+0x192>
 800559c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055a2:	4299      	cmp	r1, r3
 80055a4:	db05      	blt.n	80055b2 <_printf_float+0x1c2>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6121      	str	r1, [r4, #16]
 80055aa:	07d8      	lsls	r0, r3, #31
 80055ac:	d5ea      	bpl.n	8005584 <_printf_float+0x194>
 80055ae:	1c4b      	adds	r3, r1, #1
 80055b0:	e7e7      	b.n	8005582 <_printf_float+0x192>
 80055b2:	2900      	cmp	r1, #0
 80055b4:	bfd4      	ite	le
 80055b6:	f1c1 0202 	rsble	r2, r1, #2
 80055ba:	2201      	movgt	r2, #1
 80055bc:	4413      	add	r3, r2
 80055be:	e7e0      	b.n	8005582 <_printf_float+0x192>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	055a      	lsls	r2, r3, #21
 80055c4:	d407      	bmi.n	80055d6 <_printf_float+0x1e6>
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	4642      	mov	r2, r8
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	d12b      	bne.n	800562c <_printf_float+0x23c>
 80055d4:	e767      	b.n	80054a6 <_printf_float+0xb6>
 80055d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055da:	f240 80dd 	bls.w	8005798 <_printf_float+0x3a8>
 80055de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f7fb fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d033      	beq.n	8005656 <_printf_float+0x266>
 80055ee:	4a37      	ldr	r2, [pc, #220]	@ (80056cc <_printf_float+0x2dc>)
 80055f0:	2301      	movs	r3, #1
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f af54 	beq.w	80054a6 <_printf_float+0xb6>
 80055fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005602:	4543      	cmp	r3, r8
 8005604:	db02      	blt.n	800560c <_printf_float+0x21c>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	07d8      	lsls	r0, r3, #31
 800560a:	d50f      	bpl.n	800562c <_printf_float+0x23c>
 800560c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f af45 	beq.w	80054a6 <_printf_float+0xb6>
 800561c:	f04f 0900 	mov.w	r9, #0
 8005620:	f108 38ff 	add.w	r8, r8, #4294967295
 8005624:	f104 0a1a 	add.w	sl, r4, #26
 8005628:	45c8      	cmp	r8, r9
 800562a:	dc09      	bgt.n	8005640 <_printf_float+0x250>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	079b      	lsls	r3, r3, #30
 8005630:	f100 8103 	bmi.w	800583a <_printf_float+0x44a>
 8005634:	68e0      	ldr	r0, [r4, #12]
 8005636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005638:	4298      	cmp	r0, r3
 800563a:	bfb8      	it	lt
 800563c:	4618      	movlt	r0, r3
 800563e:	e734      	b.n	80054aa <_printf_float+0xba>
 8005640:	2301      	movs	r3, #1
 8005642:	4652      	mov	r2, sl
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	f43f af2b 	beq.w	80054a6 <_printf_float+0xb6>
 8005650:	f109 0901 	add.w	r9, r9, #1
 8005654:	e7e8      	b.n	8005628 <_printf_float+0x238>
 8005656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	dc39      	bgt.n	80056d0 <_printf_float+0x2e0>
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <_printf_float+0x2dc>)
 800565e:	2301      	movs	r3, #1
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f af1d 	beq.w	80054a6 <_printf_float+0xb6>
 800566c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005670:	ea59 0303 	orrs.w	r3, r9, r3
 8005674:	d102      	bne.n	800567c <_printf_float+0x28c>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	07d9      	lsls	r1, r3, #31
 800567a:	d5d7      	bpl.n	800562c <_printf_float+0x23c>
 800567c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f af0d 	beq.w	80054a6 <_printf_float+0xb6>
 800568c:	f04f 0a00 	mov.w	sl, #0
 8005690:	f104 0b1a 	add.w	fp, r4, #26
 8005694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005696:	425b      	negs	r3, r3
 8005698:	4553      	cmp	r3, sl
 800569a:	dc01      	bgt.n	80056a0 <_printf_float+0x2b0>
 800569c:	464b      	mov	r3, r9
 800569e:	e793      	b.n	80055c8 <_printf_float+0x1d8>
 80056a0:	2301      	movs	r3, #1
 80056a2:	465a      	mov	r2, fp
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f aefb 	beq.w	80054a6 <_printf_float+0xb6>
 80056b0:	f10a 0a01 	add.w	sl, sl, #1
 80056b4:	e7ee      	b.n	8005694 <_printf_float+0x2a4>
 80056b6:	bf00      	nop
 80056b8:	7fefffff 	.word	0x7fefffff
 80056bc:	08007d58 	.word	0x08007d58
 80056c0:	08007d54 	.word	0x08007d54
 80056c4:	08007d60 	.word	0x08007d60
 80056c8:	08007d5c 	.word	0x08007d5c
 80056cc:	08007d64 	.word	0x08007d64
 80056d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056d6:	4553      	cmp	r3, sl
 80056d8:	bfa8      	it	ge
 80056da:	4653      	movge	r3, sl
 80056dc:	2b00      	cmp	r3, #0
 80056de:	4699      	mov	r9, r3
 80056e0:	dc36      	bgt.n	8005750 <_printf_float+0x360>
 80056e2:	f04f 0b00 	mov.w	fp, #0
 80056e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ea:	f104 021a 	add.w	r2, r4, #26
 80056ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056f0:	9306      	str	r3, [sp, #24]
 80056f2:	eba3 0309 	sub.w	r3, r3, r9
 80056f6:	455b      	cmp	r3, fp
 80056f8:	dc31      	bgt.n	800575e <_printf_float+0x36e>
 80056fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fc:	459a      	cmp	sl, r3
 80056fe:	dc3a      	bgt.n	8005776 <_printf_float+0x386>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	07da      	lsls	r2, r3, #31
 8005704:	d437      	bmi.n	8005776 <_printf_float+0x386>
 8005706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005708:	ebaa 0903 	sub.w	r9, sl, r3
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	ebaa 0303 	sub.w	r3, sl, r3
 8005712:	4599      	cmp	r9, r3
 8005714:	bfa8      	it	ge
 8005716:	4699      	movge	r9, r3
 8005718:	f1b9 0f00 	cmp.w	r9, #0
 800571c:	dc33      	bgt.n	8005786 <_printf_float+0x396>
 800571e:	f04f 0800 	mov.w	r8, #0
 8005722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005726:	f104 0b1a 	add.w	fp, r4, #26
 800572a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572c:	ebaa 0303 	sub.w	r3, sl, r3
 8005730:	eba3 0309 	sub.w	r3, r3, r9
 8005734:	4543      	cmp	r3, r8
 8005736:	f77f af79 	ble.w	800562c <_printf_float+0x23c>
 800573a:	2301      	movs	r3, #1
 800573c:	465a      	mov	r2, fp
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	47b8      	blx	r7
 8005744:	3001      	adds	r0, #1
 8005746:	f43f aeae 	beq.w	80054a6 <_printf_float+0xb6>
 800574a:	f108 0801 	add.w	r8, r8, #1
 800574e:	e7ec      	b.n	800572a <_printf_float+0x33a>
 8005750:	4642      	mov	r2, r8
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	d1c2      	bne.n	80056e2 <_printf_float+0x2f2>
 800575c:	e6a3      	b.n	80054a6 <_printf_float+0xb6>
 800575e:	2301      	movs	r3, #1
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	9206      	str	r2, [sp, #24]
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f ae9c 	beq.w	80054a6 <_printf_float+0xb6>
 800576e:	9a06      	ldr	r2, [sp, #24]
 8005770:	f10b 0b01 	add.w	fp, fp, #1
 8005774:	e7bb      	b.n	80056ee <_printf_float+0x2fe>
 8005776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	d1c0      	bne.n	8005706 <_printf_float+0x316>
 8005784:	e68f      	b.n	80054a6 <_printf_float+0xb6>
 8005786:	9a06      	ldr	r2, [sp, #24]
 8005788:	464b      	mov	r3, r9
 800578a:	4442      	add	r2, r8
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	d1c3      	bne.n	800571e <_printf_float+0x32e>
 8005796:	e686      	b.n	80054a6 <_printf_float+0xb6>
 8005798:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800579c:	f1ba 0f01 	cmp.w	sl, #1
 80057a0:	dc01      	bgt.n	80057a6 <_printf_float+0x3b6>
 80057a2:	07db      	lsls	r3, r3, #31
 80057a4:	d536      	bpl.n	8005814 <_printf_float+0x424>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4642      	mov	r2, r8
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae78 	beq.w	80054a6 <_printf_float+0xb6>
 80057b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae70 	beq.w	80054a6 <_printf_float+0xb6>
 80057c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057d2:	f7fb f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d6:	b9c0      	cbnz	r0, 800580a <_printf_float+0x41a>
 80057d8:	4653      	mov	r3, sl
 80057da:	f108 0201 	add.w	r2, r8, #1
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	d10c      	bne.n	8005802 <_printf_float+0x412>
 80057e8:	e65d      	b.n	80054a6 <_printf_float+0xb6>
 80057ea:	2301      	movs	r3, #1
 80057ec:	465a      	mov	r2, fp
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	f43f ae56 	beq.w	80054a6 <_printf_float+0xb6>
 80057fa:	f108 0801 	add.w	r8, r8, #1
 80057fe:	45d0      	cmp	r8, sl
 8005800:	dbf3      	blt.n	80057ea <_printf_float+0x3fa>
 8005802:	464b      	mov	r3, r9
 8005804:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005808:	e6df      	b.n	80055ca <_printf_float+0x1da>
 800580a:	f04f 0800 	mov.w	r8, #0
 800580e:	f104 0b1a 	add.w	fp, r4, #26
 8005812:	e7f4      	b.n	80057fe <_printf_float+0x40e>
 8005814:	2301      	movs	r3, #1
 8005816:	4642      	mov	r2, r8
 8005818:	e7e1      	b.n	80057de <_printf_float+0x3ee>
 800581a:	2301      	movs	r3, #1
 800581c:	464a      	mov	r2, r9
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f ae3e 	beq.w	80054a6 <_printf_float+0xb6>
 800582a:	f108 0801 	add.w	r8, r8, #1
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	4543      	cmp	r3, r8
 8005836:	dcf0      	bgt.n	800581a <_printf_float+0x42a>
 8005838:	e6fc      	b.n	8005634 <_printf_float+0x244>
 800583a:	f04f 0800 	mov.w	r8, #0
 800583e:	f104 0919 	add.w	r9, r4, #25
 8005842:	e7f4      	b.n	800582e <_printf_float+0x43e>

08005844 <_printf_common>:
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	4616      	mov	r6, r2
 800584a:	4698      	mov	r8, r3
 800584c:	688a      	ldr	r2, [r1, #8]
 800584e:	690b      	ldr	r3, [r1, #16]
 8005850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005854:	4293      	cmp	r3, r2
 8005856:	bfb8      	it	lt
 8005858:	4613      	movlt	r3, r2
 800585a:	6033      	str	r3, [r6, #0]
 800585c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005860:	4607      	mov	r7, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b10a      	cbz	r2, 800586a <_printf_common+0x26>
 8005866:	3301      	adds	r3, #1
 8005868:	6033      	str	r3, [r6, #0]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	0699      	lsls	r1, r3, #26
 800586e:	bf42      	ittt	mi
 8005870:	6833      	ldrmi	r3, [r6, #0]
 8005872:	3302      	addmi	r3, #2
 8005874:	6033      	strmi	r3, [r6, #0]
 8005876:	6825      	ldr	r5, [r4, #0]
 8005878:	f015 0506 	ands.w	r5, r5, #6
 800587c:	d106      	bne.n	800588c <_printf_common+0x48>
 800587e:	f104 0a19 	add.w	sl, r4, #25
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	6832      	ldr	r2, [r6, #0]
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	42ab      	cmp	r3, r5
 800588a:	dc26      	bgt.n	80058da <_printf_common+0x96>
 800588c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	3b00      	subs	r3, #0
 8005894:	bf18      	it	ne
 8005896:	2301      	movne	r3, #1
 8005898:	0692      	lsls	r2, r2, #26
 800589a:	d42b      	bmi.n	80058f4 <_printf_common+0xb0>
 800589c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a0:	4641      	mov	r1, r8
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c8      	blx	r9
 80058a6:	3001      	adds	r0, #1
 80058a8:	d01e      	beq.n	80058e8 <_printf_common+0xa4>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	f003 0306 	and.w	r3, r3, #6
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	bf02      	ittt	eq
 80058b6:	68e5      	ldreq	r5, [r4, #12]
 80058b8:	6833      	ldreq	r3, [r6, #0]
 80058ba:	1aed      	subeq	r5, r5, r3
 80058bc:	68a3      	ldr	r3, [r4, #8]
 80058be:	bf0c      	ite	eq
 80058c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c4:	2500      	movne	r5, #0
 80058c6:	4293      	cmp	r3, r2
 80058c8:	bfc4      	itt	gt
 80058ca:	1a9b      	subgt	r3, r3, r2
 80058cc:	18ed      	addgt	r5, r5, r3
 80058ce:	2600      	movs	r6, #0
 80058d0:	341a      	adds	r4, #26
 80058d2:	42b5      	cmp	r5, r6
 80058d4:	d11a      	bne.n	800590c <_printf_common+0xc8>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e008      	b.n	80058ec <_printf_common+0xa8>
 80058da:	2301      	movs	r3, #1
 80058dc:	4652      	mov	r2, sl
 80058de:	4641      	mov	r1, r8
 80058e0:	4638      	mov	r0, r7
 80058e2:	47c8      	blx	r9
 80058e4:	3001      	adds	r0, #1
 80058e6:	d103      	bne.n	80058f0 <_printf_common+0xac>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	3501      	adds	r5, #1
 80058f2:	e7c6      	b.n	8005882 <_printf_common+0x3e>
 80058f4:	18e1      	adds	r1, r4, r3
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	2030      	movs	r0, #48	@ 0x30
 80058fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058fe:	4422      	add	r2, r4
 8005900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005908:	3302      	adds	r3, #2
 800590a:	e7c7      	b.n	800589c <_printf_common+0x58>
 800590c:	2301      	movs	r3, #1
 800590e:	4622      	mov	r2, r4
 8005910:	4641      	mov	r1, r8
 8005912:	4638      	mov	r0, r7
 8005914:	47c8      	blx	r9
 8005916:	3001      	adds	r0, #1
 8005918:	d0e6      	beq.n	80058e8 <_printf_common+0xa4>
 800591a:	3601      	adds	r6, #1
 800591c:	e7d9      	b.n	80058d2 <_printf_common+0x8e>
	...

08005920 <_printf_i>:
 8005920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	7e0f      	ldrb	r7, [r1, #24]
 8005926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005928:	2f78      	cmp	r7, #120	@ 0x78
 800592a:	4691      	mov	r9, r2
 800592c:	4680      	mov	r8, r0
 800592e:	460c      	mov	r4, r1
 8005930:	469a      	mov	sl, r3
 8005932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005936:	d807      	bhi.n	8005948 <_printf_i+0x28>
 8005938:	2f62      	cmp	r7, #98	@ 0x62
 800593a:	d80a      	bhi.n	8005952 <_printf_i+0x32>
 800593c:	2f00      	cmp	r7, #0
 800593e:	f000 80d1 	beq.w	8005ae4 <_printf_i+0x1c4>
 8005942:	2f58      	cmp	r7, #88	@ 0x58
 8005944:	f000 80b8 	beq.w	8005ab8 <_printf_i+0x198>
 8005948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800594c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005950:	e03a      	b.n	80059c8 <_printf_i+0xa8>
 8005952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005956:	2b15      	cmp	r3, #21
 8005958:	d8f6      	bhi.n	8005948 <_printf_i+0x28>
 800595a:	a101      	add	r1, pc, #4	@ (adr r1, 8005960 <_printf_i+0x40>)
 800595c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005960:	080059b9 	.word	0x080059b9
 8005964:	080059cd 	.word	0x080059cd
 8005968:	08005949 	.word	0x08005949
 800596c:	08005949 	.word	0x08005949
 8005970:	08005949 	.word	0x08005949
 8005974:	08005949 	.word	0x08005949
 8005978:	080059cd 	.word	0x080059cd
 800597c:	08005949 	.word	0x08005949
 8005980:	08005949 	.word	0x08005949
 8005984:	08005949 	.word	0x08005949
 8005988:	08005949 	.word	0x08005949
 800598c:	08005acb 	.word	0x08005acb
 8005990:	080059f7 	.word	0x080059f7
 8005994:	08005a85 	.word	0x08005a85
 8005998:	08005949 	.word	0x08005949
 800599c:	08005949 	.word	0x08005949
 80059a0:	08005aed 	.word	0x08005aed
 80059a4:	08005949 	.word	0x08005949
 80059a8:	080059f7 	.word	0x080059f7
 80059ac:	08005949 	.word	0x08005949
 80059b0:	08005949 	.word	0x08005949
 80059b4:	08005a8d 	.word	0x08005a8d
 80059b8:	6833      	ldr	r3, [r6, #0]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6032      	str	r2, [r6, #0]
 80059c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059c8:	2301      	movs	r3, #1
 80059ca:	e09c      	b.n	8005b06 <_printf_i+0x1e6>
 80059cc:	6833      	ldr	r3, [r6, #0]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	6031      	str	r1, [r6, #0]
 80059d4:	0606      	lsls	r6, r0, #24
 80059d6:	d501      	bpl.n	80059dc <_printf_i+0xbc>
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	e003      	b.n	80059e4 <_printf_i+0xc4>
 80059dc:	0645      	lsls	r5, r0, #25
 80059de:	d5fb      	bpl.n	80059d8 <_printf_i+0xb8>
 80059e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	da03      	bge.n	80059f0 <_printf_i+0xd0>
 80059e8:	232d      	movs	r3, #45	@ 0x2d
 80059ea:	426d      	negs	r5, r5
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f0:	4858      	ldr	r0, [pc, #352]	@ (8005b54 <_printf_i+0x234>)
 80059f2:	230a      	movs	r3, #10
 80059f4:	e011      	b.n	8005a1a <_printf_i+0xfa>
 80059f6:	6821      	ldr	r1, [r4, #0]
 80059f8:	6833      	ldr	r3, [r6, #0]
 80059fa:	0608      	lsls	r0, r1, #24
 80059fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a00:	d402      	bmi.n	8005a08 <_printf_i+0xe8>
 8005a02:	0649      	lsls	r1, r1, #25
 8005a04:	bf48      	it	mi
 8005a06:	b2ad      	uxthmi	r5, r5
 8005a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a0a:	4852      	ldr	r0, [pc, #328]	@ (8005b54 <_printf_i+0x234>)
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	bf14      	ite	ne
 8005a10:	230a      	movne	r3, #10
 8005a12:	2308      	moveq	r3, #8
 8005a14:	2100      	movs	r1, #0
 8005a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a1a:	6866      	ldr	r6, [r4, #4]
 8005a1c:	60a6      	str	r6, [r4, #8]
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	db05      	blt.n	8005a2e <_printf_i+0x10e>
 8005a22:	6821      	ldr	r1, [r4, #0]
 8005a24:	432e      	orrs	r6, r5
 8005a26:	f021 0104 	bic.w	r1, r1, #4
 8005a2a:	6021      	str	r1, [r4, #0]
 8005a2c:	d04b      	beq.n	8005ac6 <_printf_i+0x1a6>
 8005a2e:	4616      	mov	r6, r2
 8005a30:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a34:	fb03 5711 	mls	r7, r3, r1, r5
 8005a38:	5dc7      	ldrb	r7, [r0, r7]
 8005a3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a3e:	462f      	mov	r7, r5
 8005a40:	42bb      	cmp	r3, r7
 8005a42:	460d      	mov	r5, r1
 8005a44:	d9f4      	bls.n	8005a30 <_printf_i+0x110>
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d10b      	bne.n	8005a62 <_printf_i+0x142>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	07df      	lsls	r7, r3, #31
 8005a4e:	d508      	bpl.n	8005a62 <_printf_i+0x142>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	6861      	ldr	r1, [r4, #4]
 8005a54:	4299      	cmp	r1, r3
 8005a56:	bfde      	ittt	le
 8005a58:	2330      	movle	r3, #48	@ 0x30
 8005a5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a62:	1b92      	subs	r2, r2, r6
 8005a64:	6122      	str	r2, [r4, #16]
 8005a66:	f8cd a000 	str.w	sl, [sp]
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	aa03      	add	r2, sp, #12
 8005a6e:	4621      	mov	r1, r4
 8005a70:	4640      	mov	r0, r8
 8005a72:	f7ff fee7 	bl	8005844 <_printf_common>
 8005a76:	3001      	adds	r0, #1
 8005a78:	d14a      	bne.n	8005b10 <_printf_i+0x1f0>
 8005a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7e:	b004      	add	sp, #16
 8005a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	4832      	ldr	r0, [pc, #200]	@ (8005b58 <_printf_i+0x238>)
 8005a8e:	2778      	movs	r7, #120	@ 0x78
 8005a90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	6831      	ldr	r1, [r6, #0]
 8005a98:	061f      	lsls	r7, r3, #24
 8005a9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a9e:	d402      	bmi.n	8005aa6 <_printf_i+0x186>
 8005aa0:	065f      	lsls	r7, r3, #25
 8005aa2:	bf48      	it	mi
 8005aa4:	b2ad      	uxthmi	r5, r5
 8005aa6:	6031      	str	r1, [r6, #0]
 8005aa8:	07d9      	lsls	r1, r3, #31
 8005aaa:	bf44      	itt	mi
 8005aac:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab0:	6023      	strmi	r3, [r4, #0]
 8005ab2:	b11d      	cbz	r5, 8005abc <_printf_i+0x19c>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	e7ad      	b.n	8005a14 <_printf_i+0xf4>
 8005ab8:	4826      	ldr	r0, [pc, #152]	@ (8005b54 <_printf_i+0x234>)
 8005aba:	e7e9      	b.n	8005a90 <_printf_i+0x170>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	f023 0320 	bic.w	r3, r3, #32
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	e7f6      	b.n	8005ab4 <_printf_i+0x194>
 8005ac6:	4616      	mov	r6, r2
 8005ac8:	e7bd      	b.n	8005a46 <_printf_i+0x126>
 8005aca:	6833      	ldr	r3, [r6, #0]
 8005acc:	6825      	ldr	r5, [r4, #0]
 8005ace:	6961      	ldr	r1, [r4, #20]
 8005ad0:	1d18      	adds	r0, r3, #4
 8005ad2:	6030      	str	r0, [r6, #0]
 8005ad4:	062e      	lsls	r6, r5, #24
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	d501      	bpl.n	8005ade <_printf_i+0x1be>
 8005ada:	6019      	str	r1, [r3, #0]
 8005adc:	e002      	b.n	8005ae4 <_printf_i+0x1c4>
 8005ade:	0668      	lsls	r0, r5, #25
 8005ae0:	d5fb      	bpl.n	8005ada <_printf_i+0x1ba>
 8005ae2:	8019      	strh	r1, [r3, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	4616      	mov	r6, r2
 8005aea:	e7bc      	b.n	8005a66 <_printf_i+0x146>
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	6032      	str	r2, [r6, #0]
 8005af2:	681e      	ldr	r6, [r3, #0]
 8005af4:	6862      	ldr	r2, [r4, #4]
 8005af6:	2100      	movs	r1, #0
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7fa fb69 	bl	80001d0 <memchr>
 8005afe:	b108      	cbz	r0, 8005b04 <_printf_i+0x1e4>
 8005b00:	1b80      	subs	r0, r0, r6
 8005b02:	6060      	str	r0, [r4, #4]
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b0e:	e7aa      	b.n	8005a66 <_printf_i+0x146>
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	4632      	mov	r2, r6
 8005b14:	4649      	mov	r1, r9
 8005b16:	4640      	mov	r0, r8
 8005b18:	47d0      	blx	sl
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d0ad      	beq.n	8005a7a <_printf_i+0x15a>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	079b      	lsls	r3, r3, #30
 8005b22:	d413      	bmi.n	8005b4c <_printf_i+0x22c>
 8005b24:	68e0      	ldr	r0, [r4, #12]
 8005b26:	9b03      	ldr	r3, [sp, #12]
 8005b28:	4298      	cmp	r0, r3
 8005b2a:	bfb8      	it	lt
 8005b2c:	4618      	movlt	r0, r3
 8005b2e:	e7a6      	b.n	8005a7e <_printf_i+0x15e>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4632      	mov	r2, r6
 8005b34:	4649      	mov	r1, r9
 8005b36:	4640      	mov	r0, r8
 8005b38:	47d0      	blx	sl
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d09d      	beq.n	8005a7a <_printf_i+0x15a>
 8005b3e:	3501      	adds	r5, #1
 8005b40:	68e3      	ldr	r3, [r4, #12]
 8005b42:	9903      	ldr	r1, [sp, #12]
 8005b44:	1a5b      	subs	r3, r3, r1
 8005b46:	42ab      	cmp	r3, r5
 8005b48:	dcf2      	bgt.n	8005b30 <_printf_i+0x210>
 8005b4a:	e7eb      	b.n	8005b24 <_printf_i+0x204>
 8005b4c:	2500      	movs	r5, #0
 8005b4e:	f104 0619 	add.w	r6, r4, #25
 8005b52:	e7f5      	b.n	8005b40 <_printf_i+0x220>
 8005b54:	08007d66 	.word	0x08007d66
 8005b58:	08007d77 	.word	0x08007d77

08005b5c <std>:
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	4604      	mov	r4, r0
 8005b62:	e9c0 3300 	strd	r3, r3, [r0]
 8005b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b6a:	6083      	str	r3, [r0, #8]
 8005b6c:	8181      	strh	r1, [r0, #12]
 8005b6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b70:	81c2      	strh	r2, [r0, #14]
 8005b72:	6183      	str	r3, [r0, #24]
 8005b74:	4619      	mov	r1, r3
 8005b76:	2208      	movs	r2, #8
 8005b78:	305c      	adds	r0, #92	@ 0x5c
 8005b7a:	f000 f9f9 	bl	8005f70 <memset>
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <std+0x58>)
 8005b80:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <std+0x5c>)
 8005b84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <std+0x60>)
 8005b88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <std+0x64>)
 8005b8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <std+0x68>)
 8005b90:	6224      	str	r4, [r4, #32]
 8005b92:	429c      	cmp	r4, r3
 8005b94:	d006      	beq.n	8005ba4 <std+0x48>
 8005b96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b9a:	4294      	cmp	r4, r2
 8005b9c:	d002      	beq.n	8005ba4 <std+0x48>
 8005b9e:	33d0      	adds	r3, #208	@ 0xd0
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	d105      	bne.n	8005bb0 <std+0x54>
 8005ba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bac:	f000 ba5c 	b.w	8006068 <__retarget_lock_init_recursive>
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08005dc1 	.word	0x08005dc1
 8005bb8:	08005de3 	.word	0x08005de3
 8005bbc:	08005e1b 	.word	0x08005e1b
 8005bc0:	08005e3f 	.word	0x08005e3f
 8005bc4:	200003f0 	.word	0x200003f0

08005bc8 <stdio_exit_handler>:
 8005bc8:	4a02      	ldr	r2, [pc, #8]	@ (8005bd4 <stdio_exit_handler+0xc>)
 8005bca:	4903      	ldr	r1, [pc, #12]	@ (8005bd8 <stdio_exit_handler+0x10>)
 8005bcc:	4803      	ldr	r0, [pc, #12]	@ (8005bdc <stdio_exit_handler+0x14>)
 8005bce:	f000 b869 	b.w	8005ca4 <_fwalk_sglue>
 8005bd2:	bf00      	nop
 8005bd4:	2000001c 	.word	0x2000001c
 8005bd8:	080079a1 	.word	0x080079a1
 8005bdc:	2000002c 	.word	0x2000002c

08005be0 <cleanup_stdio>:
 8005be0:	6841      	ldr	r1, [r0, #4]
 8005be2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c14 <cleanup_stdio+0x34>)
 8005be4:	4299      	cmp	r1, r3
 8005be6:	b510      	push	{r4, lr}
 8005be8:	4604      	mov	r4, r0
 8005bea:	d001      	beq.n	8005bf0 <cleanup_stdio+0x10>
 8005bec:	f001 fed8 	bl	80079a0 <_fflush_r>
 8005bf0:	68a1      	ldr	r1, [r4, #8]
 8005bf2:	4b09      	ldr	r3, [pc, #36]	@ (8005c18 <cleanup_stdio+0x38>)
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d002      	beq.n	8005bfe <cleanup_stdio+0x1e>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f001 fed1 	bl	80079a0 <_fflush_r>
 8005bfe:	68e1      	ldr	r1, [r4, #12]
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <cleanup_stdio+0x3c>)
 8005c02:	4299      	cmp	r1, r3
 8005c04:	d004      	beq.n	8005c10 <cleanup_stdio+0x30>
 8005c06:	4620      	mov	r0, r4
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	f001 bec8 	b.w	80079a0 <_fflush_r>
 8005c10:	bd10      	pop	{r4, pc}
 8005c12:	bf00      	nop
 8005c14:	200003f0 	.word	0x200003f0
 8005c18:	20000458 	.word	0x20000458
 8005c1c:	200004c0 	.word	0x200004c0

08005c20 <global_stdio_init.part.0>:
 8005c20:	b510      	push	{r4, lr}
 8005c22:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <global_stdio_init.part.0+0x30>)
 8005c24:	4c0b      	ldr	r4, [pc, #44]	@ (8005c54 <global_stdio_init.part.0+0x34>)
 8005c26:	4a0c      	ldr	r2, [pc, #48]	@ (8005c58 <global_stdio_init.part.0+0x38>)
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2104      	movs	r1, #4
 8005c30:	f7ff ff94 	bl	8005b5c <std>
 8005c34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2109      	movs	r1, #9
 8005c3c:	f7ff ff8e 	bl	8005b5c <std>
 8005c40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c44:	2202      	movs	r2, #2
 8005c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4a:	2112      	movs	r1, #18
 8005c4c:	f7ff bf86 	b.w	8005b5c <std>
 8005c50:	20000528 	.word	0x20000528
 8005c54:	200003f0 	.word	0x200003f0
 8005c58:	08005bc9 	.word	0x08005bc9

08005c5c <__sfp_lock_acquire>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	@ (8005c64 <__sfp_lock_acquire+0x8>)
 8005c5e:	f000 ba04 	b.w	800606a <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	20000531 	.word	0x20000531

08005c68 <__sfp_lock_release>:
 8005c68:	4801      	ldr	r0, [pc, #4]	@ (8005c70 <__sfp_lock_release+0x8>)
 8005c6a:	f000 b9ff 	b.w	800606c <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	20000531 	.word	0x20000531

08005c74 <__sinit>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	4604      	mov	r4, r0
 8005c78:	f7ff fff0 	bl	8005c5c <__sfp_lock_acquire>
 8005c7c:	6a23      	ldr	r3, [r4, #32]
 8005c7e:	b11b      	cbz	r3, 8005c88 <__sinit+0x14>
 8005c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c84:	f7ff bff0 	b.w	8005c68 <__sfp_lock_release>
 8005c88:	4b04      	ldr	r3, [pc, #16]	@ (8005c9c <__sinit+0x28>)
 8005c8a:	6223      	str	r3, [r4, #32]
 8005c8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <__sinit+0x2c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f5      	bne.n	8005c80 <__sinit+0xc>
 8005c94:	f7ff ffc4 	bl	8005c20 <global_stdio_init.part.0>
 8005c98:	e7f2      	b.n	8005c80 <__sinit+0xc>
 8005c9a:	bf00      	nop
 8005c9c:	08005be1 	.word	0x08005be1
 8005ca0:	20000528 	.word	0x20000528

08005ca4 <_fwalk_sglue>:
 8005ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca8:	4607      	mov	r7, r0
 8005caa:	4688      	mov	r8, r1
 8005cac:	4614      	mov	r4, r2
 8005cae:	2600      	movs	r6, #0
 8005cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cb8:	d505      	bpl.n	8005cc6 <_fwalk_sglue+0x22>
 8005cba:	6824      	ldr	r4, [r4, #0]
 8005cbc:	2c00      	cmp	r4, #0
 8005cbe:	d1f7      	bne.n	8005cb0 <_fwalk_sglue+0xc>
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	89ab      	ldrh	r3, [r5, #12]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d907      	bls.n	8005cdc <_fwalk_sglue+0x38>
 8005ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	d003      	beq.n	8005cdc <_fwalk_sglue+0x38>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c0      	blx	r8
 8005cda:	4306      	orrs	r6, r0
 8005cdc:	3568      	adds	r5, #104	@ 0x68
 8005cde:	e7e9      	b.n	8005cb4 <_fwalk_sglue+0x10>

08005ce0 <iprintf>:
 8005ce0:	b40f      	push	{r0, r1, r2, r3}
 8005ce2:	b507      	push	{r0, r1, r2, lr}
 8005ce4:	4906      	ldr	r1, [pc, #24]	@ (8005d00 <iprintf+0x20>)
 8005ce6:	ab04      	add	r3, sp, #16
 8005ce8:	6808      	ldr	r0, [r1, #0]
 8005cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cee:	6881      	ldr	r1, [r0, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	f001 fcb9 	bl	8007668 <_vfiprintf_r>
 8005cf6:	b003      	add	sp, #12
 8005cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cfc:	b004      	add	sp, #16
 8005cfe:	4770      	bx	lr
 8005d00:	20000028 	.word	0x20000028

08005d04 <_puts_r>:
 8005d04:	6a03      	ldr	r3, [r0, #32]
 8005d06:	b570      	push	{r4, r5, r6, lr}
 8005d08:	6884      	ldr	r4, [r0, #8]
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	b90b      	cbnz	r3, 8005d14 <_puts_r+0x10>
 8005d10:	f7ff ffb0 	bl	8005c74 <__sinit>
 8005d14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d16:	07db      	lsls	r3, r3, #31
 8005d18:	d405      	bmi.n	8005d26 <_puts_r+0x22>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	0598      	lsls	r0, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_puts_r+0x22>
 8005d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d22:	f000 f9a2 	bl	800606a <__retarget_lock_acquire_recursive>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	0719      	lsls	r1, r3, #28
 8005d2a:	d502      	bpl.n	8005d32 <_puts_r+0x2e>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d135      	bne.n	8005d9e <_puts_r+0x9a>
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 f8c5 	bl	8005ec4 <__swsetup_r>
 8005d3a:	b380      	cbz	r0, 8005d9e <_puts_r+0x9a>
 8005d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d42:	07da      	lsls	r2, r3, #31
 8005d44:	d405      	bmi.n	8005d52 <_puts_r+0x4e>
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	059b      	lsls	r3, r3, #22
 8005d4a:	d402      	bmi.n	8005d52 <_puts_r+0x4e>
 8005d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d4e:	f000 f98d 	bl	800606c <__retarget_lock_release_recursive>
 8005d52:	4628      	mov	r0, r5
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da04      	bge.n	8005d64 <_puts_r+0x60>
 8005d5a:	69a2      	ldr	r2, [r4, #24]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	dc17      	bgt.n	8005d90 <_puts_r+0x8c>
 8005d60:	290a      	cmp	r1, #10
 8005d62:	d015      	beq.n	8005d90 <_puts_r+0x8c>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	7019      	strb	r1, [r3, #0]
 8005d6c:	68a3      	ldr	r3, [r4, #8]
 8005d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d72:	3b01      	subs	r3, #1
 8005d74:	60a3      	str	r3, [r4, #8]
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d1ed      	bne.n	8005d56 <_puts_r+0x52>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da11      	bge.n	8005da2 <_puts_r+0x9e>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	210a      	movs	r1, #10
 8005d82:	4628      	mov	r0, r5
 8005d84:	f000 f85f 	bl	8005e46 <__swbuf_r>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d0d7      	beq.n	8005d3c <_puts_r+0x38>
 8005d8c:	250a      	movs	r5, #10
 8005d8e:	e7d7      	b.n	8005d40 <_puts_r+0x3c>
 8005d90:	4622      	mov	r2, r4
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 f857 	bl	8005e46 <__swbuf_r>
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d1e7      	bne.n	8005d6c <_puts_r+0x68>
 8005d9c:	e7ce      	b.n	8005d3c <_puts_r+0x38>
 8005d9e:	3e01      	subs	r6, #1
 8005da0:	e7e4      	b.n	8005d6c <_puts_r+0x68>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	220a      	movs	r2, #10
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e7ee      	b.n	8005d8c <_puts_r+0x88>
	...

08005db0 <puts>:
 8005db0:	4b02      	ldr	r3, [pc, #8]	@ (8005dbc <puts+0xc>)
 8005db2:	4601      	mov	r1, r0
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	f7ff bfa5 	b.w	8005d04 <_puts_r>
 8005dba:	bf00      	nop
 8005dbc:	20000028 	.word	0x20000028

08005dc0 <__sread>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc8:	f000 f900 	bl	8005fcc <_read_r>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	bfab      	itete	ge
 8005dd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8005dd4:	181b      	addge	r3, r3, r0
 8005dd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dda:	bfac      	ite	ge
 8005ddc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dde:	81a3      	strhlt	r3, [r4, #12]
 8005de0:	bd10      	pop	{r4, pc}

08005de2 <__swrite>:
 8005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	461f      	mov	r7, r3
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	05db      	lsls	r3, r3, #23
 8005dec:	4605      	mov	r5, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	4616      	mov	r6, r2
 8005df2:	d505      	bpl.n	8005e00 <__swrite+0x1e>
 8005df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df8:	2302      	movs	r3, #2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f000 f8d4 	bl	8005fa8 <_lseek_r>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	463b      	mov	r3, r7
 8005e10:	4628      	mov	r0, r5
 8005e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e16:	f000 b8eb 	b.w	8005ff0 <_write_r>

08005e1a <__sseek>:
 8005e1a:	b510      	push	{r4, lr}
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e22:	f000 f8c1 	bl	8005fa8 <_lseek_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	bf15      	itete	ne
 8005e2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e36:	81a3      	strheq	r3, [r4, #12]
 8005e38:	bf18      	it	ne
 8005e3a:	81a3      	strhne	r3, [r4, #12]
 8005e3c:	bd10      	pop	{r4, pc}

08005e3e <__sclose>:
 8005e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e42:	f000 b8a1 	b.w	8005f88 <_close_r>

08005e46 <__swbuf_r>:
 8005e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e48:	460e      	mov	r6, r1
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	b118      	cbz	r0, 8005e58 <__swbuf_r+0x12>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <__swbuf_r+0x12>
 8005e54:	f7ff ff0e 	bl	8005c74 <__sinit>
 8005e58:	69a3      	ldr	r3, [r4, #24]
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	071a      	lsls	r2, r3, #28
 8005e60:	d501      	bpl.n	8005e66 <__swbuf_r+0x20>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	b943      	cbnz	r3, 8005e78 <__swbuf_r+0x32>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 f82b 	bl	8005ec4 <__swsetup_r>
 8005e6e:	b118      	cbz	r0, 8005e78 <__swbuf_r+0x32>
 8005e70:	f04f 37ff 	mov.w	r7, #4294967295
 8005e74:	4638      	mov	r0, r7
 8005e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	6922      	ldr	r2, [r4, #16]
 8005e7c:	1a98      	subs	r0, r3, r2
 8005e7e:	6963      	ldr	r3, [r4, #20]
 8005e80:	b2f6      	uxtb	r6, r6
 8005e82:	4283      	cmp	r3, r0
 8005e84:	4637      	mov	r7, r6
 8005e86:	dc05      	bgt.n	8005e94 <__swbuf_r+0x4e>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f001 fd88 	bl	80079a0 <_fflush_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d1ed      	bne.n	8005e70 <__swbuf_r+0x2a>
 8005e94:	68a3      	ldr	r3, [r4, #8]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	60a3      	str	r3, [r4, #8]
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	6022      	str	r2, [r4, #0]
 8005ea0:	701e      	strb	r6, [r3, #0]
 8005ea2:	6962      	ldr	r2, [r4, #20]
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d004      	beq.n	8005eb4 <__swbuf_r+0x6e>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d5e1      	bpl.n	8005e74 <__swbuf_r+0x2e>
 8005eb0:	2e0a      	cmp	r6, #10
 8005eb2:	d1df      	bne.n	8005e74 <__swbuf_r+0x2e>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f001 fd72 	bl	80079a0 <_fflush_r>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d0d9      	beq.n	8005e74 <__swbuf_r+0x2e>
 8005ec0:	e7d6      	b.n	8005e70 <__swbuf_r+0x2a>
	...

08005ec4 <__swsetup_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4b29      	ldr	r3, [pc, #164]	@ (8005f6c <__swsetup_r+0xa8>)
 8005ec8:	4605      	mov	r5, r0
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	460c      	mov	r4, r1
 8005ece:	b118      	cbz	r0, 8005ed8 <__swsetup_r+0x14>
 8005ed0:	6a03      	ldr	r3, [r0, #32]
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <__swsetup_r+0x14>
 8005ed4:	f7ff fece 	bl	8005c74 <__sinit>
 8005ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005edc:	0719      	lsls	r1, r3, #28
 8005ede:	d422      	bmi.n	8005f26 <__swsetup_r+0x62>
 8005ee0:	06da      	lsls	r2, r3, #27
 8005ee2:	d407      	bmi.n	8005ef4 <__swsetup_r+0x30>
 8005ee4:	2209      	movs	r2, #9
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	e033      	b.n	8005f5c <__swsetup_r+0x98>
 8005ef4:	0758      	lsls	r0, r3, #29
 8005ef6:	d512      	bpl.n	8005f1e <__swsetup_r+0x5a>
 8005ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005efa:	b141      	cbz	r1, 8005f0e <__swsetup_r+0x4a>
 8005efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d002      	beq.n	8005f0a <__swsetup_r+0x46>
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 ff0b 	bl	8006d20 <_free_r>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	2300      	movs	r3, #0
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	f043 0308 	orr.w	r3, r3, #8
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	b94b      	cbnz	r3, 8005f3e <__swsetup_r+0x7a>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f34:	d003      	beq.n	8005f3e <__swsetup_r+0x7a>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f001 fd7f 	bl	8007a3c <__smakebuf_r>
 8005f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f42:	f013 0201 	ands.w	r2, r3, #1
 8005f46:	d00a      	beq.n	8005f5e <__swsetup_r+0x9a>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	60a2      	str	r2, [r4, #8]
 8005f4c:	6962      	ldr	r2, [r4, #20]
 8005f4e:	4252      	negs	r2, r2
 8005f50:	61a2      	str	r2, [r4, #24]
 8005f52:	6922      	ldr	r2, [r4, #16]
 8005f54:	b942      	cbnz	r2, 8005f68 <__swsetup_r+0xa4>
 8005f56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f5a:	d1c5      	bne.n	8005ee8 <__swsetup_r+0x24>
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	0799      	lsls	r1, r3, #30
 8005f60:	bf58      	it	pl
 8005f62:	6962      	ldrpl	r2, [r4, #20]
 8005f64:	60a2      	str	r2, [r4, #8]
 8005f66:	e7f4      	b.n	8005f52 <__swsetup_r+0x8e>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7f7      	b.n	8005f5c <__swsetup_r+0x98>
 8005f6c:	20000028 	.word	0x20000028

08005f70 <memset>:
 8005f70:	4402      	add	r2, r0
 8005f72:	4603      	mov	r3, r0
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d100      	bne.n	8005f7a <memset+0xa>
 8005f78:	4770      	bx	lr
 8005f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7e:	e7f9      	b.n	8005f74 <memset+0x4>

08005f80 <_localeconv_r>:
 8005f80:	4800      	ldr	r0, [pc, #0]	@ (8005f84 <_localeconv_r+0x4>)
 8005f82:	4770      	bx	lr
 8005f84:	20000168 	.word	0x20000168

08005f88 <_close_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d06      	ldr	r5, [pc, #24]	@ (8005fa4 <_close_r+0x1c>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	f7fb ff61 	bl	8001e5a <_close>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_close_r+0x1a>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_close_r+0x1a>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	2000052c 	.word	0x2000052c

08005fa8 <_lseek_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	@ (8005fc8 <_lseek_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fb ff76 	bl	8001ea8 <_lseek>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_lseek_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_lseek_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	2000052c 	.word	0x2000052c

08005fcc <_read_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	@ (8005fec <_read_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fb ff04 	bl	8001de8 <_read>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_read_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_read_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	2000052c 	.word	0x2000052c

08005ff0 <_write_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	@ (8006010 <_write_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fb ff0f 	bl	8001e22 <_write>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_write_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_write_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	2000052c 	.word	0x2000052c

08006014 <__errno>:
 8006014:	4b01      	ldr	r3, [pc, #4]	@ (800601c <__errno+0x8>)
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000028 	.word	0x20000028

08006020 <__libc_init_array>:
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	4d0d      	ldr	r5, [pc, #52]	@ (8006058 <__libc_init_array+0x38>)
 8006024:	4c0d      	ldr	r4, [pc, #52]	@ (800605c <__libc_init_array+0x3c>)
 8006026:	1b64      	subs	r4, r4, r5
 8006028:	10a4      	asrs	r4, r4, #2
 800602a:	2600      	movs	r6, #0
 800602c:	42a6      	cmp	r6, r4
 800602e:	d109      	bne.n	8006044 <__libc_init_array+0x24>
 8006030:	4d0b      	ldr	r5, [pc, #44]	@ (8006060 <__libc_init_array+0x40>)
 8006032:	4c0c      	ldr	r4, [pc, #48]	@ (8006064 <__libc_init_array+0x44>)
 8006034:	f001 fe2e 	bl	8007c94 <_init>
 8006038:	1b64      	subs	r4, r4, r5
 800603a:	10a4      	asrs	r4, r4, #2
 800603c:	2600      	movs	r6, #0
 800603e:	42a6      	cmp	r6, r4
 8006040:	d105      	bne.n	800604e <__libc_init_array+0x2e>
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	f855 3b04 	ldr.w	r3, [r5], #4
 8006048:	4798      	blx	r3
 800604a:	3601      	adds	r6, #1
 800604c:	e7ee      	b.n	800602c <__libc_init_array+0xc>
 800604e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006052:	4798      	blx	r3
 8006054:	3601      	adds	r6, #1
 8006056:	e7f2      	b.n	800603e <__libc_init_array+0x1e>
 8006058:	080080d4 	.word	0x080080d4
 800605c:	080080d4 	.word	0x080080d4
 8006060:	080080d4 	.word	0x080080d4
 8006064:	080080d8 	.word	0x080080d8

08006068 <__retarget_lock_init_recursive>:
 8006068:	4770      	bx	lr

0800606a <__retarget_lock_acquire_recursive>:
 800606a:	4770      	bx	lr

0800606c <__retarget_lock_release_recursive>:
 800606c:	4770      	bx	lr

0800606e <quorem>:
 800606e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006072:	6903      	ldr	r3, [r0, #16]
 8006074:	690c      	ldr	r4, [r1, #16]
 8006076:	42a3      	cmp	r3, r4
 8006078:	4607      	mov	r7, r0
 800607a:	db7e      	blt.n	800617a <quorem+0x10c>
 800607c:	3c01      	subs	r4, #1
 800607e:	f101 0814 	add.w	r8, r1, #20
 8006082:	00a3      	lsls	r3, r4, #2
 8006084:	f100 0514 	add.w	r5, r0, #20
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006098:	3301      	adds	r3, #1
 800609a:	429a      	cmp	r2, r3
 800609c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80060a4:	d32e      	bcc.n	8006104 <quorem+0x96>
 80060a6:	f04f 0a00 	mov.w	sl, #0
 80060aa:	46c4      	mov	ip, r8
 80060ac:	46ae      	mov	lr, r5
 80060ae:	46d3      	mov	fp, sl
 80060b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060b4:	b298      	uxth	r0, r3
 80060b6:	fb06 a000 	mla	r0, r6, r0, sl
 80060ba:	0c02      	lsrs	r2, r0, #16
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	fb06 2303 	mla	r3, r6, r3, r2
 80060c2:	f8de 2000 	ldr.w	r2, [lr]
 80060c6:	b280      	uxth	r0, r0
 80060c8:	b292      	uxth	r2, r2
 80060ca:	1a12      	subs	r2, r2, r0
 80060cc:	445a      	add	r2, fp
 80060ce:	f8de 0000 	ldr.w	r0, [lr]
 80060d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060e0:	b292      	uxth	r2, r2
 80060e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060e6:	45e1      	cmp	r9, ip
 80060e8:	f84e 2b04 	str.w	r2, [lr], #4
 80060ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060f0:	d2de      	bcs.n	80060b0 <quorem+0x42>
 80060f2:	9b00      	ldr	r3, [sp, #0]
 80060f4:	58eb      	ldr	r3, [r5, r3]
 80060f6:	b92b      	cbnz	r3, 8006104 <quorem+0x96>
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	3b04      	subs	r3, #4
 80060fc:	429d      	cmp	r5, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	d32f      	bcc.n	8006162 <quorem+0xf4>
 8006102:	613c      	str	r4, [r7, #16]
 8006104:	4638      	mov	r0, r7
 8006106:	f001 f97d 	bl	8007404 <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	db25      	blt.n	800615a <quorem+0xec>
 800610e:	4629      	mov	r1, r5
 8006110:	2000      	movs	r0, #0
 8006112:	f858 2b04 	ldr.w	r2, [r8], #4
 8006116:	f8d1 c000 	ldr.w	ip, [r1]
 800611a:	fa1f fe82 	uxth.w	lr, r2
 800611e:	fa1f f38c 	uxth.w	r3, ip
 8006122:	eba3 030e 	sub.w	r3, r3, lr
 8006126:	4403      	add	r3, r0
 8006128:	0c12      	lsrs	r2, r2, #16
 800612a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800612e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006138:	45c1      	cmp	r9, r8
 800613a:	f841 3b04 	str.w	r3, [r1], #4
 800613e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006142:	d2e6      	bcs.n	8006112 <quorem+0xa4>
 8006144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006148:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800614c:	b922      	cbnz	r2, 8006158 <quorem+0xea>
 800614e:	3b04      	subs	r3, #4
 8006150:	429d      	cmp	r5, r3
 8006152:	461a      	mov	r2, r3
 8006154:	d30b      	bcc.n	800616e <quorem+0x100>
 8006156:	613c      	str	r4, [r7, #16]
 8006158:	3601      	adds	r6, #1
 800615a:	4630      	mov	r0, r6
 800615c:	b003      	add	sp, #12
 800615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	3b04      	subs	r3, #4
 8006166:	2a00      	cmp	r2, #0
 8006168:	d1cb      	bne.n	8006102 <quorem+0x94>
 800616a:	3c01      	subs	r4, #1
 800616c:	e7c6      	b.n	80060fc <quorem+0x8e>
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	3b04      	subs	r3, #4
 8006172:	2a00      	cmp	r2, #0
 8006174:	d1ef      	bne.n	8006156 <quorem+0xe8>
 8006176:	3c01      	subs	r4, #1
 8006178:	e7ea      	b.n	8006150 <quorem+0xe2>
 800617a:	2000      	movs	r0, #0
 800617c:	e7ee      	b.n	800615c <quorem+0xee>
	...

08006180 <_dtoa_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	69c7      	ldr	r7, [r0, #28]
 8006186:	b097      	sub	sp, #92	@ 0x5c
 8006188:	ed8d 0b04 	vstr	d0, [sp, #16]
 800618c:	ec55 4b10 	vmov	r4, r5, d0
 8006190:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006192:	9107      	str	r1, [sp, #28]
 8006194:	4681      	mov	r9, r0
 8006196:	920c      	str	r2, [sp, #48]	@ 0x30
 8006198:	9311      	str	r3, [sp, #68]	@ 0x44
 800619a:	b97f      	cbnz	r7, 80061bc <_dtoa_r+0x3c>
 800619c:	2010      	movs	r0, #16
 800619e:	f000 fe09 	bl	8006db4 <malloc>
 80061a2:	4602      	mov	r2, r0
 80061a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80061a8:	b920      	cbnz	r0, 80061b4 <_dtoa_r+0x34>
 80061aa:	4ba9      	ldr	r3, [pc, #676]	@ (8006450 <_dtoa_r+0x2d0>)
 80061ac:	21ef      	movs	r1, #239	@ 0xef
 80061ae:	48a9      	ldr	r0, [pc, #676]	@ (8006454 <_dtoa_r+0x2d4>)
 80061b0:	f001 fcc0 	bl	8007b34 <__assert_func>
 80061b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061b8:	6007      	str	r7, [r0, #0]
 80061ba:	60c7      	str	r7, [r0, #12]
 80061bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	b159      	cbz	r1, 80061dc <_dtoa_r+0x5c>
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	604a      	str	r2, [r1, #4]
 80061c8:	2301      	movs	r3, #1
 80061ca:	4093      	lsls	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
 80061ce:	4648      	mov	r0, r9
 80061d0:	f000 fee6 	bl	8006fa0 <_Bfree>
 80061d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	1e2b      	subs	r3, r5, #0
 80061de:	bfb9      	ittee	lt
 80061e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061e4:	9305      	strlt	r3, [sp, #20]
 80061e6:	2300      	movge	r3, #0
 80061e8:	6033      	strge	r3, [r6, #0]
 80061ea:	9f05      	ldr	r7, [sp, #20]
 80061ec:	4b9a      	ldr	r3, [pc, #616]	@ (8006458 <_dtoa_r+0x2d8>)
 80061ee:	bfbc      	itt	lt
 80061f0:	2201      	movlt	r2, #1
 80061f2:	6032      	strlt	r2, [r6, #0]
 80061f4:	43bb      	bics	r3, r7
 80061f6:	d112      	bne.n	800621e <_dtoa_r+0x9e>
 80061f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80061fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006204:	4323      	orrs	r3, r4
 8006206:	f000 855a 	beq.w	8006cbe <_dtoa_r+0xb3e>
 800620a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800620c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800646c <_dtoa_r+0x2ec>
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 855c 	beq.w	8006cce <_dtoa_r+0xb4e>
 8006216:	f10a 0303 	add.w	r3, sl, #3
 800621a:	f000 bd56 	b.w	8006cca <_dtoa_r+0xb4a>
 800621e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006222:	2200      	movs	r2, #0
 8006224:	ec51 0b17 	vmov	r0, r1, d7
 8006228:	2300      	movs	r3, #0
 800622a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800622e:	f7fa fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006232:	4680      	mov	r8, r0
 8006234:	b158      	cbz	r0, 800624e <_dtoa_r+0xce>
 8006236:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006238:	2301      	movs	r3, #1
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800623e:	b113      	cbz	r3, 8006246 <_dtoa_r+0xc6>
 8006240:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006242:	4b86      	ldr	r3, [pc, #536]	@ (800645c <_dtoa_r+0x2dc>)
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006470 <_dtoa_r+0x2f0>
 800624a:	f000 bd40 	b.w	8006cce <_dtoa_r+0xb4e>
 800624e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006252:	aa14      	add	r2, sp, #80	@ 0x50
 8006254:	a915      	add	r1, sp, #84	@ 0x54
 8006256:	4648      	mov	r0, r9
 8006258:	f001 f984 	bl	8007564 <__d2b>
 800625c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006260:	9002      	str	r0, [sp, #8]
 8006262:	2e00      	cmp	r6, #0
 8006264:	d078      	beq.n	8006358 <_dtoa_r+0x1d8>
 8006266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006268:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800626c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800627c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006280:	4619      	mov	r1, r3
 8006282:	2200      	movs	r2, #0
 8006284:	4b76      	ldr	r3, [pc, #472]	@ (8006460 <_dtoa_r+0x2e0>)
 8006286:	f7f9 ffff 	bl	8000288 <__aeabi_dsub>
 800628a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006438 <_dtoa_r+0x2b8>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f7fa f9b2 	bl	80005f8 <__aeabi_dmul>
 8006294:	a36a      	add	r3, pc, #424	@ (adr r3, 8006440 <_dtoa_r+0x2c0>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7f9 fff7 	bl	800028c <__adddf3>
 800629e:	4604      	mov	r4, r0
 80062a0:	4630      	mov	r0, r6
 80062a2:	460d      	mov	r5, r1
 80062a4:	f7fa f93e 	bl	8000524 <__aeabi_i2d>
 80062a8:	a367      	add	r3, pc, #412	@ (adr r3, 8006448 <_dtoa_r+0x2c8>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f9a3 	bl	80005f8 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7f9 ffe7 	bl	800028c <__adddf3>
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	f7fa fc49 	bl	8000b58 <__aeabi_d2iz>
 80062c6:	2200      	movs	r2, #0
 80062c8:	4607      	mov	r7, r0
 80062ca:	2300      	movs	r3, #0
 80062cc:	4620      	mov	r0, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7fa fc04 	bl	8000adc <__aeabi_dcmplt>
 80062d4:	b140      	cbz	r0, 80062e8 <_dtoa_r+0x168>
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7fa f924 	bl	8000524 <__aeabi_i2d>
 80062dc:	4622      	mov	r2, r4
 80062de:	462b      	mov	r3, r5
 80062e0:	f7fa fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e4:	b900      	cbnz	r0, 80062e8 <_dtoa_r+0x168>
 80062e6:	3f01      	subs	r7, #1
 80062e8:	2f16      	cmp	r7, #22
 80062ea:	d852      	bhi.n	8006392 <_dtoa_r+0x212>
 80062ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006464 <_dtoa_r+0x2e4>)
 80062ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062fa:	f7fa fbef 	bl	8000adc <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d049      	beq.n	8006396 <_dtoa_r+0x216>
 8006302:	3f01      	subs	r7, #1
 8006304:	2300      	movs	r3, #0
 8006306:	9310      	str	r3, [sp, #64]	@ 0x40
 8006308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800630a:	1b9b      	subs	r3, r3, r6
 800630c:	1e5a      	subs	r2, r3, #1
 800630e:	bf45      	ittet	mi
 8006310:	f1c3 0301 	rsbmi	r3, r3, #1
 8006314:	9300      	strmi	r3, [sp, #0]
 8006316:	2300      	movpl	r3, #0
 8006318:	2300      	movmi	r3, #0
 800631a:	9206      	str	r2, [sp, #24]
 800631c:	bf54      	ite	pl
 800631e:	9300      	strpl	r3, [sp, #0]
 8006320:	9306      	strmi	r3, [sp, #24]
 8006322:	2f00      	cmp	r7, #0
 8006324:	db39      	blt.n	800639a <_dtoa_r+0x21a>
 8006326:	9b06      	ldr	r3, [sp, #24]
 8006328:	970d      	str	r7, [sp, #52]	@ 0x34
 800632a:	443b      	add	r3, r7
 800632c:	9306      	str	r3, [sp, #24]
 800632e:	2300      	movs	r3, #0
 8006330:	9308      	str	r3, [sp, #32]
 8006332:	9b07      	ldr	r3, [sp, #28]
 8006334:	2b09      	cmp	r3, #9
 8006336:	d863      	bhi.n	8006400 <_dtoa_r+0x280>
 8006338:	2b05      	cmp	r3, #5
 800633a:	bfc4      	itt	gt
 800633c:	3b04      	subgt	r3, #4
 800633e:	9307      	strgt	r3, [sp, #28]
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	f1a3 0302 	sub.w	r3, r3, #2
 8006346:	bfcc      	ite	gt
 8006348:	2400      	movgt	r4, #0
 800634a:	2401      	movle	r4, #1
 800634c:	2b03      	cmp	r3, #3
 800634e:	d863      	bhi.n	8006418 <_dtoa_r+0x298>
 8006350:	e8df f003 	tbb	[pc, r3]
 8006354:	2b375452 	.word	0x2b375452
 8006358:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800635c:	441e      	add	r6, r3
 800635e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006362:	2b20      	cmp	r3, #32
 8006364:	bfc1      	itttt	gt
 8006366:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800636a:	409f      	lslgt	r7, r3
 800636c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006370:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006374:	bfd6      	itet	le
 8006376:	f1c3 0320 	rsble	r3, r3, #32
 800637a:	ea47 0003 	orrgt.w	r0, r7, r3
 800637e:	fa04 f003 	lslle.w	r0, r4, r3
 8006382:	f7fa f8bf 	bl	8000504 <__aeabi_ui2d>
 8006386:	2201      	movs	r2, #1
 8006388:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800638c:	3e01      	subs	r6, #1
 800638e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006390:	e776      	b.n	8006280 <_dtoa_r+0x100>
 8006392:	2301      	movs	r3, #1
 8006394:	e7b7      	b.n	8006306 <_dtoa_r+0x186>
 8006396:	9010      	str	r0, [sp, #64]	@ 0x40
 8006398:	e7b6      	b.n	8006308 <_dtoa_r+0x188>
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	1bdb      	subs	r3, r3, r7
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	427b      	negs	r3, r7
 80063a2:	9308      	str	r3, [sp, #32]
 80063a4:	2300      	movs	r3, #0
 80063a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80063a8:	e7c3      	b.n	8006332 <_dtoa_r+0x1b2>
 80063aa:	2301      	movs	r3, #1
 80063ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063b0:	eb07 0b03 	add.w	fp, r7, r3
 80063b4:	f10b 0301 	add.w	r3, fp, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	bfb8      	it	lt
 80063be:	2301      	movlt	r3, #1
 80063c0:	e006      	b.n	80063d0 <_dtoa_r+0x250>
 80063c2:	2301      	movs	r3, #1
 80063c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd28      	ble.n	800641e <_dtoa_r+0x29e>
 80063cc:	469b      	mov	fp, r3
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80063d4:	2100      	movs	r1, #0
 80063d6:	2204      	movs	r2, #4
 80063d8:	f102 0514 	add.w	r5, r2, #20
 80063dc:	429d      	cmp	r5, r3
 80063de:	d926      	bls.n	800642e <_dtoa_r+0x2ae>
 80063e0:	6041      	str	r1, [r0, #4]
 80063e2:	4648      	mov	r0, r9
 80063e4:	f000 fd9c 	bl	8006f20 <_Balloc>
 80063e8:	4682      	mov	sl, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d142      	bne.n	8006474 <_dtoa_r+0x2f4>
 80063ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <_dtoa_r+0x2e8>)
 80063f0:	4602      	mov	r2, r0
 80063f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80063f6:	e6da      	b.n	80061ae <_dtoa_r+0x2e>
 80063f8:	2300      	movs	r3, #0
 80063fa:	e7e3      	b.n	80063c4 <_dtoa_r+0x244>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7d5      	b.n	80063ac <_dtoa_r+0x22c>
 8006400:	2401      	movs	r4, #1
 8006402:	2300      	movs	r3, #0
 8006404:	9307      	str	r3, [sp, #28]
 8006406:	9409      	str	r4, [sp, #36]	@ 0x24
 8006408:	f04f 3bff 	mov.w	fp, #4294967295
 800640c:	2200      	movs	r2, #0
 800640e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006412:	2312      	movs	r3, #18
 8006414:	920c      	str	r2, [sp, #48]	@ 0x30
 8006416:	e7db      	b.n	80063d0 <_dtoa_r+0x250>
 8006418:	2301      	movs	r3, #1
 800641a:	9309      	str	r3, [sp, #36]	@ 0x24
 800641c:	e7f4      	b.n	8006408 <_dtoa_r+0x288>
 800641e:	f04f 0b01 	mov.w	fp, #1
 8006422:	f8cd b00c 	str.w	fp, [sp, #12]
 8006426:	465b      	mov	r3, fp
 8006428:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800642c:	e7d0      	b.n	80063d0 <_dtoa_r+0x250>
 800642e:	3101      	adds	r1, #1
 8006430:	0052      	lsls	r2, r2, #1
 8006432:	e7d1      	b.n	80063d8 <_dtoa_r+0x258>
 8006434:	f3af 8000 	nop.w
 8006438:	636f4361 	.word	0x636f4361
 800643c:	3fd287a7 	.word	0x3fd287a7
 8006440:	8b60c8b3 	.word	0x8b60c8b3
 8006444:	3fc68a28 	.word	0x3fc68a28
 8006448:	509f79fb 	.word	0x509f79fb
 800644c:	3fd34413 	.word	0x3fd34413
 8006450:	08007d95 	.word	0x08007d95
 8006454:	08007dac 	.word	0x08007dac
 8006458:	7ff00000 	.word	0x7ff00000
 800645c:	08007d65 	.word	0x08007d65
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	08007f00 	.word	0x08007f00
 8006468:	08007e04 	.word	0x08007e04
 800646c:	08007d91 	.word	0x08007d91
 8006470:	08007d64 	.word	0x08007d64
 8006474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006478:	6018      	str	r0, [r3, #0]
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	2b0e      	cmp	r3, #14
 800647e:	f200 80a1 	bhi.w	80065c4 <_dtoa_r+0x444>
 8006482:	2c00      	cmp	r4, #0
 8006484:	f000 809e 	beq.w	80065c4 <_dtoa_r+0x444>
 8006488:	2f00      	cmp	r7, #0
 800648a:	dd33      	ble.n	80064f4 <_dtoa_r+0x374>
 800648c:	4b9c      	ldr	r3, [pc, #624]	@ (8006700 <_dtoa_r+0x580>)
 800648e:	f007 020f 	and.w	r2, r7, #15
 8006492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006496:	ed93 7b00 	vldr	d7, [r3]
 800649a:	05f8      	lsls	r0, r7, #23
 800649c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80064a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064a4:	d516      	bpl.n	80064d4 <_dtoa_r+0x354>
 80064a6:	4b97      	ldr	r3, [pc, #604]	@ (8006704 <_dtoa_r+0x584>)
 80064a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064b0:	f7fa f9cc 	bl	800084c <__aeabi_ddiv>
 80064b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b8:	f004 040f 	and.w	r4, r4, #15
 80064bc:	2603      	movs	r6, #3
 80064be:	4d91      	ldr	r5, [pc, #580]	@ (8006704 <_dtoa_r+0x584>)
 80064c0:	b954      	cbnz	r4, 80064d8 <_dtoa_r+0x358>
 80064c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ca:	f7fa f9bf 	bl	800084c <__aeabi_ddiv>
 80064ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d2:	e028      	b.n	8006526 <_dtoa_r+0x3a6>
 80064d4:	2602      	movs	r6, #2
 80064d6:	e7f2      	b.n	80064be <_dtoa_r+0x33e>
 80064d8:	07e1      	lsls	r1, r4, #31
 80064da:	d508      	bpl.n	80064ee <_dtoa_r+0x36e>
 80064dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80064e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80064ec:	3601      	adds	r6, #1
 80064ee:	1064      	asrs	r4, r4, #1
 80064f0:	3508      	adds	r5, #8
 80064f2:	e7e5      	b.n	80064c0 <_dtoa_r+0x340>
 80064f4:	f000 80af 	beq.w	8006656 <_dtoa_r+0x4d6>
 80064f8:	427c      	negs	r4, r7
 80064fa:	4b81      	ldr	r3, [pc, #516]	@ (8006700 <_dtoa_r+0x580>)
 80064fc:	4d81      	ldr	r5, [pc, #516]	@ (8006704 <_dtoa_r+0x584>)
 80064fe:	f004 020f 	and.w	r2, r4, #15
 8006502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800650e:	f7fa f873 	bl	80005f8 <__aeabi_dmul>
 8006512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006516:	1124      	asrs	r4, r4, #4
 8006518:	2300      	movs	r3, #0
 800651a:	2602      	movs	r6, #2
 800651c:	2c00      	cmp	r4, #0
 800651e:	f040 808f 	bne.w	8006640 <_dtoa_r+0x4c0>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1d3      	bne.n	80064ce <_dtoa_r+0x34e>
 8006526:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006528:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8094 	beq.w	800665a <_dtoa_r+0x4da>
 8006532:	4b75      	ldr	r3, [pc, #468]	@ (8006708 <_dtoa_r+0x588>)
 8006534:	2200      	movs	r2, #0
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa facf 	bl	8000adc <__aeabi_dcmplt>
 800653e:	2800      	cmp	r0, #0
 8006540:	f000 808b 	beq.w	800665a <_dtoa_r+0x4da>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8087 	beq.w	800665a <_dtoa_r+0x4da>
 800654c:	f1bb 0f00 	cmp.w	fp, #0
 8006550:	dd34      	ble.n	80065bc <_dtoa_r+0x43c>
 8006552:	4620      	mov	r0, r4
 8006554:	4b6d      	ldr	r3, [pc, #436]	@ (800670c <_dtoa_r+0x58c>)
 8006556:	2200      	movs	r2, #0
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006562:	f107 38ff 	add.w	r8, r7, #4294967295
 8006566:	3601      	adds	r6, #1
 8006568:	465c      	mov	r4, fp
 800656a:	4630      	mov	r0, r6
 800656c:	f7f9 ffda 	bl	8000524 <__aeabi_i2d>
 8006570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006574:	f7fa f840 	bl	80005f8 <__aeabi_dmul>
 8006578:	4b65      	ldr	r3, [pc, #404]	@ (8006710 <_dtoa_r+0x590>)
 800657a:	2200      	movs	r2, #0
 800657c:	f7f9 fe86 	bl	800028c <__adddf3>
 8006580:	4605      	mov	r5, r0
 8006582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006586:	2c00      	cmp	r4, #0
 8006588:	d16a      	bne.n	8006660 <_dtoa_r+0x4e0>
 800658a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800658e:	4b61      	ldr	r3, [pc, #388]	@ (8006714 <_dtoa_r+0x594>)
 8006590:	2200      	movs	r2, #0
 8006592:	f7f9 fe79 	bl	8000288 <__aeabi_dsub>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800659e:	462a      	mov	r2, r5
 80065a0:	4633      	mov	r3, r6
 80065a2:	f7fa fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8298 	bne.w	8006adc <_dtoa_r+0x95c>
 80065ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b0:	462a      	mov	r2, r5
 80065b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065b6:	f7fa fa91 	bl	8000adc <__aeabi_dcmplt>
 80065ba:	bb38      	cbnz	r0, 800660c <_dtoa_r+0x48c>
 80065bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80065c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f2c0 8157 	blt.w	800687a <_dtoa_r+0x6fa>
 80065cc:	2f0e      	cmp	r7, #14
 80065ce:	f300 8154 	bgt.w	800687a <_dtoa_r+0x6fa>
 80065d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006700 <_dtoa_r+0x580>)
 80065d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d8:	ed93 7b00 	vldr	d7, [r3]
 80065dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065de:	2b00      	cmp	r3, #0
 80065e0:	ed8d 7b00 	vstr	d7, [sp]
 80065e4:	f280 80e5 	bge.w	80067b2 <_dtoa_r+0x632>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f300 80e1 	bgt.w	80067b2 <_dtoa_r+0x632>
 80065f0:	d10c      	bne.n	800660c <_dtoa_r+0x48c>
 80065f2:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <_dtoa_r+0x594>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	ec51 0b17 	vmov	r0, r1, d7
 80065fa:	f7f9 fffd 	bl	80005f8 <__aeabi_dmul>
 80065fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006602:	f7fa fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8006606:	2800      	cmp	r0, #0
 8006608:	f000 8266 	beq.w	8006ad8 <_dtoa_r+0x958>
 800660c:	2400      	movs	r4, #0
 800660e:	4625      	mov	r5, r4
 8006610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006612:	4656      	mov	r6, sl
 8006614:	ea6f 0803 	mvn.w	r8, r3
 8006618:	2700      	movs	r7, #0
 800661a:	4621      	mov	r1, r4
 800661c:	4648      	mov	r0, r9
 800661e:	f000 fcbf 	bl	8006fa0 <_Bfree>
 8006622:	2d00      	cmp	r5, #0
 8006624:	f000 80bd 	beq.w	80067a2 <_dtoa_r+0x622>
 8006628:	b12f      	cbz	r7, 8006636 <_dtoa_r+0x4b6>
 800662a:	42af      	cmp	r7, r5
 800662c:	d003      	beq.n	8006636 <_dtoa_r+0x4b6>
 800662e:	4639      	mov	r1, r7
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fcb5 	bl	8006fa0 <_Bfree>
 8006636:	4629      	mov	r1, r5
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fcb1 	bl	8006fa0 <_Bfree>
 800663e:	e0b0      	b.n	80067a2 <_dtoa_r+0x622>
 8006640:	07e2      	lsls	r2, r4, #31
 8006642:	d505      	bpl.n	8006650 <_dtoa_r+0x4d0>
 8006644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006648:	f7f9 ffd6 	bl	80005f8 <__aeabi_dmul>
 800664c:	3601      	adds	r6, #1
 800664e:	2301      	movs	r3, #1
 8006650:	1064      	asrs	r4, r4, #1
 8006652:	3508      	adds	r5, #8
 8006654:	e762      	b.n	800651c <_dtoa_r+0x39c>
 8006656:	2602      	movs	r6, #2
 8006658:	e765      	b.n	8006526 <_dtoa_r+0x3a6>
 800665a:	9c03      	ldr	r4, [sp, #12]
 800665c:	46b8      	mov	r8, r7
 800665e:	e784      	b.n	800656a <_dtoa_r+0x3ea>
 8006660:	4b27      	ldr	r3, [pc, #156]	@ (8006700 <_dtoa_r+0x580>)
 8006662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800666c:	4454      	add	r4, sl
 800666e:	2900      	cmp	r1, #0
 8006670:	d054      	beq.n	800671c <_dtoa_r+0x59c>
 8006672:	4929      	ldr	r1, [pc, #164]	@ (8006718 <_dtoa_r+0x598>)
 8006674:	2000      	movs	r0, #0
 8006676:	f7fa f8e9 	bl	800084c <__aeabi_ddiv>
 800667a:	4633      	mov	r3, r6
 800667c:	462a      	mov	r2, r5
 800667e:	f7f9 fe03 	bl	8000288 <__aeabi_dsub>
 8006682:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006686:	4656      	mov	r6, sl
 8006688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668c:	f7fa fa64 	bl	8000b58 <__aeabi_d2iz>
 8006690:	4605      	mov	r5, r0
 8006692:	f7f9 ff47 	bl	8000524 <__aeabi_i2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800669e:	f7f9 fdf3 	bl	8000288 <__aeabi_dsub>
 80066a2:	3530      	adds	r5, #48	@ 0x30
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ac:	f806 5b01 	strb.w	r5, [r6], #1
 80066b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066b4:	f7fa fa12 	bl	8000adc <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d172      	bne.n	80067a2 <_dtoa_r+0x622>
 80066bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c0:	4911      	ldr	r1, [pc, #68]	@ (8006708 <_dtoa_r+0x588>)
 80066c2:	2000      	movs	r0, #0
 80066c4:	f7f9 fde0 	bl	8000288 <__aeabi_dsub>
 80066c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066cc:	f7fa fa06 	bl	8000adc <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 80b4 	bne.w	800683e <_dtoa_r+0x6be>
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	f43f af70 	beq.w	80065bc <_dtoa_r+0x43c>
 80066dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80066e0:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <_dtoa_r+0x58c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	f7f9 ff88 	bl	80005f8 <__aeabi_dmul>
 80066e8:	4b08      	ldr	r3, [pc, #32]	@ (800670c <_dtoa_r+0x58c>)
 80066ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066ee:	2200      	movs	r2, #0
 80066f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066fc:	e7c4      	b.n	8006688 <_dtoa_r+0x508>
 80066fe:	bf00      	nop
 8006700:	08007f00 	.word	0x08007f00
 8006704:	08007ed8 	.word	0x08007ed8
 8006708:	3ff00000 	.word	0x3ff00000
 800670c:	40240000 	.word	0x40240000
 8006710:	401c0000 	.word	0x401c0000
 8006714:	40140000 	.word	0x40140000
 8006718:	3fe00000 	.word	0x3fe00000
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	f7f9 ff6a 	bl	80005f8 <__aeabi_dmul>
 8006724:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006728:	9413      	str	r4, [sp, #76]	@ 0x4c
 800672a:	4656      	mov	r6, sl
 800672c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006730:	f7fa fa12 	bl	8000b58 <__aeabi_d2iz>
 8006734:	4605      	mov	r5, r0
 8006736:	f7f9 fef5 	bl	8000524 <__aeabi_i2d>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006742:	f7f9 fda1 	bl	8000288 <__aeabi_dsub>
 8006746:	3530      	adds	r5, #48	@ 0x30
 8006748:	f806 5b01 	strb.w	r5, [r6], #1
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	42a6      	cmp	r6, r4
 8006752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	d124      	bne.n	80067a6 <_dtoa_r+0x626>
 800675c:	4baf      	ldr	r3, [pc, #700]	@ (8006a1c <_dtoa_r+0x89c>)
 800675e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006762:	f7f9 fd93 	bl	800028c <__adddf3>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800676e:	f7fa f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	d163      	bne.n	800683e <_dtoa_r+0x6be>
 8006776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800677a:	49a8      	ldr	r1, [pc, #672]	@ (8006a1c <_dtoa_r+0x89c>)
 800677c:	2000      	movs	r0, #0
 800677e:	f7f9 fd83 	bl	8000288 <__aeabi_dsub>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678a:	f7fa f9a7 	bl	8000adc <__aeabi_dcmplt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f43f af14 	beq.w	80065bc <_dtoa_r+0x43c>
 8006794:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006796:	1e73      	subs	r3, r6, #1
 8006798:	9313      	str	r3, [sp, #76]	@ 0x4c
 800679a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800679e:	2b30      	cmp	r3, #48	@ 0x30
 80067a0:	d0f8      	beq.n	8006794 <_dtoa_r+0x614>
 80067a2:	4647      	mov	r7, r8
 80067a4:	e03b      	b.n	800681e <_dtoa_r+0x69e>
 80067a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006a20 <_dtoa_r+0x8a0>)
 80067a8:	f7f9 ff26 	bl	80005f8 <__aeabi_dmul>
 80067ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b0:	e7bc      	b.n	800672c <_dtoa_r+0x5ac>
 80067b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80067b6:	4656      	mov	r6, sl
 80067b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7fa f844 	bl	800084c <__aeabi_ddiv>
 80067c4:	f7fa f9c8 	bl	8000b58 <__aeabi_d2iz>
 80067c8:	4680      	mov	r8, r0
 80067ca:	f7f9 feab 	bl	8000524 <__aeabi_i2d>
 80067ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d2:	f7f9 ff11 	bl	80005f8 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80067e2:	f7f9 fd51 	bl	8000288 <__aeabi_dsub>
 80067e6:	f806 4b01 	strb.w	r4, [r6], #1
 80067ea:	9d03      	ldr	r5, [sp, #12]
 80067ec:	eba6 040a 	sub.w	r4, r6, sl
 80067f0:	42a5      	cmp	r5, r4
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	d133      	bne.n	8006860 <_dtoa_r+0x6e0>
 80067f8:	f7f9 fd48 	bl	800028c <__adddf3>
 80067fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	f7fa f988 	bl	8000b18 <__aeabi_dcmpgt>
 8006808:	b9c0      	cbnz	r0, 800683c <_dtoa_r+0x6bc>
 800680a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8006816:	b110      	cbz	r0, 800681e <_dtoa_r+0x69e>
 8006818:	f018 0f01 	tst.w	r8, #1
 800681c:	d10e      	bne.n	800683c <_dtoa_r+0x6bc>
 800681e:	9902      	ldr	r1, [sp, #8]
 8006820:	4648      	mov	r0, r9
 8006822:	f000 fbbd 	bl	8006fa0 <_Bfree>
 8006826:	2300      	movs	r3, #0
 8006828:	7033      	strb	r3, [r6, #0]
 800682a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800682c:	3701      	adds	r7, #1
 800682e:	601f      	str	r7, [r3, #0]
 8006830:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 824b 	beq.w	8006cce <_dtoa_r+0xb4e>
 8006838:	601e      	str	r6, [r3, #0]
 800683a:	e248      	b.n	8006cce <_dtoa_r+0xb4e>
 800683c:	46b8      	mov	r8, r7
 800683e:	4633      	mov	r3, r6
 8006840:	461e      	mov	r6, r3
 8006842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006846:	2a39      	cmp	r2, #57	@ 0x39
 8006848:	d106      	bne.n	8006858 <_dtoa_r+0x6d8>
 800684a:	459a      	cmp	sl, r3
 800684c:	d1f8      	bne.n	8006840 <_dtoa_r+0x6c0>
 800684e:	2230      	movs	r2, #48	@ 0x30
 8006850:	f108 0801 	add.w	r8, r8, #1
 8006854:	f88a 2000 	strb.w	r2, [sl]
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e7a0      	b.n	80067a2 <_dtoa_r+0x622>
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <_dtoa_r+0x8a0>)
 8006862:	2200      	movs	r2, #0
 8006864:	f7f9 fec8 	bl	80005f8 <__aeabi_dmul>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	f7fa f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006874:	2800      	cmp	r0, #0
 8006876:	d09f      	beq.n	80067b8 <_dtoa_r+0x638>
 8006878:	e7d1      	b.n	800681e <_dtoa_r+0x69e>
 800687a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800687c:	2a00      	cmp	r2, #0
 800687e:	f000 80ea 	beq.w	8006a56 <_dtoa_r+0x8d6>
 8006882:	9a07      	ldr	r2, [sp, #28]
 8006884:	2a01      	cmp	r2, #1
 8006886:	f300 80cd 	bgt.w	8006a24 <_dtoa_r+0x8a4>
 800688a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800688c:	2a00      	cmp	r2, #0
 800688e:	f000 80c1 	beq.w	8006a14 <_dtoa_r+0x894>
 8006892:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006896:	9c08      	ldr	r4, [sp, #32]
 8006898:	9e00      	ldr	r6, [sp, #0]
 800689a:	9a00      	ldr	r2, [sp, #0]
 800689c:	441a      	add	r2, r3
 800689e:	9200      	str	r2, [sp, #0]
 80068a0:	9a06      	ldr	r2, [sp, #24]
 80068a2:	2101      	movs	r1, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	4648      	mov	r0, r9
 80068a8:	9206      	str	r2, [sp, #24]
 80068aa:	f000 fc2d 	bl	8007108 <__i2b>
 80068ae:	4605      	mov	r5, r0
 80068b0:	b166      	cbz	r6, 80068cc <_dtoa_r+0x74c>
 80068b2:	9b06      	ldr	r3, [sp, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dd09      	ble.n	80068cc <_dtoa_r+0x74c>
 80068b8:	42b3      	cmp	r3, r6
 80068ba:	9a00      	ldr	r2, [sp, #0]
 80068bc:	bfa8      	it	ge
 80068be:	4633      	movge	r3, r6
 80068c0:	1ad2      	subs	r2, r2, r3
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	1af6      	subs	r6, r6, r3
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	9b08      	ldr	r3, [sp, #32]
 80068ce:	b30b      	cbz	r3, 8006914 <_dtoa_r+0x794>
 80068d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80c6 	beq.w	8006a64 <_dtoa_r+0x8e4>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	f000 80c0 	beq.w	8006a5e <_dtoa_r+0x8de>
 80068de:	4629      	mov	r1, r5
 80068e0:	4622      	mov	r2, r4
 80068e2:	4648      	mov	r0, r9
 80068e4:	f000 fcc8 	bl	8007278 <__pow5mult>
 80068e8:	9a02      	ldr	r2, [sp, #8]
 80068ea:	4601      	mov	r1, r0
 80068ec:	4605      	mov	r5, r0
 80068ee:	4648      	mov	r0, r9
 80068f0:	f000 fc20 	bl	8007134 <__multiply>
 80068f4:	9902      	ldr	r1, [sp, #8]
 80068f6:	4680      	mov	r8, r0
 80068f8:	4648      	mov	r0, r9
 80068fa:	f000 fb51 	bl	8006fa0 <_Bfree>
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	1b1b      	subs	r3, r3, r4
 8006902:	9308      	str	r3, [sp, #32]
 8006904:	f000 80b1 	beq.w	8006a6a <_dtoa_r+0x8ea>
 8006908:	9a08      	ldr	r2, [sp, #32]
 800690a:	4641      	mov	r1, r8
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fcb3 	bl	8007278 <__pow5mult>
 8006912:	9002      	str	r0, [sp, #8]
 8006914:	2101      	movs	r1, #1
 8006916:	4648      	mov	r0, r9
 8006918:	f000 fbf6 	bl	8007108 <__i2b>
 800691c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800691e:	4604      	mov	r4, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 81d8 	beq.w	8006cd6 <_dtoa_r+0xb56>
 8006926:	461a      	mov	r2, r3
 8006928:	4601      	mov	r1, r0
 800692a:	4648      	mov	r0, r9
 800692c:	f000 fca4 	bl	8007278 <__pow5mult>
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	2b01      	cmp	r3, #1
 8006934:	4604      	mov	r4, r0
 8006936:	f300 809f 	bgt.w	8006a78 <_dtoa_r+0x8f8>
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8097 	bne.w	8006a70 <_dtoa_r+0x8f0>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 8093 	bne.w	8006a74 <_dtoa_r+0x8f4>
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	0d1b      	lsrs	r3, r3, #20
 8006956:	051b      	lsls	r3, r3, #20
 8006958:	b133      	cbz	r3, 8006968 <_dtoa_r+0x7e8>
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	9b06      	ldr	r3, [sp, #24]
 8006962:	3301      	adds	r3, #1
 8006964:	9306      	str	r3, [sp, #24]
 8006966:	2301      	movs	r3, #1
 8006968:	9308      	str	r3, [sp, #32]
 800696a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 81b8 	beq.w	8006ce2 <_dtoa_r+0xb62>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006978:	6918      	ldr	r0, [r3, #16]
 800697a:	f000 fb79 	bl	8007070 <__hi0bits>
 800697e:	f1c0 0020 	rsb	r0, r0, #32
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	4418      	add	r0, r3
 8006986:	f010 001f 	ands.w	r0, r0, #31
 800698a:	f000 8082 	beq.w	8006a92 <_dtoa_r+0x912>
 800698e:	f1c0 0320 	rsb	r3, r0, #32
 8006992:	2b04      	cmp	r3, #4
 8006994:	dd73      	ble.n	8006a7e <_dtoa_r+0x8fe>
 8006996:	9b00      	ldr	r3, [sp, #0]
 8006998:	f1c0 001c 	rsb	r0, r0, #28
 800699c:	4403      	add	r3, r0
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	4403      	add	r3, r0
 80069a4:	4406      	add	r6, r0
 80069a6:	9306      	str	r3, [sp, #24]
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd05      	ble.n	80069ba <_dtoa_r+0x83a>
 80069ae:	9902      	ldr	r1, [sp, #8]
 80069b0:	461a      	mov	r2, r3
 80069b2:	4648      	mov	r0, r9
 80069b4:	f000 fcba 	bl	800732c <__lshift>
 80069b8:	9002      	str	r0, [sp, #8]
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd05      	ble.n	80069cc <_dtoa_r+0x84c>
 80069c0:	4621      	mov	r1, r4
 80069c2:	461a      	mov	r2, r3
 80069c4:	4648      	mov	r0, r9
 80069c6:	f000 fcb1 	bl	800732c <__lshift>
 80069ca:	4604      	mov	r4, r0
 80069cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d061      	beq.n	8006a96 <_dtoa_r+0x916>
 80069d2:	9802      	ldr	r0, [sp, #8]
 80069d4:	4621      	mov	r1, r4
 80069d6:	f000 fd15 	bl	8007404 <__mcmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	da5b      	bge.n	8006a96 <_dtoa_r+0x916>
 80069de:	2300      	movs	r3, #0
 80069e0:	9902      	ldr	r1, [sp, #8]
 80069e2:	220a      	movs	r2, #10
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fafd 	bl	8006fe4 <__multadd>
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 8177 	beq.w	8006ce6 <_dtoa_r+0xb66>
 80069f8:	4629      	mov	r1, r5
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4648      	mov	r0, r9
 8006a00:	f000 faf0 	bl	8006fe4 <__multadd>
 8006a04:	f1bb 0f00 	cmp.w	fp, #0
 8006a08:	4605      	mov	r5, r0
 8006a0a:	dc6f      	bgt.n	8006aec <_dtoa_r+0x96c>
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	dc49      	bgt.n	8006aa6 <_dtoa_r+0x926>
 8006a12:	e06b      	b.n	8006aec <_dtoa_r+0x96c>
 8006a14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a1a:	e73c      	b.n	8006896 <_dtoa_r+0x716>
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	40240000 	.word	0x40240000
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	1e5c      	subs	r4, r3, #1
 8006a28:	9b08      	ldr	r3, [sp, #32]
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	db09      	blt.n	8006a42 <_dtoa_r+0x8c2>
 8006a2e:	1b1c      	subs	r4, r3, r4
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f6bf af30 	bge.w	8006898 <_dtoa_r+0x718>
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	9a03      	ldr	r2, [sp, #12]
 8006a3c:	1a9e      	subs	r6, r3, r2
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e72b      	b.n	800689a <_dtoa_r+0x71a>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a46:	9408      	str	r4, [sp, #32]
 8006a48:	1ae3      	subs	r3, r4, r3
 8006a4a:	441a      	add	r2, r3
 8006a4c:	9e00      	ldr	r6, [sp, #0]
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	920d      	str	r2, [sp, #52]	@ 0x34
 8006a52:	2400      	movs	r4, #0
 8006a54:	e721      	b.n	800689a <_dtoa_r+0x71a>
 8006a56:	9c08      	ldr	r4, [sp, #32]
 8006a58:	9e00      	ldr	r6, [sp, #0]
 8006a5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006a5c:	e728      	b.n	80068b0 <_dtoa_r+0x730>
 8006a5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a62:	e751      	b.n	8006908 <_dtoa_r+0x788>
 8006a64:	9a08      	ldr	r2, [sp, #32]
 8006a66:	9902      	ldr	r1, [sp, #8]
 8006a68:	e750      	b.n	800690c <_dtoa_r+0x78c>
 8006a6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006a6e:	e751      	b.n	8006914 <_dtoa_r+0x794>
 8006a70:	2300      	movs	r3, #0
 8006a72:	e779      	b.n	8006968 <_dtoa_r+0x7e8>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	e777      	b.n	8006968 <_dtoa_r+0x7e8>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	e779      	b.n	8006972 <_dtoa_r+0x7f2>
 8006a7e:	d093      	beq.n	80069a8 <_dtoa_r+0x828>
 8006a80:	9a00      	ldr	r2, [sp, #0]
 8006a82:	331c      	adds	r3, #28
 8006a84:	441a      	add	r2, r3
 8006a86:	9200      	str	r2, [sp, #0]
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	441e      	add	r6, r3
 8006a8e:	9206      	str	r2, [sp, #24]
 8006a90:	e78a      	b.n	80069a8 <_dtoa_r+0x828>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f4      	b.n	8006a80 <_dtoa_r+0x900>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	46b8      	mov	r8, r7
 8006a9c:	dc20      	bgt.n	8006ae0 <_dtoa_r+0x960>
 8006a9e:	469b      	mov	fp, r3
 8006aa0:	9b07      	ldr	r3, [sp, #28]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd1e      	ble.n	8006ae4 <_dtoa_r+0x964>
 8006aa6:	f1bb 0f00 	cmp.w	fp, #0
 8006aaa:	f47f adb1 	bne.w	8006610 <_dtoa_r+0x490>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	2205      	movs	r2, #5
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	f000 fa95 	bl	8006fe4 <__multadd>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4604      	mov	r4, r0
 8006abe:	9802      	ldr	r0, [sp, #8]
 8006ac0:	f000 fca0 	bl	8007404 <__mcmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f77f ada3 	ble.w	8006610 <_dtoa_r+0x490>
 8006aca:	4656      	mov	r6, sl
 8006acc:	2331      	movs	r3, #49	@ 0x31
 8006ace:	f806 3b01 	strb.w	r3, [r6], #1
 8006ad2:	f108 0801 	add.w	r8, r8, #1
 8006ad6:	e59f      	b.n	8006618 <_dtoa_r+0x498>
 8006ad8:	9c03      	ldr	r4, [sp, #12]
 8006ada:	46b8      	mov	r8, r7
 8006adc:	4625      	mov	r5, r4
 8006ade:	e7f4      	b.n	8006aca <_dtoa_r+0x94a>
 8006ae0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8101 	beq.w	8006cee <_dtoa_r+0xb6e>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd05      	ble.n	8006afc <_dtoa_r+0x97c>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4632      	mov	r2, r6
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 fc19 	bl	800732c <__lshift>
 8006afa:	4605      	mov	r5, r0
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05c      	beq.n	8006bbc <_dtoa_r+0xa3c>
 8006b02:	6869      	ldr	r1, [r5, #4]
 8006b04:	4648      	mov	r0, r9
 8006b06:	f000 fa0b 	bl	8006f20 <_Balloc>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b928      	cbnz	r0, 8006b1a <_dtoa_r+0x99a>
 8006b0e:	4b82      	ldr	r3, [pc, #520]	@ (8006d18 <_dtoa_r+0xb98>)
 8006b10:	4602      	mov	r2, r0
 8006b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b16:	f7ff bb4a 	b.w	80061ae <_dtoa_r+0x2e>
 8006b1a:	692a      	ldr	r2, [r5, #16]
 8006b1c:	3202      	adds	r2, #2
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	f105 010c 	add.w	r1, r5, #12
 8006b24:	300c      	adds	r0, #12
 8006b26:	f000 fff7 	bl	8007b18 <memcpy>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4648      	mov	r0, r9
 8006b30:	f000 fbfc 	bl	800732c <__lshift>
 8006b34:	f10a 0301 	add.w	r3, sl, #1
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	eb0a 030b 	add.w	r3, sl, fp
 8006b3e:	9308      	str	r3, [sp, #32]
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	462f      	mov	r7, r5
 8006b48:	9306      	str	r3, [sp, #24]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	9b00      	ldr	r3, [sp, #0]
 8006b4e:	9802      	ldr	r0, [sp, #8]
 8006b50:	4621      	mov	r1, r4
 8006b52:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b56:	f7ff fa8a 	bl	800606e <quorem>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	3330      	adds	r3, #48	@ 0x30
 8006b5e:	9003      	str	r0, [sp, #12]
 8006b60:	4639      	mov	r1, r7
 8006b62:	9802      	ldr	r0, [sp, #8]
 8006b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b66:	f000 fc4d 	bl	8007404 <__mcmp>
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	9004      	str	r0, [sp, #16]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4648      	mov	r0, r9
 8006b72:	f000 fc63 	bl	800743c <__mdiff>
 8006b76:	68c2      	ldr	r2, [r0, #12]
 8006b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	bb02      	cbnz	r2, 8006bc0 <_dtoa_r+0xa40>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	9802      	ldr	r0, [sp, #8]
 8006b82:	f000 fc3f 	bl	8007404 <__mcmp>
 8006b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b88:	4602      	mov	r2, r0
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	f000 fa05 	bl	8006fa0 <_Bfree>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b9a:	9e00      	ldr	r6, [sp, #0]
 8006b9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	4319      	orrs	r1, r3
 8006ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba6:	d10d      	bne.n	8006bc4 <_dtoa_r+0xa44>
 8006ba8:	2b39      	cmp	r3, #57	@ 0x39
 8006baa:	d027      	beq.n	8006bfc <_dtoa_r+0xa7c>
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	dd01      	ble.n	8006bb6 <_dtoa_r+0xa36>
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	3331      	adds	r3, #49	@ 0x31
 8006bb6:	f88b 3000 	strb.w	r3, [fp]
 8006bba:	e52e      	b.n	800661a <_dtoa_r+0x49a>
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	e7b9      	b.n	8006b34 <_dtoa_r+0x9b4>
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	e7e2      	b.n	8006b8a <_dtoa_r+0xa0a>
 8006bc4:	9904      	ldr	r1, [sp, #16]
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	db04      	blt.n	8006bd4 <_dtoa_r+0xa54>
 8006bca:	9807      	ldr	r0, [sp, #28]
 8006bcc:	4301      	orrs	r1, r0
 8006bce:	9806      	ldr	r0, [sp, #24]
 8006bd0:	4301      	orrs	r1, r0
 8006bd2:	d120      	bne.n	8006c16 <_dtoa_r+0xa96>
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	ddee      	ble.n	8006bb6 <_dtoa_r+0xa36>
 8006bd8:	9902      	ldr	r1, [sp, #8]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4648      	mov	r0, r9
 8006be0:	f000 fba4 	bl	800732c <__lshift>
 8006be4:	4621      	mov	r1, r4
 8006be6:	9002      	str	r0, [sp, #8]
 8006be8:	f000 fc0c 	bl	8007404 <__mcmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	dc02      	bgt.n	8006bf8 <_dtoa_r+0xa78>
 8006bf2:	d1e0      	bne.n	8006bb6 <_dtoa_r+0xa36>
 8006bf4:	07da      	lsls	r2, r3, #31
 8006bf6:	d5de      	bpl.n	8006bb6 <_dtoa_r+0xa36>
 8006bf8:	2b39      	cmp	r3, #57	@ 0x39
 8006bfa:	d1da      	bne.n	8006bb2 <_dtoa_r+0xa32>
 8006bfc:	2339      	movs	r3, #57	@ 0x39
 8006bfe:	f88b 3000 	strb.w	r3, [fp]
 8006c02:	4633      	mov	r3, r6
 8006c04:	461e      	mov	r6, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c0c:	2a39      	cmp	r2, #57	@ 0x39
 8006c0e:	d04e      	beq.n	8006cae <_dtoa_r+0xb2e>
 8006c10:	3201      	adds	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e501      	b.n	800661a <_dtoa_r+0x49a>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	dd03      	ble.n	8006c22 <_dtoa_r+0xaa2>
 8006c1a:	2b39      	cmp	r3, #57	@ 0x39
 8006c1c:	d0ee      	beq.n	8006bfc <_dtoa_r+0xa7c>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	e7c9      	b.n	8006bb6 <_dtoa_r+0xa36>
 8006c22:	9a00      	ldr	r2, [sp, #0]
 8006c24:	9908      	ldr	r1, [sp, #32]
 8006c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c2a:	428a      	cmp	r2, r1
 8006c2c:	d028      	beq.n	8006c80 <_dtoa_r+0xb00>
 8006c2e:	9902      	ldr	r1, [sp, #8]
 8006c30:	2300      	movs	r3, #0
 8006c32:	220a      	movs	r2, #10
 8006c34:	4648      	mov	r0, r9
 8006c36:	f000 f9d5 	bl	8006fe4 <__multadd>
 8006c3a:	42af      	cmp	r7, r5
 8006c3c:	9002      	str	r0, [sp, #8]
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 020a 	mov.w	r2, #10
 8006c46:	4639      	mov	r1, r7
 8006c48:	4648      	mov	r0, r9
 8006c4a:	d107      	bne.n	8006c5c <_dtoa_r+0xadc>
 8006c4c:	f000 f9ca 	bl	8006fe4 <__multadd>
 8006c50:	4607      	mov	r7, r0
 8006c52:	4605      	mov	r5, r0
 8006c54:	9b00      	ldr	r3, [sp, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	e777      	b.n	8006b4c <_dtoa_r+0x9cc>
 8006c5c:	f000 f9c2 	bl	8006fe4 <__multadd>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4607      	mov	r7, r0
 8006c64:	2300      	movs	r3, #0
 8006c66:	220a      	movs	r2, #10
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f000 f9bb 	bl	8006fe4 <__multadd>
 8006c6e:	4605      	mov	r5, r0
 8006c70:	e7f0      	b.n	8006c54 <_dtoa_r+0xad4>
 8006c72:	f1bb 0f00 	cmp.w	fp, #0
 8006c76:	bfcc      	ite	gt
 8006c78:	465e      	movgt	r6, fp
 8006c7a:	2601      	movle	r6, #1
 8006c7c:	4456      	add	r6, sl
 8006c7e:	2700      	movs	r7, #0
 8006c80:	9902      	ldr	r1, [sp, #8]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4648      	mov	r0, r9
 8006c88:	f000 fb50 	bl	800732c <__lshift>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	9002      	str	r0, [sp, #8]
 8006c90:	f000 fbb8 	bl	8007404 <__mcmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	dcb4      	bgt.n	8006c02 <_dtoa_r+0xa82>
 8006c98:	d102      	bne.n	8006ca0 <_dtoa_r+0xb20>
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d4b0      	bmi.n	8006c02 <_dtoa_r+0xa82>
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	461e      	mov	r6, r3
 8006ca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca8:	2a30      	cmp	r2, #48	@ 0x30
 8006caa:	d0fa      	beq.n	8006ca2 <_dtoa_r+0xb22>
 8006cac:	e4b5      	b.n	800661a <_dtoa_r+0x49a>
 8006cae:	459a      	cmp	sl, r3
 8006cb0:	d1a8      	bne.n	8006c04 <_dtoa_r+0xa84>
 8006cb2:	2331      	movs	r3, #49	@ 0x31
 8006cb4:	f108 0801 	add.w	r8, r8, #1
 8006cb8:	f88a 3000 	strb.w	r3, [sl]
 8006cbc:	e4ad      	b.n	800661a <_dtoa_r+0x49a>
 8006cbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d1c <_dtoa_r+0xb9c>
 8006cc4:	b11b      	cbz	r3, 8006cce <_dtoa_r+0xb4e>
 8006cc6:	f10a 0308 	add.w	r3, sl, #8
 8006cca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4650      	mov	r0, sl
 8006cd0:	b017      	add	sp, #92	@ 0x5c
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f77f ae2e 	ble.w	800693a <_dtoa_r+0x7ba>
 8006cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e64d      	b.n	8006982 <_dtoa_r+0x802>
 8006ce6:	f1bb 0f00 	cmp.w	fp, #0
 8006cea:	f77f aed9 	ble.w	8006aa0 <_dtoa_r+0x920>
 8006cee:	4656      	mov	r6, sl
 8006cf0:	9802      	ldr	r0, [sp, #8]
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	f7ff f9bb 	bl	800606e <quorem>
 8006cf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8006d00:	eba6 020a 	sub.w	r2, r6, sl
 8006d04:	4593      	cmp	fp, r2
 8006d06:	ddb4      	ble.n	8006c72 <_dtoa_r+0xaf2>
 8006d08:	9902      	ldr	r1, [sp, #8]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f000 f968 	bl	8006fe4 <__multadd>
 8006d14:	9002      	str	r0, [sp, #8]
 8006d16:	e7eb      	b.n	8006cf0 <_dtoa_r+0xb70>
 8006d18:	08007e04 	.word	0x08007e04
 8006d1c:	08007d88 	.word	0x08007d88

08006d20 <_free_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4605      	mov	r5, r0
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d041      	beq.n	8006dac <_free_r+0x8c>
 8006d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2c:	1f0c      	subs	r4, r1, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfb8      	it	lt
 8006d32:	18e4      	addlt	r4, r4, r3
 8006d34:	f000 f8e8 	bl	8006f08 <__malloc_lock>
 8006d38:	4a1d      	ldr	r2, [pc, #116]	@ (8006db0 <_free_r+0x90>)
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	b933      	cbnz	r3, 8006d4c <_free_r+0x2c>
 8006d3e:	6063      	str	r3, [r4, #4]
 8006d40:	6014      	str	r4, [r2, #0]
 8006d42:	4628      	mov	r0, r5
 8006d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d48:	f000 b8e4 	b.w	8006f14 <__malloc_unlock>
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	d908      	bls.n	8006d62 <_free_r+0x42>
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	1821      	adds	r1, r4, r0
 8006d54:	428b      	cmp	r3, r1
 8006d56:	bf01      	itttt	eq
 8006d58:	6819      	ldreq	r1, [r3, #0]
 8006d5a:	685b      	ldreq	r3, [r3, #4]
 8006d5c:	1809      	addeq	r1, r1, r0
 8006d5e:	6021      	streq	r1, [r4, #0]
 8006d60:	e7ed      	b.n	8006d3e <_free_r+0x1e>
 8006d62:	461a      	mov	r2, r3
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b10b      	cbz	r3, 8006d6c <_free_r+0x4c>
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d9fa      	bls.n	8006d62 <_free_r+0x42>
 8006d6c:	6811      	ldr	r1, [r2, #0]
 8006d6e:	1850      	adds	r0, r2, r1
 8006d70:	42a0      	cmp	r0, r4
 8006d72:	d10b      	bne.n	8006d8c <_free_r+0x6c>
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	4401      	add	r1, r0
 8006d78:	1850      	adds	r0, r2, r1
 8006d7a:	4283      	cmp	r3, r0
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	d1e0      	bne.n	8006d42 <_free_r+0x22>
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	6053      	str	r3, [r2, #4]
 8006d86:	4408      	add	r0, r1
 8006d88:	6010      	str	r0, [r2, #0]
 8006d8a:	e7da      	b.n	8006d42 <_free_r+0x22>
 8006d8c:	d902      	bls.n	8006d94 <_free_r+0x74>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	e7d6      	b.n	8006d42 <_free_r+0x22>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	1821      	adds	r1, r4, r0
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	bf04      	itt	eq
 8006d9c:	6819      	ldreq	r1, [r3, #0]
 8006d9e:	685b      	ldreq	r3, [r3, #4]
 8006da0:	6063      	str	r3, [r4, #4]
 8006da2:	bf04      	itt	eq
 8006da4:	1809      	addeq	r1, r1, r0
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	6054      	str	r4, [r2, #4]
 8006daa:	e7ca      	b.n	8006d42 <_free_r+0x22>
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	20000538 	.word	0x20000538

08006db4 <malloc>:
 8006db4:	4b02      	ldr	r3, [pc, #8]	@ (8006dc0 <malloc+0xc>)
 8006db6:	4601      	mov	r1, r0
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	f000 b825 	b.w	8006e08 <_malloc_r>
 8006dbe:	bf00      	nop
 8006dc0:	20000028 	.word	0x20000028

08006dc4 <sbrk_aligned>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8006e04 <sbrk_aligned+0x40>)
 8006dc8:	460c      	mov	r4, r1
 8006dca:	6831      	ldr	r1, [r6, #0]
 8006dcc:	4605      	mov	r5, r0
 8006dce:	b911      	cbnz	r1, 8006dd6 <sbrk_aligned+0x12>
 8006dd0:	f000 fe92 	bl	8007af8 <_sbrk_r>
 8006dd4:	6030      	str	r0, [r6, #0]
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 fe8d 	bl	8007af8 <_sbrk_r>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d103      	bne.n	8006dea <sbrk_aligned+0x26>
 8006de2:	f04f 34ff 	mov.w	r4, #4294967295
 8006de6:	4620      	mov	r0, r4
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	1cc4      	adds	r4, r0, #3
 8006dec:	f024 0403 	bic.w	r4, r4, #3
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d0f8      	beq.n	8006de6 <sbrk_aligned+0x22>
 8006df4:	1a21      	subs	r1, r4, r0
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fe7e 	bl	8007af8 <_sbrk_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d1f2      	bne.n	8006de6 <sbrk_aligned+0x22>
 8006e00:	e7ef      	b.n	8006de2 <sbrk_aligned+0x1e>
 8006e02:	bf00      	nop
 8006e04:	20000534 	.word	0x20000534

08006e08 <_malloc_r>:
 8006e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e0c:	1ccd      	adds	r5, r1, #3
 8006e0e:	f025 0503 	bic.w	r5, r5, #3
 8006e12:	3508      	adds	r5, #8
 8006e14:	2d0c      	cmp	r5, #12
 8006e16:	bf38      	it	cc
 8006e18:	250c      	movcc	r5, #12
 8006e1a:	2d00      	cmp	r5, #0
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	db01      	blt.n	8006e24 <_malloc_r+0x1c>
 8006e20:	42a9      	cmp	r1, r5
 8006e22:	d904      	bls.n	8006e2e <_malloc_r+0x26>
 8006e24:	230c      	movs	r3, #12
 8006e26:	6033      	str	r3, [r6, #0]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f04 <_malloc_r+0xfc>
 8006e32:	f000 f869 	bl	8006f08 <__malloc_lock>
 8006e36:	f8d8 3000 	ldr.w	r3, [r8]
 8006e3a:	461c      	mov	r4, r3
 8006e3c:	bb44      	cbnz	r4, 8006e90 <_malloc_r+0x88>
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff ffbf 	bl	8006dc4 <sbrk_aligned>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	4604      	mov	r4, r0
 8006e4a:	d158      	bne.n	8006efe <_malloc_r+0xf6>
 8006e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e50:	4627      	mov	r7, r4
 8006e52:	2f00      	cmp	r7, #0
 8006e54:	d143      	bne.n	8006ede <_malloc_r+0xd6>
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	d04b      	beq.n	8006ef2 <_malloc_r+0xea>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4630      	mov	r0, r6
 8006e60:	eb04 0903 	add.w	r9, r4, r3
 8006e64:	f000 fe48 	bl	8007af8 <_sbrk_r>
 8006e68:	4581      	cmp	r9, r0
 8006e6a:	d142      	bne.n	8006ef2 <_malloc_r+0xea>
 8006e6c:	6821      	ldr	r1, [r4, #0]
 8006e6e:	1a6d      	subs	r5, r5, r1
 8006e70:	4629      	mov	r1, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ffa6 	bl	8006dc4 <sbrk_aligned>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d03a      	beq.n	8006ef2 <_malloc_r+0xea>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	442b      	add	r3, r5
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	f8d8 3000 	ldr.w	r3, [r8]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	bb62      	cbnz	r2, 8006ee4 <_malloc_r+0xdc>
 8006e8a:	f8c8 7000 	str.w	r7, [r8]
 8006e8e:	e00f      	b.n	8006eb0 <_malloc_r+0xa8>
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	1b52      	subs	r2, r2, r5
 8006e94:	d420      	bmi.n	8006ed8 <_malloc_r+0xd0>
 8006e96:	2a0b      	cmp	r2, #11
 8006e98:	d917      	bls.n	8006eca <_malloc_r+0xc2>
 8006e9a:	1961      	adds	r1, r4, r5
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	6025      	str	r5, [r4, #0]
 8006ea0:	bf18      	it	ne
 8006ea2:	6059      	strne	r1, [r3, #4]
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	bf08      	it	eq
 8006ea8:	f8c8 1000 	streq.w	r1, [r8]
 8006eac:	5162      	str	r2, [r4, r5]
 8006eae:	604b      	str	r3, [r1, #4]
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f000 f82f 	bl	8006f14 <__malloc_unlock>
 8006eb6:	f104 000b 	add.w	r0, r4, #11
 8006eba:	1d23      	adds	r3, r4, #4
 8006ebc:	f020 0007 	bic.w	r0, r0, #7
 8006ec0:	1ac2      	subs	r2, r0, r3
 8006ec2:	bf1c      	itt	ne
 8006ec4:	1a1b      	subne	r3, r3, r0
 8006ec6:	50a3      	strne	r3, [r4, r2]
 8006ec8:	e7af      	b.n	8006e2a <_malloc_r+0x22>
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	bf0c      	ite	eq
 8006ed0:	f8c8 2000 	streq.w	r2, [r8]
 8006ed4:	605a      	strne	r2, [r3, #4]
 8006ed6:	e7eb      	b.n	8006eb0 <_malloc_r+0xa8>
 8006ed8:	4623      	mov	r3, r4
 8006eda:	6864      	ldr	r4, [r4, #4]
 8006edc:	e7ae      	b.n	8006e3c <_malloc_r+0x34>
 8006ede:	463c      	mov	r4, r7
 8006ee0:	687f      	ldr	r7, [r7, #4]
 8006ee2:	e7b6      	b.n	8006e52 <_malloc_r+0x4a>
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d1fb      	bne.n	8006ee4 <_malloc_r+0xdc>
 8006eec:	2300      	movs	r3, #0
 8006eee:	6053      	str	r3, [r2, #4]
 8006ef0:	e7de      	b.n	8006eb0 <_malloc_r+0xa8>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	6033      	str	r3, [r6, #0]
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f80c 	bl	8006f14 <__malloc_unlock>
 8006efc:	e794      	b.n	8006e28 <_malloc_r+0x20>
 8006efe:	6005      	str	r5, [r0, #0]
 8006f00:	e7d6      	b.n	8006eb0 <_malloc_r+0xa8>
 8006f02:	bf00      	nop
 8006f04:	20000538 	.word	0x20000538

08006f08 <__malloc_lock>:
 8006f08:	4801      	ldr	r0, [pc, #4]	@ (8006f10 <__malloc_lock+0x8>)
 8006f0a:	f7ff b8ae 	b.w	800606a <__retarget_lock_acquire_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000530 	.word	0x20000530

08006f14 <__malloc_unlock>:
 8006f14:	4801      	ldr	r0, [pc, #4]	@ (8006f1c <__malloc_unlock+0x8>)
 8006f16:	f7ff b8a9 	b.w	800606c <__retarget_lock_release_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	20000530 	.word	0x20000530

08006f20 <_Balloc>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	69c6      	ldr	r6, [r0, #28]
 8006f24:	4604      	mov	r4, r0
 8006f26:	460d      	mov	r5, r1
 8006f28:	b976      	cbnz	r6, 8006f48 <_Balloc+0x28>
 8006f2a:	2010      	movs	r0, #16
 8006f2c:	f7ff ff42 	bl	8006db4 <malloc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	61e0      	str	r0, [r4, #28]
 8006f34:	b920      	cbnz	r0, 8006f40 <_Balloc+0x20>
 8006f36:	4b18      	ldr	r3, [pc, #96]	@ (8006f98 <_Balloc+0x78>)
 8006f38:	4818      	ldr	r0, [pc, #96]	@ (8006f9c <_Balloc+0x7c>)
 8006f3a:	216b      	movs	r1, #107	@ 0x6b
 8006f3c:	f000 fdfa 	bl	8007b34 <__assert_func>
 8006f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f44:	6006      	str	r6, [r0, #0]
 8006f46:	60c6      	str	r6, [r0, #12]
 8006f48:	69e6      	ldr	r6, [r4, #28]
 8006f4a:	68f3      	ldr	r3, [r6, #12]
 8006f4c:	b183      	cbz	r3, 8006f70 <_Balloc+0x50>
 8006f4e:	69e3      	ldr	r3, [r4, #28]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f56:	b9b8      	cbnz	r0, 8006f88 <_Balloc+0x68>
 8006f58:	2101      	movs	r1, #1
 8006f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f5e:	1d72      	adds	r2, r6, #5
 8006f60:	0092      	lsls	r2, r2, #2
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 fe04 	bl	8007b70 <_calloc_r>
 8006f68:	b160      	cbz	r0, 8006f84 <_Balloc+0x64>
 8006f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f6e:	e00e      	b.n	8006f8e <_Balloc+0x6e>
 8006f70:	2221      	movs	r2, #33	@ 0x21
 8006f72:	2104      	movs	r1, #4
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fdfb 	bl	8007b70 <_calloc_r>
 8006f7a:	69e3      	ldr	r3, [r4, #28]
 8006f7c:	60f0      	str	r0, [r6, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e4      	bne.n	8006f4e <_Balloc+0x2e>
 8006f84:	2000      	movs	r0, #0
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	6802      	ldr	r2, [r0, #0]
 8006f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f94:	e7f7      	b.n	8006f86 <_Balloc+0x66>
 8006f96:	bf00      	nop
 8006f98:	08007d95 	.word	0x08007d95
 8006f9c:	08007e15 	.word	0x08007e15

08006fa0 <_Bfree>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	69c6      	ldr	r6, [r0, #28]
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	b976      	cbnz	r6, 8006fc8 <_Bfree+0x28>
 8006faa:	2010      	movs	r0, #16
 8006fac:	f7ff ff02 	bl	8006db4 <malloc>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	61e8      	str	r0, [r5, #28]
 8006fb4:	b920      	cbnz	r0, 8006fc0 <_Bfree+0x20>
 8006fb6:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <_Bfree+0x3c>)
 8006fb8:	4809      	ldr	r0, [pc, #36]	@ (8006fe0 <_Bfree+0x40>)
 8006fba:	218f      	movs	r1, #143	@ 0x8f
 8006fbc:	f000 fdba 	bl	8007b34 <__assert_func>
 8006fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc4:	6006      	str	r6, [r0, #0]
 8006fc6:	60c6      	str	r6, [r0, #12]
 8006fc8:	b13c      	cbz	r4, 8006fda <_Bfree+0x3a>
 8006fca:	69eb      	ldr	r3, [r5, #28]
 8006fcc:	6862      	ldr	r2, [r4, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fd4:	6021      	str	r1, [r4, #0]
 8006fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	08007d95 	.word	0x08007d95
 8006fe0:	08007e15 	.word	0x08007e15

08006fe4 <__multadd>:
 8006fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	690d      	ldr	r5, [r1, #16]
 8006fea:	4607      	mov	r7, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	461e      	mov	r6, r3
 8006ff0:	f101 0c14 	add.w	ip, r1, #20
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8006ffa:	b299      	uxth	r1, r3
 8006ffc:	fb02 6101 	mla	r1, r2, r1, r6
 8007000:	0c1e      	lsrs	r6, r3, #16
 8007002:	0c0b      	lsrs	r3, r1, #16
 8007004:	fb02 3306 	mla	r3, r2, r6, r3
 8007008:	b289      	uxth	r1, r1
 800700a:	3001      	adds	r0, #1
 800700c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007010:	4285      	cmp	r5, r0
 8007012:	f84c 1b04 	str.w	r1, [ip], #4
 8007016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800701a:	dcec      	bgt.n	8006ff6 <__multadd+0x12>
 800701c:	b30e      	cbz	r6, 8007062 <__multadd+0x7e>
 800701e:	68a3      	ldr	r3, [r4, #8]
 8007020:	42ab      	cmp	r3, r5
 8007022:	dc19      	bgt.n	8007058 <__multadd+0x74>
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4638      	mov	r0, r7
 8007028:	3101      	adds	r1, #1
 800702a:	f7ff ff79 	bl	8006f20 <_Balloc>
 800702e:	4680      	mov	r8, r0
 8007030:	b928      	cbnz	r0, 800703e <__multadd+0x5a>
 8007032:	4602      	mov	r2, r0
 8007034:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <__multadd+0x84>)
 8007036:	480d      	ldr	r0, [pc, #52]	@ (800706c <__multadd+0x88>)
 8007038:	21ba      	movs	r1, #186	@ 0xba
 800703a:	f000 fd7b 	bl	8007b34 <__assert_func>
 800703e:	6922      	ldr	r2, [r4, #16]
 8007040:	3202      	adds	r2, #2
 8007042:	f104 010c 	add.w	r1, r4, #12
 8007046:	0092      	lsls	r2, r2, #2
 8007048:	300c      	adds	r0, #12
 800704a:	f000 fd65 	bl	8007b18 <memcpy>
 800704e:	4621      	mov	r1, r4
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ffa5 	bl	8006fa0 <_Bfree>
 8007056:	4644      	mov	r4, r8
 8007058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800705c:	3501      	adds	r5, #1
 800705e:	615e      	str	r6, [r3, #20]
 8007060:	6125      	str	r5, [r4, #16]
 8007062:	4620      	mov	r0, r4
 8007064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007068:	08007e04 	.word	0x08007e04
 800706c:	08007e15 	.word	0x08007e15

08007070 <__hi0bits>:
 8007070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007074:	4603      	mov	r3, r0
 8007076:	bf36      	itet	cc
 8007078:	0403      	lslcc	r3, r0, #16
 800707a:	2000      	movcs	r0, #0
 800707c:	2010      	movcc	r0, #16
 800707e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007082:	bf3c      	itt	cc
 8007084:	021b      	lslcc	r3, r3, #8
 8007086:	3008      	addcc	r0, #8
 8007088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800708c:	bf3c      	itt	cc
 800708e:	011b      	lslcc	r3, r3, #4
 8007090:	3004      	addcc	r0, #4
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007096:	bf3c      	itt	cc
 8007098:	009b      	lslcc	r3, r3, #2
 800709a:	3002      	addcc	r0, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	db05      	blt.n	80070ac <__hi0bits+0x3c>
 80070a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070a4:	f100 0001 	add.w	r0, r0, #1
 80070a8:	bf08      	it	eq
 80070aa:	2020      	moveq	r0, #32
 80070ac:	4770      	bx	lr

080070ae <__lo0bits>:
 80070ae:	6803      	ldr	r3, [r0, #0]
 80070b0:	4602      	mov	r2, r0
 80070b2:	f013 0007 	ands.w	r0, r3, #7
 80070b6:	d00b      	beq.n	80070d0 <__lo0bits+0x22>
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	d421      	bmi.n	8007100 <__lo0bits+0x52>
 80070bc:	0798      	lsls	r0, r3, #30
 80070be:	bf49      	itett	mi
 80070c0:	085b      	lsrmi	r3, r3, #1
 80070c2:	089b      	lsrpl	r3, r3, #2
 80070c4:	2001      	movmi	r0, #1
 80070c6:	6013      	strmi	r3, [r2, #0]
 80070c8:	bf5c      	itt	pl
 80070ca:	6013      	strpl	r3, [r2, #0]
 80070cc:	2002      	movpl	r0, #2
 80070ce:	4770      	bx	lr
 80070d0:	b299      	uxth	r1, r3
 80070d2:	b909      	cbnz	r1, 80070d8 <__lo0bits+0x2a>
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	2010      	movs	r0, #16
 80070d8:	b2d9      	uxtb	r1, r3
 80070da:	b909      	cbnz	r1, 80070e0 <__lo0bits+0x32>
 80070dc:	3008      	adds	r0, #8
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	0719      	lsls	r1, r3, #28
 80070e2:	bf04      	itt	eq
 80070e4:	091b      	lsreq	r3, r3, #4
 80070e6:	3004      	addeq	r0, #4
 80070e8:	0799      	lsls	r1, r3, #30
 80070ea:	bf04      	itt	eq
 80070ec:	089b      	lsreq	r3, r3, #2
 80070ee:	3002      	addeq	r0, #2
 80070f0:	07d9      	lsls	r1, r3, #31
 80070f2:	d403      	bmi.n	80070fc <__lo0bits+0x4e>
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	f100 0001 	add.w	r0, r0, #1
 80070fa:	d003      	beq.n	8007104 <__lo0bits+0x56>
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4770      	bx	lr
 8007100:	2000      	movs	r0, #0
 8007102:	4770      	bx	lr
 8007104:	2020      	movs	r0, #32
 8007106:	4770      	bx	lr

08007108 <__i2b>:
 8007108:	b510      	push	{r4, lr}
 800710a:	460c      	mov	r4, r1
 800710c:	2101      	movs	r1, #1
 800710e:	f7ff ff07 	bl	8006f20 <_Balloc>
 8007112:	4602      	mov	r2, r0
 8007114:	b928      	cbnz	r0, 8007122 <__i2b+0x1a>
 8007116:	4b05      	ldr	r3, [pc, #20]	@ (800712c <__i2b+0x24>)
 8007118:	4805      	ldr	r0, [pc, #20]	@ (8007130 <__i2b+0x28>)
 800711a:	f240 1145 	movw	r1, #325	@ 0x145
 800711e:	f000 fd09 	bl	8007b34 <__assert_func>
 8007122:	2301      	movs	r3, #1
 8007124:	6144      	str	r4, [r0, #20]
 8007126:	6103      	str	r3, [r0, #16]
 8007128:	bd10      	pop	{r4, pc}
 800712a:	bf00      	nop
 800712c:	08007e04 	.word	0x08007e04
 8007130:	08007e15 	.word	0x08007e15

08007134 <__multiply>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	4617      	mov	r7, r2
 800713a:	690a      	ldr	r2, [r1, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	429a      	cmp	r2, r3
 8007140:	bfa8      	it	ge
 8007142:	463b      	movge	r3, r7
 8007144:	4689      	mov	r9, r1
 8007146:	bfa4      	itt	ge
 8007148:	460f      	movge	r7, r1
 800714a:	4699      	movge	r9, r3
 800714c:	693d      	ldr	r5, [r7, #16]
 800714e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	eb05 060a 	add.w	r6, r5, sl
 800715a:	42b3      	cmp	r3, r6
 800715c:	b085      	sub	sp, #20
 800715e:	bfb8      	it	lt
 8007160:	3101      	addlt	r1, #1
 8007162:	f7ff fedd 	bl	8006f20 <_Balloc>
 8007166:	b930      	cbnz	r0, 8007176 <__multiply+0x42>
 8007168:	4602      	mov	r2, r0
 800716a:	4b41      	ldr	r3, [pc, #260]	@ (8007270 <__multiply+0x13c>)
 800716c:	4841      	ldr	r0, [pc, #260]	@ (8007274 <__multiply+0x140>)
 800716e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007172:	f000 fcdf 	bl	8007b34 <__assert_func>
 8007176:	f100 0414 	add.w	r4, r0, #20
 800717a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800717e:	4623      	mov	r3, r4
 8007180:	2200      	movs	r2, #0
 8007182:	4573      	cmp	r3, lr
 8007184:	d320      	bcc.n	80071c8 <__multiply+0x94>
 8007186:	f107 0814 	add.w	r8, r7, #20
 800718a:	f109 0114 	add.w	r1, r9, #20
 800718e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007192:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	1beb      	subs	r3, r5, r7
 800719a:	3b15      	subs	r3, #21
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	3304      	adds	r3, #4
 80071a2:	3715      	adds	r7, #21
 80071a4:	42bd      	cmp	r5, r7
 80071a6:	bf38      	it	cc
 80071a8:	2304      	movcc	r3, #4
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	9b02      	ldr	r3, [sp, #8]
 80071ae:	9103      	str	r1, [sp, #12]
 80071b0:	428b      	cmp	r3, r1
 80071b2:	d80c      	bhi.n	80071ce <__multiply+0x9a>
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	dd03      	ble.n	80071c0 <__multiply+0x8c>
 80071b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d055      	beq.n	800726c <__multiply+0x138>
 80071c0:	6106      	str	r6, [r0, #16]
 80071c2:	b005      	add	sp, #20
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	f843 2b04 	str.w	r2, [r3], #4
 80071cc:	e7d9      	b.n	8007182 <__multiply+0x4e>
 80071ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80071d2:	f1ba 0f00 	cmp.w	sl, #0
 80071d6:	d01f      	beq.n	8007218 <__multiply+0xe4>
 80071d8:	46c4      	mov	ip, r8
 80071da:	46a1      	mov	r9, r4
 80071dc:	2700      	movs	r7, #0
 80071de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071e2:	f8d9 3000 	ldr.w	r3, [r9]
 80071e6:	fa1f fb82 	uxth.w	fp, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80071f0:	443b      	add	r3, r7
 80071f2:	f8d9 7000 	ldr.w	r7, [r9]
 80071f6:	0c12      	lsrs	r2, r2, #16
 80071f8:	0c3f      	lsrs	r7, r7, #16
 80071fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80071fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007208:	4565      	cmp	r5, ip
 800720a:	f849 3b04 	str.w	r3, [r9], #4
 800720e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007212:	d8e4      	bhi.n	80071de <__multiply+0xaa>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	50e7      	str	r7, [r4, r3]
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800721e:	3104      	adds	r1, #4
 8007220:	f1b9 0f00 	cmp.w	r9, #0
 8007224:	d020      	beq.n	8007268 <__multiply+0x134>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	4647      	mov	r7, r8
 800722a:	46a4      	mov	ip, r4
 800722c:	f04f 0a00 	mov.w	sl, #0
 8007230:	f8b7 b000 	ldrh.w	fp, [r7]
 8007234:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007238:	fb09 220b 	mla	r2, r9, fp, r2
 800723c:	4452      	add	r2, sl
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007244:	f84c 3b04 	str.w	r3, [ip], #4
 8007248:	f857 3b04 	ldr.w	r3, [r7], #4
 800724c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007250:	f8bc 3000 	ldrh.w	r3, [ip]
 8007254:	fb09 330a 	mla	r3, r9, sl, r3
 8007258:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800725c:	42bd      	cmp	r5, r7
 800725e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007262:	d8e5      	bhi.n	8007230 <__multiply+0xfc>
 8007264:	9a01      	ldr	r2, [sp, #4]
 8007266:	50a3      	str	r3, [r4, r2]
 8007268:	3404      	adds	r4, #4
 800726a:	e79f      	b.n	80071ac <__multiply+0x78>
 800726c:	3e01      	subs	r6, #1
 800726e:	e7a1      	b.n	80071b4 <__multiply+0x80>
 8007270:	08007e04 	.word	0x08007e04
 8007274:	08007e15 	.word	0x08007e15

08007278 <__pow5mult>:
 8007278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800727c:	4615      	mov	r5, r2
 800727e:	f012 0203 	ands.w	r2, r2, #3
 8007282:	4607      	mov	r7, r0
 8007284:	460e      	mov	r6, r1
 8007286:	d007      	beq.n	8007298 <__pow5mult+0x20>
 8007288:	4c25      	ldr	r4, [pc, #148]	@ (8007320 <__pow5mult+0xa8>)
 800728a:	3a01      	subs	r2, #1
 800728c:	2300      	movs	r3, #0
 800728e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007292:	f7ff fea7 	bl	8006fe4 <__multadd>
 8007296:	4606      	mov	r6, r0
 8007298:	10ad      	asrs	r5, r5, #2
 800729a:	d03d      	beq.n	8007318 <__pow5mult+0xa0>
 800729c:	69fc      	ldr	r4, [r7, #28]
 800729e:	b97c      	cbnz	r4, 80072c0 <__pow5mult+0x48>
 80072a0:	2010      	movs	r0, #16
 80072a2:	f7ff fd87 	bl	8006db4 <malloc>
 80072a6:	4602      	mov	r2, r0
 80072a8:	61f8      	str	r0, [r7, #28]
 80072aa:	b928      	cbnz	r0, 80072b8 <__pow5mult+0x40>
 80072ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <__pow5mult+0xac>)
 80072ae:	481e      	ldr	r0, [pc, #120]	@ (8007328 <__pow5mult+0xb0>)
 80072b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072b4:	f000 fc3e 	bl	8007b34 <__assert_func>
 80072b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072bc:	6004      	str	r4, [r0, #0]
 80072be:	60c4      	str	r4, [r0, #12]
 80072c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c8:	b94c      	cbnz	r4, 80072de <__pow5mult+0x66>
 80072ca:	f240 2171 	movw	r1, #625	@ 0x271
 80072ce:	4638      	mov	r0, r7
 80072d0:	f7ff ff1a 	bl	8007108 <__i2b>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80072da:	4604      	mov	r4, r0
 80072dc:	6003      	str	r3, [r0, #0]
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	07eb      	lsls	r3, r5, #31
 80072e4:	d50a      	bpl.n	80072fc <__pow5mult+0x84>
 80072e6:	4631      	mov	r1, r6
 80072e8:	4622      	mov	r2, r4
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7ff ff22 	bl	8007134 <__multiply>
 80072f0:	4631      	mov	r1, r6
 80072f2:	4680      	mov	r8, r0
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff fe53 	bl	8006fa0 <_Bfree>
 80072fa:	4646      	mov	r6, r8
 80072fc:	106d      	asrs	r5, r5, #1
 80072fe:	d00b      	beq.n	8007318 <__pow5mult+0xa0>
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	b938      	cbnz	r0, 8007314 <__pow5mult+0x9c>
 8007304:	4622      	mov	r2, r4
 8007306:	4621      	mov	r1, r4
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff ff13 	bl	8007134 <__multiply>
 800730e:	6020      	str	r0, [r4, #0]
 8007310:	f8c0 9000 	str.w	r9, [r0]
 8007314:	4604      	mov	r4, r0
 8007316:	e7e4      	b.n	80072e2 <__pow5mult+0x6a>
 8007318:	4630      	mov	r0, r6
 800731a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731e:	bf00      	nop
 8007320:	08007ec8 	.word	0x08007ec8
 8007324:	08007d95 	.word	0x08007d95
 8007328:	08007e15 	.word	0x08007e15

0800732c <__lshift>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	460c      	mov	r4, r1
 8007332:	6849      	ldr	r1, [r1, #4]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	4607      	mov	r7, r0
 800733e:	4691      	mov	r9, r2
 8007340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007344:	f108 0601 	add.w	r6, r8, #1
 8007348:	42b3      	cmp	r3, r6
 800734a:	db0b      	blt.n	8007364 <__lshift+0x38>
 800734c:	4638      	mov	r0, r7
 800734e:	f7ff fde7 	bl	8006f20 <_Balloc>
 8007352:	4605      	mov	r5, r0
 8007354:	b948      	cbnz	r0, 800736a <__lshift+0x3e>
 8007356:	4602      	mov	r2, r0
 8007358:	4b28      	ldr	r3, [pc, #160]	@ (80073fc <__lshift+0xd0>)
 800735a:	4829      	ldr	r0, [pc, #164]	@ (8007400 <__lshift+0xd4>)
 800735c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007360:	f000 fbe8 	bl	8007b34 <__assert_func>
 8007364:	3101      	adds	r1, #1
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	e7ee      	b.n	8007348 <__lshift+0x1c>
 800736a:	2300      	movs	r3, #0
 800736c:	f100 0114 	add.w	r1, r0, #20
 8007370:	f100 0210 	add.w	r2, r0, #16
 8007374:	4618      	mov	r0, r3
 8007376:	4553      	cmp	r3, sl
 8007378:	db33      	blt.n	80073e2 <__lshift+0xb6>
 800737a:	6920      	ldr	r0, [r4, #16]
 800737c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007380:	f104 0314 	add.w	r3, r4, #20
 8007384:	f019 091f 	ands.w	r9, r9, #31
 8007388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800738c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007390:	d02b      	beq.n	80073ea <__lshift+0xbe>
 8007392:	f1c9 0e20 	rsb	lr, r9, #32
 8007396:	468a      	mov	sl, r1
 8007398:	2200      	movs	r2, #0
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	fa00 f009 	lsl.w	r0, r0, r9
 80073a0:	4310      	orrs	r0, r2
 80073a2:	f84a 0b04 	str.w	r0, [sl], #4
 80073a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073aa:	459c      	cmp	ip, r3
 80073ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80073b0:	d8f3      	bhi.n	800739a <__lshift+0x6e>
 80073b2:	ebac 0304 	sub.w	r3, ip, r4
 80073b6:	3b15      	subs	r3, #21
 80073b8:	f023 0303 	bic.w	r3, r3, #3
 80073bc:	3304      	adds	r3, #4
 80073be:	f104 0015 	add.w	r0, r4, #21
 80073c2:	4560      	cmp	r0, ip
 80073c4:	bf88      	it	hi
 80073c6:	2304      	movhi	r3, #4
 80073c8:	50ca      	str	r2, [r1, r3]
 80073ca:	b10a      	cbz	r2, 80073d0 <__lshift+0xa4>
 80073cc:	f108 0602 	add.w	r6, r8, #2
 80073d0:	3e01      	subs	r6, #1
 80073d2:	4638      	mov	r0, r7
 80073d4:	612e      	str	r6, [r5, #16]
 80073d6:	4621      	mov	r1, r4
 80073d8:	f7ff fde2 	bl	8006fa0 <_Bfree>
 80073dc:	4628      	mov	r0, r5
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073e6:	3301      	adds	r3, #1
 80073e8:	e7c5      	b.n	8007376 <__lshift+0x4a>
 80073ea:	3904      	subs	r1, #4
 80073ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80073f4:	459c      	cmp	ip, r3
 80073f6:	d8f9      	bhi.n	80073ec <__lshift+0xc0>
 80073f8:	e7ea      	b.n	80073d0 <__lshift+0xa4>
 80073fa:	bf00      	nop
 80073fc:	08007e04 	.word	0x08007e04
 8007400:	08007e15 	.word	0x08007e15

08007404 <__mcmp>:
 8007404:	690a      	ldr	r2, [r1, #16]
 8007406:	4603      	mov	r3, r0
 8007408:	6900      	ldr	r0, [r0, #16]
 800740a:	1a80      	subs	r0, r0, r2
 800740c:	b530      	push	{r4, r5, lr}
 800740e:	d10e      	bne.n	800742e <__mcmp+0x2a>
 8007410:	3314      	adds	r3, #20
 8007412:	3114      	adds	r1, #20
 8007414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800741c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007424:	4295      	cmp	r5, r2
 8007426:	d003      	beq.n	8007430 <__mcmp+0x2c>
 8007428:	d205      	bcs.n	8007436 <__mcmp+0x32>
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	bd30      	pop	{r4, r5, pc}
 8007430:	42a3      	cmp	r3, r4
 8007432:	d3f3      	bcc.n	800741c <__mcmp+0x18>
 8007434:	e7fb      	b.n	800742e <__mcmp+0x2a>
 8007436:	2001      	movs	r0, #1
 8007438:	e7f9      	b.n	800742e <__mcmp+0x2a>
	...

0800743c <__mdiff>:
 800743c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	4689      	mov	r9, r1
 8007442:	4606      	mov	r6, r0
 8007444:	4611      	mov	r1, r2
 8007446:	4648      	mov	r0, r9
 8007448:	4614      	mov	r4, r2
 800744a:	f7ff ffdb 	bl	8007404 <__mcmp>
 800744e:	1e05      	subs	r5, r0, #0
 8007450:	d112      	bne.n	8007478 <__mdiff+0x3c>
 8007452:	4629      	mov	r1, r5
 8007454:	4630      	mov	r0, r6
 8007456:	f7ff fd63 	bl	8006f20 <_Balloc>
 800745a:	4602      	mov	r2, r0
 800745c:	b928      	cbnz	r0, 800746a <__mdiff+0x2e>
 800745e:	4b3f      	ldr	r3, [pc, #252]	@ (800755c <__mdiff+0x120>)
 8007460:	f240 2137 	movw	r1, #567	@ 0x237
 8007464:	483e      	ldr	r0, [pc, #248]	@ (8007560 <__mdiff+0x124>)
 8007466:	f000 fb65 	bl	8007b34 <__assert_func>
 800746a:	2301      	movs	r3, #1
 800746c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007470:	4610      	mov	r0, r2
 8007472:	b003      	add	sp, #12
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	bfbc      	itt	lt
 800747a:	464b      	movlt	r3, r9
 800747c:	46a1      	movlt	r9, r4
 800747e:	4630      	mov	r0, r6
 8007480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007484:	bfba      	itte	lt
 8007486:	461c      	movlt	r4, r3
 8007488:	2501      	movlt	r5, #1
 800748a:	2500      	movge	r5, #0
 800748c:	f7ff fd48 	bl	8006f20 <_Balloc>
 8007490:	4602      	mov	r2, r0
 8007492:	b918      	cbnz	r0, 800749c <__mdiff+0x60>
 8007494:	4b31      	ldr	r3, [pc, #196]	@ (800755c <__mdiff+0x120>)
 8007496:	f240 2145 	movw	r1, #581	@ 0x245
 800749a:	e7e3      	b.n	8007464 <__mdiff+0x28>
 800749c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074a0:	6926      	ldr	r6, [r4, #16]
 80074a2:	60c5      	str	r5, [r0, #12]
 80074a4:	f109 0310 	add.w	r3, r9, #16
 80074a8:	f109 0514 	add.w	r5, r9, #20
 80074ac:	f104 0e14 	add.w	lr, r4, #20
 80074b0:	f100 0b14 	add.w	fp, r0, #20
 80074b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	46d9      	mov	r9, fp
 80074c0:	f04f 0c00 	mov.w	ip, #0
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	fa1f f38a 	uxth.w	r3, sl
 80074d4:	4619      	mov	r1, r3
 80074d6:	b283      	uxth	r3, r0
 80074d8:	1acb      	subs	r3, r1, r3
 80074da:	0c00      	lsrs	r0, r0, #16
 80074dc:	4463      	add	r3, ip
 80074de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074ec:	4576      	cmp	r6, lr
 80074ee:	f849 3b04 	str.w	r3, [r9], #4
 80074f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074f6:	d8e5      	bhi.n	80074c4 <__mdiff+0x88>
 80074f8:	1b33      	subs	r3, r6, r4
 80074fa:	3b15      	subs	r3, #21
 80074fc:	f023 0303 	bic.w	r3, r3, #3
 8007500:	3415      	adds	r4, #21
 8007502:	3304      	adds	r3, #4
 8007504:	42a6      	cmp	r6, r4
 8007506:	bf38      	it	cc
 8007508:	2304      	movcc	r3, #4
 800750a:	441d      	add	r5, r3
 800750c:	445b      	add	r3, fp
 800750e:	461e      	mov	r6, r3
 8007510:	462c      	mov	r4, r5
 8007512:	4544      	cmp	r4, r8
 8007514:	d30e      	bcc.n	8007534 <__mdiff+0xf8>
 8007516:	f108 0103 	add.w	r1, r8, #3
 800751a:	1b49      	subs	r1, r1, r5
 800751c:	f021 0103 	bic.w	r1, r1, #3
 8007520:	3d03      	subs	r5, #3
 8007522:	45a8      	cmp	r8, r5
 8007524:	bf38      	it	cc
 8007526:	2100      	movcc	r1, #0
 8007528:	440b      	add	r3, r1
 800752a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800752e:	b191      	cbz	r1, 8007556 <__mdiff+0x11a>
 8007530:	6117      	str	r7, [r2, #16]
 8007532:	e79d      	b.n	8007470 <__mdiff+0x34>
 8007534:	f854 1b04 	ldr.w	r1, [r4], #4
 8007538:	46e6      	mov	lr, ip
 800753a:	0c08      	lsrs	r0, r1, #16
 800753c:	fa1c fc81 	uxtah	ip, ip, r1
 8007540:	4471      	add	r1, lr
 8007542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007546:	b289      	uxth	r1, r1
 8007548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800754c:	f846 1b04 	str.w	r1, [r6], #4
 8007550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007554:	e7dd      	b.n	8007512 <__mdiff+0xd6>
 8007556:	3f01      	subs	r7, #1
 8007558:	e7e7      	b.n	800752a <__mdiff+0xee>
 800755a:	bf00      	nop
 800755c:	08007e04 	.word	0x08007e04
 8007560:	08007e15 	.word	0x08007e15

08007564 <__d2b>:
 8007564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007568:	460f      	mov	r7, r1
 800756a:	2101      	movs	r1, #1
 800756c:	ec59 8b10 	vmov	r8, r9, d0
 8007570:	4616      	mov	r6, r2
 8007572:	f7ff fcd5 	bl	8006f20 <_Balloc>
 8007576:	4604      	mov	r4, r0
 8007578:	b930      	cbnz	r0, 8007588 <__d2b+0x24>
 800757a:	4602      	mov	r2, r0
 800757c:	4b23      	ldr	r3, [pc, #140]	@ (800760c <__d2b+0xa8>)
 800757e:	4824      	ldr	r0, [pc, #144]	@ (8007610 <__d2b+0xac>)
 8007580:	f240 310f 	movw	r1, #783	@ 0x30f
 8007584:	f000 fad6 	bl	8007b34 <__assert_func>
 8007588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800758c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007590:	b10d      	cbz	r5, 8007596 <__d2b+0x32>
 8007592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	f1b8 0300 	subs.w	r3, r8, #0
 800759c:	d023      	beq.n	80075e6 <__d2b+0x82>
 800759e:	4668      	mov	r0, sp
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	f7ff fd84 	bl	80070ae <__lo0bits>
 80075a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075aa:	b1d0      	cbz	r0, 80075e2 <__d2b+0x7e>
 80075ac:	f1c0 0320 	rsb	r3, r0, #32
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	430b      	orrs	r3, r1
 80075b6:	40c2      	lsrs	r2, r0
 80075b8:	6163      	str	r3, [r4, #20]
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9b01      	ldr	r3, [sp, #4]
 80075be:	61a3      	str	r3, [r4, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf0c      	ite	eq
 80075c4:	2201      	moveq	r2, #1
 80075c6:	2202      	movne	r2, #2
 80075c8:	6122      	str	r2, [r4, #16]
 80075ca:	b1a5      	cbz	r5, 80075f6 <__d2b+0x92>
 80075cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075d0:	4405      	add	r5, r0
 80075d2:	603d      	str	r5, [r7, #0]
 80075d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075d8:	6030      	str	r0, [r6, #0]
 80075da:	4620      	mov	r0, r4
 80075dc:	b003      	add	sp, #12
 80075de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075e2:	6161      	str	r1, [r4, #20]
 80075e4:	e7ea      	b.n	80075bc <__d2b+0x58>
 80075e6:	a801      	add	r0, sp, #4
 80075e8:	f7ff fd61 	bl	80070ae <__lo0bits>
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	6163      	str	r3, [r4, #20]
 80075f0:	3020      	adds	r0, #32
 80075f2:	2201      	movs	r2, #1
 80075f4:	e7e8      	b.n	80075c8 <__d2b+0x64>
 80075f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075fe:	6038      	str	r0, [r7, #0]
 8007600:	6918      	ldr	r0, [r3, #16]
 8007602:	f7ff fd35 	bl	8007070 <__hi0bits>
 8007606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800760a:	e7e5      	b.n	80075d8 <__d2b+0x74>
 800760c:	08007e04 	.word	0x08007e04
 8007610:	08007e15 	.word	0x08007e15

08007614 <__sfputc_r>:
 8007614:	6893      	ldr	r3, [r2, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	b410      	push	{r4}
 800761c:	6093      	str	r3, [r2, #8]
 800761e:	da08      	bge.n	8007632 <__sfputc_r+0x1e>
 8007620:	6994      	ldr	r4, [r2, #24]
 8007622:	42a3      	cmp	r3, r4
 8007624:	db01      	blt.n	800762a <__sfputc_r+0x16>
 8007626:	290a      	cmp	r1, #10
 8007628:	d103      	bne.n	8007632 <__sfputc_r+0x1e>
 800762a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800762e:	f7fe bc0a 	b.w	8005e46 <__swbuf_r>
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	1c58      	adds	r0, r3, #1
 8007636:	6010      	str	r0, [r2, #0]
 8007638:	7019      	strb	r1, [r3, #0]
 800763a:	4608      	mov	r0, r1
 800763c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007640:	4770      	bx	lr

08007642 <__sfputs_r>:
 8007642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007644:	4606      	mov	r6, r0
 8007646:	460f      	mov	r7, r1
 8007648:	4614      	mov	r4, r2
 800764a:	18d5      	adds	r5, r2, r3
 800764c:	42ac      	cmp	r4, r5
 800764e:	d101      	bne.n	8007654 <__sfputs_r+0x12>
 8007650:	2000      	movs	r0, #0
 8007652:	e007      	b.n	8007664 <__sfputs_r+0x22>
 8007654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007658:	463a      	mov	r2, r7
 800765a:	4630      	mov	r0, r6
 800765c:	f7ff ffda 	bl	8007614 <__sfputc_r>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d1f3      	bne.n	800764c <__sfputs_r+0xa>
 8007664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007668 <_vfiprintf_r>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	460d      	mov	r5, r1
 800766e:	b09d      	sub	sp, #116	@ 0x74
 8007670:	4614      	mov	r4, r2
 8007672:	4698      	mov	r8, r3
 8007674:	4606      	mov	r6, r0
 8007676:	b118      	cbz	r0, 8007680 <_vfiprintf_r+0x18>
 8007678:	6a03      	ldr	r3, [r0, #32]
 800767a:	b90b      	cbnz	r3, 8007680 <_vfiprintf_r+0x18>
 800767c:	f7fe fafa 	bl	8005c74 <__sinit>
 8007680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007682:	07d9      	lsls	r1, r3, #31
 8007684:	d405      	bmi.n	8007692 <_vfiprintf_r+0x2a>
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	059a      	lsls	r2, r3, #22
 800768a:	d402      	bmi.n	8007692 <_vfiprintf_r+0x2a>
 800768c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768e:	f7fe fcec 	bl	800606a <__retarget_lock_acquire_recursive>
 8007692:	89ab      	ldrh	r3, [r5, #12]
 8007694:	071b      	lsls	r3, r3, #28
 8007696:	d501      	bpl.n	800769c <_vfiprintf_r+0x34>
 8007698:	692b      	ldr	r3, [r5, #16]
 800769a:	b99b      	cbnz	r3, 80076c4 <_vfiprintf_r+0x5c>
 800769c:	4629      	mov	r1, r5
 800769e:	4630      	mov	r0, r6
 80076a0:	f7fe fc10 	bl	8005ec4 <__swsetup_r>
 80076a4:	b170      	cbz	r0, 80076c4 <_vfiprintf_r+0x5c>
 80076a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076a8:	07dc      	lsls	r4, r3, #31
 80076aa:	d504      	bpl.n	80076b6 <_vfiprintf_r+0x4e>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	b01d      	add	sp, #116	@ 0x74
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	0598      	lsls	r0, r3, #22
 80076ba:	d4f7      	bmi.n	80076ac <_vfiprintf_r+0x44>
 80076bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076be:	f7fe fcd5 	bl	800606c <__retarget_lock_release_recursive>
 80076c2:	e7f3      	b.n	80076ac <_vfiprintf_r+0x44>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c8:	2320      	movs	r3, #32
 80076ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d2:	2330      	movs	r3, #48	@ 0x30
 80076d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007884 <_vfiprintf_r+0x21c>
 80076d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076dc:	f04f 0901 	mov.w	r9, #1
 80076e0:	4623      	mov	r3, r4
 80076e2:	469a      	mov	sl, r3
 80076e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e8:	b10a      	cbz	r2, 80076ee <_vfiprintf_r+0x86>
 80076ea:	2a25      	cmp	r2, #37	@ 0x25
 80076ec:	d1f9      	bne.n	80076e2 <_vfiprintf_r+0x7a>
 80076ee:	ebba 0b04 	subs.w	fp, sl, r4
 80076f2:	d00b      	beq.n	800770c <_vfiprintf_r+0xa4>
 80076f4:	465b      	mov	r3, fp
 80076f6:	4622      	mov	r2, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ffa1 	bl	8007642 <__sfputs_r>
 8007700:	3001      	adds	r0, #1
 8007702:	f000 80a7 	beq.w	8007854 <_vfiprintf_r+0x1ec>
 8007706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007708:	445a      	add	r2, fp
 800770a:	9209      	str	r2, [sp, #36]	@ 0x24
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 809f 	beq.w	8007854 <_vfiprintf_r+0x1ec>
 8007716:	2300      	movs	r3, #0
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007720:	f10a 0a01 	add.w	sl, sl, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800772c:	931a      	str	r3, [sp, #104]	@ 0x68
 800772e:	4654      	mov	r4, sl
 8007730:	2205      	movs	r2, #5
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	4853      	ldr	r0, [pc, #332]	@ (8007884 <_vfiprintf_r+0x21c>)
 8007738:	f7f8 fd4a 	bl	80001d0 <memchr>
 800773c:	9a04      	ldr	r2, [sp, #16]
 800773e:	b9d8      	cbnz	r0, 8007778 <_vfiprintf_r+0x110>
 8007740:	06d1      	lsls	r1, r2, #27
 8007742:	bf44      	itt	mi
 8007744:	2320      	movmi	r3, #32
 8007746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800774a:	0713      	lsls	r3, r2, #28
 800774c:	bf44      	itt	mi
 800774e:	232b      	movmi	r3, #43	@ 0x2b
 8007750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007754:	f89a 3000 	ldrb.w	r3, [sl]
 8007758:	2b2a      	cmp	r3, #42	@ 0x2a
 800775a:	d015      	beq.n	8007788 <_vfiprintf_r+0x120>
 800775c:	9a07      	ldr	r2, [sp, #28]
 800775e:	4654      	mov	r4, sl
 8007760:	2000      	movs	r0, #0
 8007762:	f04f 0c0a 	mov.w	ip, #10
 8007766:	4621      	mov	r1, r4
 8007768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776c:	3b30      	subs	r3, #48	@ 0x30
 800776e:	2b09      	cmp	r3, #9
 8007770:	d94b      	bls.n	800780a <_vfiprintf_r+0x1a2>
 8007772:	b1b0      	cbz	r0, 80077a2 <_vfiprintf_r+0x13a>
 8007774:	9207      	str	r2, [sp, #28]
 8007776:	e014      	b.n	80077a2 <_vfiprintf_r+0x13a>
 8007778:	eba0 0308 	sub.w	r3, r0, r8
 800777c:	fa09 f303 	lsl.w	r3, r9, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	46a2      	mov	sl, r4
 8007786:	e7d2      	b.n	800772e <_vfiprintf_r+0xc6>
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	1d19      	adds	r1, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfbb      	ittet	lt
 8007794:	425b      	neglt	r3, r3
 8007796:	f042 0202 	orrlt.w	r2, r2, #2
 800779a:	9307      	strge	r3, [sp, #28]
 800779c:	9307      	strlt	r3, [sp, #28]
 800779e:	bfb8      	it	lt
 80077a0:	9204      	strlt	r2, [sp, #16]
 80077a2:	7823      	ldrb	r3, [r4, #0]
 80077a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a6:	d10a      	bne.n	80077be <_vfiprintf_r+0x156>
 80077a8:	7863      	ldrb	r3, [r4, #1]
 80077aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ac:	d132      	bne.n	8007814 <_vfiprintf_r+0x1ac>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9203      	str	r2, [sp, #12]
 80077b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077ba:	3402      	adds	r4, #2
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007894 <_vfiprintf_r+0x22c>
 80077c2:	7821      	ldrb	r1, [r4, #0]
 80077c4:	2203      	movs	r2, #3
 80077c6:	4650      	mov	r0, sl
 80077c8:	f7f8 fd02 	bl	80001d0 <memchr>
 80077cc:	b138      	cbz	r0, 80077de <_vfiprintf_r+0x176>
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	eba0 000a 	sub.w	r0, r0, sl
 80077d4:	2240      	movs	r2, #64	@ 0x40
 80077d6:	4082      	lsls	r2, r0
 80077d8:	4313      	orrs	r3, r2
 80077da:	3401      	adds	r4, #1
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e2:	4829      	ldr	r0, [pc, #164]	@ (8007888 <_vfiprintf_r+0x220>)
 80077e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e8:	2206      	movs	r2, #6
 80077ea:	f7f8 fcf1 	bl	80001d0 <memchr>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d03f      	beq.n	8007872 <_vfiprintf_r+0x20a>
 80077f2:	4b26      	ldr	r3, [pc, #152]	@ (800788c <_vfiprintf_r+0x224>)
 80077f4:	bb1b      	cbnz	r3, 800783e <_vfiprintf_r+0x1d6>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	3307      	adds	r3, #7
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	3308      	adds	r3, #8
 8007800:	9303      	str	r3, [sp, #12]
 8007802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007804:	443b      	add	r3, r7
 8007806:	9309      	str	r3, [sp, #36]	@ 0x24
 8007808:	e76a      	b.n	80076e0 <_vfiprintf_r+0x78>
 800780a:	fb0c 3202 	mla	r2, ip, r2, r3
 800780e:	460c      	mov	r4, r1
 8007810:	2001      	movs	r0, #1
 8007812:	e7a8      	b.n	8007766 <_vfiprintf_r+0xfe>
 8007814:	2300      	movs	r3, #0
 8007816:	3401      	adds	r4, #1
 8007818:	9305      	str	r3, [sp, #20]
 800781a:	4619      	mov	r1, r3
 800781c:	f04f 0c0a 	mov.w	ip, #10
 8007820:	4620      	mov	r0, r4
 8007822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007826:	3a30      	subs	r2, #48	@ 0x30
 8007828:	2a09      	cmp	r2, #9
 800782a:	d903      	bls.n	8007834 <_vfiprintf_r+0x1cc>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0c6      	beq.n	80077be <_vfiprintf_r+0x156>
 8007830:	9105      	str	r1, [sp, #20]
 8007832:	e7c4      	b.n	80077be <_vfiprintf_r+0x156>
 8007834:	fb0c 2101 	mla	r1, ip, r1, r2
 8007838:	4604      	mov	r4, r0
 800783a:	2301      	movs	r3, #1
 800783c:	e7f0      	b.n	8007820 <_vfiprintf_r+0x1b8>
 800783e:	ab03      	add	r3, sp, #12
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	462a      	mov	r2, r5
 8007844:	4b12      	ldr	r3, [pc, #72]	@ (8007890 <_vfiprintf_r+0x228>)
 8007846:	a904      	add	r1, sp, #16
 8007848:	4630      	mov	r0, r6
 800784a:	f7fd fdd1 	bl	80053f0 <_printf_float>
 800784e:	4607      	mov	r7, r0
 8007850:	1c78      	adds	r0, r7, #1
 8007852:	d1d6      	bne.n	8007802 <_vfiprintf_r+0x19a>
 8007854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007856:	07d9      	lsls	r1, r3, #31
 8007858:	d405      	bmi.n	8007866 <_vfiprintf_r+0x1fe>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	059a      	lsls	r2, r3, #22
 800785e:	d402      	bmi.n	8007866 <_vfiprintf_r+0x1fe>
 8007860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007862:	f7fe fc03 	bl	800606c <__retarget_lock_release_recursive>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	065b      	lsls	r3, r3, #25
 800786a:	f53f af1f 	bmi.w	80076ac <_vfiprintf_r+0x44>
 800786e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007870:	e71e      	b.n	80076b0 <_vfiprintf_r+0x48>
 8007872:	ab03      	add	r3, sp, #12
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	462a      	mov	r2, r5
 8007878:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <_vfiprintf_r+0x228>)
 800787a:	a904      	add	r1, sp, #16
 800787c:	4630      	mov	r0, r6
 800787e:	f7fe f84f 	bl	8005920 <_printf_i>
 8007882:	e7e4      	b.n	800784e <_vfiprintf_r+0x1e6>
 8007884:	08007e6e 	.word	0x08007e6e
 8007888:	08007e78 	.word	0x08007e78
 800788c:	080053f1 	.word	0x080053f1
 8007890:	08007643 	.word	0x08007643
 8007894:	08007e74 	.word	0x08007e74

08007898 <__sflush_r>:
 8007898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	0716      	lsls	r6, r2, #28
 80078a2:	4605      	mov	r5, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	d454      	bmi.n	8007952 <__sflush_r+0xba>
 80078a8:	684b      	ldr	r3, [r1, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dc02      	bgt.n	80078b4 <__sflush_r+0x1c>
 80078ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dd48      	ble.n	8007946 <__sflush_r+0xae>
 80078b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d045      	beq.n	8007946 <__sflush_r+0xae>
 80078ba:	2300      	movs	r3, #0
 80078bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078c0:	682f      	ldr	r7, [r5, #0]
 80078c2:	6a21      	ldr	r1, [r4, #32]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	d030      	beq.n	800792a <__sflush_r+0x92>
 80078c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	0759      	lsls	r1, r3, #29
 80078ce:	d505      	bpl.n	80078dc <__sflush_r+0x44>
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	1ad2      	subs	r2, r2, r3
 80078d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078d6:	b10b      	cbz	r3, 80078dc <__sflush_r+0x44>
 80078d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078da:	1ad2      	subs	r2, r2, r3
 80078dc:	2300      	movs	r3, #0
 80078de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078e0:	6a21      	ldr	r1, [r4, #32]
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b0      	blx	r6
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	d106      	bne.n	80078fa <__sflush_r+0x62>
 80078ec:	6829      	ldr	r1, [r5, #0]
 80078ee:	291d      	cmp	r1, #29
 80078f0:	d82b      	bhi.n	800794a <__sflush_r+0xb2>
 80078f2:	4a2a      	ldr	r2, [pc, #168]	@ (800799c <__sflush_r+0x104>)
 80078f4:	40ca      	lsrs	r2, r1
 80078f6:	07d6      	lsls	r6, r2, #31
 80078f8:	d527      	bpl.n	800794a <__sflush_r+0xb2>
 80078fa:	2200      	movs	r2, #0
 80078fc:	6062      	str	r2, [r4, #4]
 80078fe:	04d9      	lsls	r1, r3, #19
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	6022      	str	r2, [r4, #0]
 8007904:	d504      	bpl.n	8007910 <__sflush_r+0x78>
 8007906:	1c42      	adds	r2, r0, #1
 8007908:	d101      	bne.n	800790e <__sflush_r+0x76>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	b903      	cbnz	r3, 8007910 <__sflush_r+0x78>
 800790e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007912:	602f      	str	r7, [r5, #0]
 8007914:	b1b9      	cbz	r1, 8007946 <__sflush_r+0xae>
 8007916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800791a:	4299      	cmp	r1, r3
 800791c:	d002      	beq.n	8007924 <__sflush_r+0x8c>
 800791e:	4628      	mov	r0, r5
 8007920:	f7ff f9fe 	bl	8006d20 <_free_r>
 8007924:	2300      	movs	r3, #0
 8007926:	6363      	str	r3, [r4, #52]	@ 0x34
 8007928:	e00d      	b.n	8007946 <__sflush_r+0xae>
 800792a:	2301      	movs	r3, #1
 800792c:	4628      	mov	r0, r5
 800792e:	47b0      	blx	r6
 8007930:	4602      	mov	r2, r0
 8007932:	1c50      	adds	r0, r2, #1
 8007934:	d1c9      	bne.n	80078ca <__sflush_r+0x32>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0c6      	beq.n	80078ca <__sflush_r+0x32>
 800793c:	2b1d      	cmp	r3, #29
 800793e:	d001      	beq.n	8007944 <__sflush_r+0xac>
 8007940:	2b16      	cmp	r3, #22
 8007942:	d11e      	bne.n	8007982 <__sflush_r+0xea>
 8007944:	602f      	str	r7, [r5, #0]
 8007946:	2000      	movs	r0, #0
 8007948:	e022      	b.n	8007990 <__sflush_r+0xf8>
 800794a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800794e:	b21b      	sxth	r3, r3
 8007950:	e01b      	b.n	800798a <__sflush_r+0xf2>
 8007952:	690f      	ldr	r7, [r1, #16]
 8007954:	2f00      	cmp	r7, #0
 8007956:	d0f6      	beq.n	8007946 <__sflush_r+0xae>
 8007958:	0793      	lsls	r3, r2, #30
 800795a:	680e      	ldr	r6, [r1, #0]
 800795c:	bf08      	it	eq
 800795e:	694b      	ldreq	r3, [r1, #20]
 8007960:	600f      	str	r7, [r1, #0]
 8007962:	bf18      	it	ne
 8007964:	2300      	movne	r3, #0
 8007966:	eba6 0807 	sub.w	r8, r6, r7
 800796a:	608b      	str	r3, [r1, #8]
 800796c:	f1b8 0f00 	cmp.w	r8, #0
 8007970:	dde9      	ble.n	8007946 <__sflush_r+0xae>
 8007972:	6a21      	ldr	r1, [r4, #32]
 8007974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007976:	4643      	mov	r3, r8
 8007978:	463a      	mov	r2, r7
 800797a:	4628      	mov	r0, r5
 800797c:	47b0      	blx	r6
 800797e:	2800      	cmp	r0, #0
 8007980:	dc08      	bgt.n	8007994 <__sflush_r+0xfc>
 8007982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	4407      	add	r7, r0
 8007996:	eba8 0800 	sub.w	r8, r8, r0
 800799a:	e7e7      	b.n	800796c <__sflush_r+0xd4>
 800799c:	20400001 	.word	0x20400001

080079a0 <_fflush_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b913      	cbnz	r3, 80079b0 <_fflush_r+0x10>
 80079aa:	2500      	movs	r5, #0
 80079ac:	4628      	mov	r0, r5
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	b118      	cbz	r0, 80079ba <_fflush_r+0x1a>
 80079b2:	6a03      	ldr	r3, [r0, #32]
 80079b4:	b90b      	cbnz	r3, 80079ba <_fflush_r+0x1a>
 80079b6:	f7fe f95d 	bl	8005c74 <__sinit>
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f3      	beq.n	80079aa <_fflush_r+0xa>
 80079c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079c4:	07d0      	lsls	r0, r2, #31
 80079c6:	d404      	bmi.n	80079d2 <_fflush_r+0x32>
 80079c8:	0599      	lsls	r1, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_fflush_r+0x32>
 80079cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ce:	f7fe fb4c 	bl	800606a <__retarget_lock_acquire_recursive>
 80079d2:	4628      	mov	r0, r5
 80079d4:	4621      	mov	r1, r4
 80079d6:	f7ff ff5f 	bl	8007898 <__sflush_r>
 80079da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079dc:	07da      	lsls	r2, r3, #31
 80079de:	4605      	mov	r5, r0
 80079e0:	d4e4      	bmi.n	80079ac <_fflush_r+0xc>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	059b      	lsls	r3, r3, #22
 80079e6:	d4e1      	bmi.n	80079ac <_fflush_r+0xc>
 80079e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ea:	f7fe fb3f 	bl	800606c <__retarget_lock_release_recursive>
 80079ee:	e7dd      	b.n	80079ac <_fflush_r+0xc>

080079f0 <__swhatbuf_r>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	b096      	sub	sp, #88	@ 0x58
 80079fc:	4615      	mov	r5, r2
 80079fe:	461e      	mov	r6, r3
 8007a00:	da0d      	bge.n	8007a1e <__swhatbuf_r+0x2e>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2340      	movne	r3, #64	@ 0x40
 8007a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a14:	2000      	movs	r0, #0
 8007a16:	6031      	str	r1, [r6, #0]
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	b016      	add	sp, #88	@ 0x58
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f000 f848 	bl	8007ab4 <_fstat_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dbec      	blt.n	8007a02 <__swhatbuf_r+0x12>
 8007a28:	9901      	ldr	r1, [sp, #4]
 8007a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a32:	4259      	negs	r1, r3
 8007a34:	4159      	adcs	r1, r3
 8007a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a3a:	e7eb      	b.n	8007a14 <__swhatbuf_r+0x24>

08007a3c <__smakebuf_r>:
 8007a3c:	898b      	ldrh	r3, [r1, #12]
 8007a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a40:	079d      	lsls	r5, r3, #30
 8007a42:	4606      	mov	r6, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	d507      	bpl.n	8007a58 <__smakebuf_r+0x1c>
 8007a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	2301      	movs	r3, #1
 8007a52:	6163      	str	r3, [r4, #20]
 8007a54:	b003      	add	sp, #12
 8007a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a58:	ab01      	add	r3, sp, #4
 8007a5a:	466a      	mov	r2, sp
 8007a5c:	f7ff ffc8 	bl	80079f0 <__swhatbuf_r>
 8007a60:	9f00      	ldr	r7, [sp, #0]
 8007a62:	4605      	mov	r5, r0
 8007a64:	4639      	mov	r1, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff f9ce 	bl	8006e08 <_malloc_r>
 8007a6c:	b948      	cbnz	r0, 8007a82 <__smakebuf_r+0x46>
 8007a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a72:	059a      	lsls	r2, r3, #22
 8007a74:	d4ee      	bmi.n	8007a54 <__smakebuf_r+0x18>
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	f043 0302 	orr.w	r3, r3, #2
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	e7e2      	b.n	8007a48 <__smakebuf_r+0xc>
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	6020      	str	r0, [r4, #0]
 8007a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a92:	b15b      	cbz	r3, 8007aac <__smakebuf_r+0x70>
 8007a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f81d 	bl	8007ad8 <_isatty_r>
 8007a9e:	b128      	cbz	r0, 8007aac <__smakebuf_r+0x70>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	431d      	orrs	r5, r3
 8007ab0:	81a5      	strh	r5, [r4, #12]
 8007ab2:	e7cf      	b.n	8007a54 <__smakebuf_r+0x18>

08007ab4 <_fstat_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	@ (8007ad4 <_fstat_r+0x20>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	f7fa f9d6 	bl	8001e72 <_fstat>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	d102      	bne.n	8007ad0 <_fstat_r+0x1c>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	b103      	cbz	r3, 8007ad0 <_fstat_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000052c 	.word	0x2000052c

08007ad8 <_isatty_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d06      	ldr	r5, [pc, #24]	@ (8007af4 <_isatty_r+0x1c>)
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f7fa f9d5 	bl	8001e92 <_isatty>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_isatty_r+0x1a>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_isatty_r+0x1a>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	2000052c 	.word	0x2000052c

08007af8 <_sbrk_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	@ (8007b14 <_sbrk_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7fa f9de 	bl	8001ec4 <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_sbrk_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_sbrk_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	2000052c 	.word	0x2000052c

08007b18 <memcpy>:
 8007b18:	440a      	add	r2, r1
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b20:	d100      	bne.n	8007b24 <memcpy+0xc>
 8007b22:	4770      	bx	lr
 8007b24:	b510      	push	{r4, lr}
 8007b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	d1f9      	bne.n	8007b26 <memcpy+0xe>
 8007b32:	bd10      	pop	{r4, pc}

08007b34 <__assert_func>:
 8007b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b36:	4614      	mov	r4, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4b09      	ldr	r3, [pc, #36]	@ (8007b60 <__assert_func+0x2c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	68d8      	ldr	r0, [r3, #12]
 8007b42:	b14c      	cbz	r4, 8007b58 <__assert_func+0x24>
 8007b44:	4b07      	ldr	r3, [pc, #28]	@ (8007b64 <__assert_func+0x30>)
 8007b46:	9100      	str	r1, [sp, #0]
 8007b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b4c:	4906      	ldr	r1, [pc, #24]	@ (8007b68 <__assert_func+0x34>)
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f000 f842 	bl	8007bd8 <fiprintf>
 8007b54:	f000 f852 	bl	8007bfc <abort>
 8007b58:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <__assert_func+0x38>)
 8007b5a:	461c      	mov	r4, r3
 8007b5c:	e7f3      	b.n	8007b46 <__assert_func+0x12>
 8007b5e:	bf00      	nop
 8007b60:	20000028 	.word	0x20000028
 8007b64:	08007e89 	.word	0x08007e89
 8007b68:	08007e96 	.word	0x08007e96
 8007b6c:	08007ec4 	.word	0x08007ec4

08007b70 <_calloc_r>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	fba1 5402 	umull	r5, r4, r1, r2
 8007b76:	b934      	cbnz	r4, 8007b86 <_calloc_r+0x16>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7ff f945 	bl	8006e08 <_malloc_r>
 8007b7e:	4606      	mov	r6, r0
 8007b80:	b928      	cbnz	r0, 8007b8e <_calloc_r+0x1e>
 8007b82:	4630      	mov	r0, r6
 8007b84:	bd70      	pop	{r4, r5, r6, pc}
 8007b86:	220c      	movs	r2, #12
 8007b88:	6002      	str	r2, [r0, #0]
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	e7f9      	b.n	8007b82 <_calloc_r+0x12>
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4621      	mov	r1, r4
 8007b92:	f7fe f9ed 	bl	8005f70 <memset>
 8007b96:	e7f4      	b.n	8007b82 <_calloc_r+0x12>

08007b98 <__ascii_mbtowc>:
 8007b98:	b082      	sub	sp, #8
 8007b9a:	b901      	cbnz	r1, 8007b9e <__ascii_mbtowc+0x6>
 8007b9c:	a901      	add	r1, sp, #4
 8007b9e:	b142      	cbz	r2, 8007bb2 <__ascii_mbtowc+0x1a>
 8007ba0:	b14b      	cbz	r3, 8007bb6 <__ascii_mbtowc+0x1e>
 8007ba2:	7813      	ldrb	r3, [r2, #0]
 8007ba4:	600b      	str	r3, [r1, #0]
 8007ba6:	7812      	ldrb	r2, [r2, #0]
 8007ba8:	1e10      	subs	r0, r2, #0
 8007baa:	bf18      	it	ne
 8007bac:	2001      	movne	r0, #1
 8007bae:	b002      	add	sp, #8
 8007bb0:	4770      	bx	lr
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	e7fb      	b.n	8007bae <__ascii_mbtowc+0x16>
 8007bb6:	f06f 0001 	mvn.w	r0, #1
 8007bba:	e7f8      	b.n	8007bae <__ascii_mbtowc+0x16>

08007bbc <__ascii_wctomb>:
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	b141      	cbz	r1, 8007bd4 <__ascii_wctomb+0x18>
 8007bc2:	2aff      	cmp	r2, #255	@ 0xff
 8007bc4:	d904      	bls.n	8007bd0 <__ascii_wctomb+0x14>
 8007bc6:	228a      	movs	r2, #138	@ 0x8a
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	4770      	bx	lr
 8007bd0:	700a      	strb	r2, [r1, #0]
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	4770      	bx	lr
	...

08007bd8 <fiprintf>:
 8007bd8:	b40e      	push	{r1, r2, r3}
 8007bda:	b503      	push	{r0, r1, lr}
 8007bdc:	4601      	mov	r1, r0
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	4805      	ldr	r0, [pc, #20]	@ (8007bf8 <fiprintf+0x20>)
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f7ff fd3d 	bl	8007668 <_vfiprintf_r>
 8007bee:	b002      	add	sp, #8
 8007bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	4770      	bx	lr
 8007bf8:	20000028 	.word	0x20000028

08007bfc <abort>:
 8007bfc:	b508      	push	{r3, lr}
 8007bfe:	2006      	movs	r0, #6
 8007c00:	f000 f82c 	bl	8007c5c <raise>
 8007c04:	2001      	movs	r0, #1
 8007c06:	f7fa f8e4 	bl	8001dd2 <_exit>

08007c0a <_raise_r>:
 8007c0a:	291f      	cmp	r1, #31
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4605      	mov	r5, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	d904      	bls.n	8007c1e <_raise_r+0x14>
 8007c14:	2316      	movs	r3, #22
 8007c16:	6003      	str	r3, [r0, #0]
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c20:	b112      	cbz	r2, 8007c28 <_raise_r+0x1e>
 8007c22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c26:	b94b      	cbnz	r3, 8007c3c <_raise_r+0x32>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f831 	bl	8007c90 <_getpid_r>
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4601      	mov	r1, r0
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f000 b818 	b.w	8007c6c <_kill_r>
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d00a      	beq.n	8007c56 <_raise_r+0x4c>
 8007c40:	1c59      	adds	r1, r3, #1
 8007c42:	d103      	bne.n	8007c4c <_raise_r+0x42>
 8007c44:	2316      	movs	r3, #22
 8007c46:	6003      	str	r3, [r0, #0]
 8007c48:	2001      	movs	r0, #1
 8007c4a:	e7e7      	b.n	8007c1c <_raise_r+0x12>
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c52:	4620      	mov	r0, r4
 8007c54:	4798      	blx	r3
 8007c56:	2000      	movs	r0, #0
 8007c58:	e7e0      	b.n	8007c1c <_raise_r+0x12>
	...

08007c5c <raise>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	@ (8007c68 <raise+0xc>)
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f7ff bfd2 	b.w	8007c0a <_raise_r>
 8007c66:	bf00      	nop
 8007c68:	20000028 	.word	0x20000028

08007c6c <_kill_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d07      	ldr	r5, [pc, #28]	@ (8007c8c <_kill_r+0x20>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	f7fa f89a 	bl	8001db2 <_kill>
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d102      	bne.n	8007c88 <_kill_r+0x1c>
 8007c82:	682b      	ldr	r3, [r5, #0]
 8007c84:	b103      	cbz	r3, 8007c88 <_kill_r+0x1c>
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	bd38      	pop	{r3, r4, r5, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2000052c 	.word	0x2000052c

08007c90 <_getpid_r>:
 8007c90:	f7fa b887 	b.w	8001da2 <_getpid>

08007c94 <_init>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr

08007ca0 <_fini>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	bf00      	nop
 8007ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca6:	bc08      	pop	{r3}
 8007ca8:	469e      	mov	lr, r3
 8007caa:	4770      	bx	lr
