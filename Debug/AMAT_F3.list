
AMAT_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008568  08008568  00009568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ec  080089ec  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f4  080089f4  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000099f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089f8  080089f8  000099f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080089fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e4  2**0
                  CONTENTS
 10 .bss          000003ac  200001e4  200001e4  0000a1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  0000a1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001127e  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002763  00000000  00000000  0001b492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0001dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc7  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db5c  00000000  00000000  0001f6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001436c  00000000  00000000  0003d23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae089  00000000  00000000  000515a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff630  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f44  00000000  00000000  000ff674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001045b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800854c 	.word	0x0800854c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800854c 	.word	0x0800854c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <ds18b20_init>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  return wire_init();
 8000c4c:	f001 faf2 	bl	8002234 <wire_init>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000c62:	f001 fb09 	bl	8002278 <wire_reset>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <send_cmd+0x1a>
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e01e      	b.n	8000cae <send_cmd+0x58>

  if (!rom_code) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d103      	bne.n	8000c7e <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000c76:	20cc      	movs	r0, #204	@ 0xcc
 8000c78:	f001 fba6 	bl	80023c8 <wire_write>
 8000c7c:	e012      	b.n	8000ca4 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000c7e:	2055      	movs	r0, #85	@ 0x55
 8000c80:	f001 fba2 	bl	80023c8 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e009      	b.n	8000c9e <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fb98 	bl	80023c8 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	ddf2      	ble.n	8000c8a <send_cmd+0x34>
  }
  wire_write(cmd);
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fb8e 	bl	80023c8 <wire_write>
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <ds18b20_start_measure>:


HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000cbe:	2144      	movs	r1, #68	@ 0x44
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffc8 	bl	8000c56 <send_cmd>
 8000cc6:	4603      	mov	r3, r0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000cda:	21be      	movs	r1, #190	@ 0xbe
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffba 	bl	8000c56 <send_cmd>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e01e      	b.n	8000d2a <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e009      	b.n	8000d06 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	18d4      	adds	r4, r2, r3
 8000cf8:	f001 fb13 	bl	8002322 <wire_read>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	ddf2      	ble.n	8000cf2 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f001 fba2 	bl	8002458 <wire_crc>
 8000d14:	4603      	mov	r3, r0
 8000d16:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	7afa      	ldrb	r2, [r7, #11]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d101      	bne.n	8000d28 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e000      	b.n	8000d2a <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}
	...

08000d34 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffc4 	bl	8000cd0 <ds18b20_read_scratchpad>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <ds18b20_get_temp+0x20>
    return 85.0f;
 8000d4e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000d7c <ds18b20_get_temp+0x48>
 8000d52:	e00b      	b.n	8000d6c <ds18b20_get_temp+0x38>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000d54:	89bb      	ldrh	r3, [r7, #12]
 8000d56:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000d58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d64:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000d68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8000d6c:	eef0 7a47 	vmov.f32	s15, s14
 8000d70:	eeb0 0a67 	vmov.f32	s0, s15
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	42aa0000 	.word	0x42aa0000

08000d80 <module_active>:
float prev_values2[4]={0};
float prev_values3[4]={0};
float prev_values4[4]={0};
float prev_values5[4]={0};

void module_active(Module *module, int id){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	if((module->values[6]>2000)){
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d90:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000db8 <module_active+0x38>
 8000d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	dc00      	bgt.n	8000da0 <module_active+0x20>
		module->active = true;
		printf("Detected module number: %d\r\n", id);
	}

}
 8000d9e:	e006      	b.n	8000dae <module_active+0x2e>
		module->active = true;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
		printf("Detected module number: %d\r\n", id);
 8000da6:	6839      	ldr	r1, [r7, #0]
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <module_active+0x3c>)
 8000daa:	f005 fbf3 	bl	8006594 <iprintf>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	44fa0000 	.word	0x44fa0000
 8000dbc:	08008568 	.word	0x08008568

08000dc0 <modules_init>:

void modules_init(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]


	module_active(module1,1);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff ffd5 	bl	8000d80 <module_active>
	module_active(module2,2);
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	68b8      	ldr	r0, [r7, #8]
 8000dda:	f7ff ffd1 	bl	8000d80 <module_active>
	module_active(module3,3);
 8000dde:	2103      	movs	r1, #3
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffcd 	bl	8000d80 <module_active>
	module_active(module4,4);
 8000de6:	2104      	movs	r1, #4
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f7ff ffc9 	bl	8000d80 <module_active>
	module_active(module5,5);
 8000dee:	2105      	movs	r1, #5
 8000df0:	69b8      	ldr	r0, [r7, #24]
 8000df2:	f7ff ffc5 	bl	8000d80 <module_active>

	// if not active we're not waiting to heat

	if (!module1->active) module1->heated = 1;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	f083 0301 	eor.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <modules_init+0x4a>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2201      	movs	r2, #1
 8000e08:	605a      	str	r2, [r3, #4]
	if (!module2->active) module2->heated = 1;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <modules_init+0x5e>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	605a      	str	r2, [r3, #4]
	if (!module3->active) module3->heated = 1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <modules_init+0x72>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
	if (!module4->active) module4->heated = 1;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f083 0301 	eor.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <modules_init+0x86>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2201      	movs	r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
	if (!module5->active) module5->heated = 1;
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f083 0301 	eor.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <modules_init+0x9a>
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2201      	movs	r2, #1
 8000e58:	605a      	str	r2, [r3, #4]


}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <is_module_heated>:
void is_module_heated(Module *module, float *prev_values){
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]

	// let's assume it's heating and then try to deny

    module->heated = 1;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	605a      	str	r2, [r3, #4]


	for (int i = 0; i < 4; i++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	e01e      	b.n	8000eb6 <is_module_heated+0x54>
	        if (abs(module->values[i] - prev_values[i]) > 2) {
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bfb8      	it	lt
 8000ea2:	425b      	neglt	r3, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	dd03      	ble.n	8000eb0 <is_module_heated+0x4e>
	            module->heated = 0; /*if just one value differs from the previous one more than 2 units (around 1,6 mV)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
	            we consider the module to be still heating */
	            break;
 8000eae:	e005      	b.n	8000ebc <is_module_heated+0x5a>
	for (int i = 0; i < 4; i++) {
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	dddd      	ble.n	8000e78 <is_module_heated+0x16>
	        }
	    }

	    for (int j = 0; j < 4; j++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	e00d      	b.n	8000ede <is_module_heated+0x7c>
	           prev_values[j] = module->values[j];
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	3202      	adds	r2, #2
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	440a      	add	r2, r1
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	ddee      	ble.n	8000ec2 <is_module_heated+0x60>
	       }

}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <all_heated>:

bool all_heated(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5, uint16_t *heating_counter){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]

		/* checks if all the modules have heated or the heating time is over 4 hours */

	static bool printed = false;

    if ((module1->heated == 1 && module2->heated == 1 && module3->heated == 1 && module4->heated == 1 && module5->heated == 1) || (*heating_counter == 12)){
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10f      	bne.n	8000f2a <all_heated+0x36>
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10b      	bne.n	8000f2a <all_heated+0x36>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d107      	bne.n	8000f2a <all_heated+0x36>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d103      	bne.n	8000f2a <all_heated+0x36>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d003      	beq.n	8000f32 <all_heated+0x3e>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d114      	bne.n	8000f5c <all_heated+0x68>

        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2102      	movs	r1, #2
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f002 fcf1 	bl	8003920 <HAL_GPIO_WritePin>
        if (!printed) {
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <all_heated+0x74>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <all_heated+0x64>
                   printf("ALL_HEATED\r\n");
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <all_heated+0x78>)
 8000f4e:	f005 fb89 	bl	8006664 <puts>
                   printed = true;
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <all_heated+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
               }
        return true;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <all_heated+0x6a>

    }
    return false;
 8000f5c:	2300      	movs	r3, #0

}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000250 	.word	0x20000250
 8000f6c:	08008588 	.word	0x08008588

08000f70 <modules_heating>:

void modules_heating(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5, uint16_t *heating_counter,float *vtec){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]

		/* controls the process of heating the modules*/



	while(!all_heated(module1,module2,module3,module4, module5, heating_counter)){
 8000f7e:	e0a3      	b.n	80010c8 <modules_heating+0x158>

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2102      	movs	r1, #2
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f88:	f002 fcca 	bl	8003920 <HAL_GPIO_WritePin>
		measurement(module1,module2,module3,module4, module5,vtec);
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 fd20 	bl	80019e0 <measurement>
		printf("Heating in progress...\r\n");
 8000fa0:	4855      	ldr	r0, [pc, #340]	@ (80010f8 <modules_heating+0x188>)
 8000fa2:	f005 fb5f 	bl	8006664 <puts>

		 if (module1->active && module1->heated == 0) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <modules_heating+0x4e>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <modules_heating+0x4e>
				//	HAL_GPIO_WritePin(P2_LED_GPIO_Port, P2_LED_Pin, GPIO_PIN_SET);
					is_module_heated(module1,prev_values1);
 8000fb6:	4951      	ldr	r1, [pc, #324]	@ (80010fc <modules_heating+0x18c>)
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff ff52 	bl	8000e62 <is_module_heated>
				/*        if (module1->heated == 1) {
				                    HAL_GPIO_WritePin(P2_LED_GPIO_Port, P2_LED_Pin, GPIO_PIN_RESET);
				    	} */
				 }
		 if (module2->active && module2->heated == 0) {
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d015      	beq.n	8000ff2 <modules_heating+0x82>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d111      	bne.n	8000ff2 <modules_heating+0x82>
			 	  HAL_GPIO_WritePin(P3_LED_GPIO_Port, P3_LED_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	484b      	ldr	r0, [pc, #300]	@ (8001100 <modules_heating+0x190>)
 8000fd4:	f002 fca4 	bl	8003920 <HAL_GPIO_WritePin>
				   is_module_heated(module2,prev_values2);
 8000fd8:	494a      	ldr	r1, [pc, #296]	@ (8001104 <modules_heating+0x194>)
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f7ff ff41 	bl	8000e62 <is_module_heated>
				       if (module2->heated == 1) {
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d104      	bne.n	8000ff2 <modules_heating+0x82>
				                    HAL_GPIO_WritePin(P3_LED_GPIO_Port, P3_LED_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2108      	movs	r1, #8
 8000fec:	4844      	ldr	r0, [pc, #272]	@ (8001100 <modules_heating+0x190>)
 8000fee:	f002 fc97 	bl	8003920 <HAL_GPIO_WritePin>
				    	}
				    }
		 if (module3->active && module3->heated == 0) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <modules_heating+0xb6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d111      	bne.n	8001026 <modules_heating+0xb6>
				  HAL_GPIO_WritePin(P4_LED_GPIO_Port, P4_LED_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2101      	movs	r1, #1
 8001006:	483e      	ldr	r0, [pc, #248]	@ (8001100 <modules_heating+0x190>)
 8001008:	f002 fc8a 	bl	8003920 <HAL_GPIO_WritePin>
				   is_module_heated(module3,prev_values3);
 800100c:	493e      	ldr	r1, [pc, #248]	@ (8001108 <modules_heating+0x198>)
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff27 	bl	8000e62 <is_module_heated>
				      if (module3->heated == 1) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d104      	bne.n	8001026 <modules_heating+0xb6>
				                    HAL_GPIO_WritePin(P4_LED_GPIO_Port, P4_LED_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2101      	movs	r1, #1
 8001020:	4837      	ldr	r0, [pc, #220]	@ (8001100 <modules_heating+0x190>)
 8001022:	f002 fc7d 	bl	8003920 <HAL_GPIO_WritePin>
				    	}
				    }
		 if (module4->active && module4->heated == 0) {
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d019      	beq.n	8001062 <modules_heating+0xf2>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d115      	bne.n	8001062 <modules_heating+0xf2>
				   HAL_GPIO_WritePin(P5_LED_GPIO_Port, P5_LED_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f002 fc6e 	bl	8003920 <HAL_GPIO_WritePin>
			       is_module_heated(module4,prev_values4);
 8001044:	4931      	ldr	r1, [pc, #196]	@ (800110c <modules_heating+0x19c>)
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f7ff ff0b 	bl	8000e62 <is_module_heated>
				        if (module4->heated == 1) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <modules_heating+0xf2>
				                    HAL_GPIO_WritePin(P5_LED_GPIO_Port, P5_LED_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f002 fc5f 	bl	8003920 <HAL_GPIO_WritePin>
				    	}
				    }
		 if (module5->active && module5->heated == 0) {
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d017      	beq.n	800109a <modules_heating+0x12a>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d113      	bne.n	800109a <modules_heating+0x12a>
				  	HAL_GPIO_WritePin(P6_LED_GPIO_Port, P6_LED_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107a:	f002 fc51 	bl	8003920 <HAL_GPIO_WritePin>
				   is_module_heated(module5,prev_values5);
 800107e:	4924      	ldr	r1, [pc, #144]	@ (8001110 <modules_heating+0x1a0>)
 8001080:	69b8      	ldr	r0, [r7, #24]
 8001082:	f7ff feee 	bl	8000e62 <is_module_heated>
				          if (module5->heated == 1) {
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d105      	bne.n	800109a <modules_heating+0x12a>
				                    HAL_GPIO_WritePin(P6_LED_GPIO_Port, P6_LED_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f002 fc43 	bl	8003920 <HAL_GPIO_WritePin>
				        }
				    }

		 if (all_heated(module1, module2, module3, module4, module5, heating_counter)) {
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff ff23 	bl	8000ef4 <all_heated>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d11b      	bne.n	80010ec <modules_heating+0x17c>
		            break;
		        }

		 (*heating_counter)++;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	801a      	strh	r2, [r3, #0]

		 HAL_Delay(HEATING_TIME);
 80010c0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010c4:	f001 fa7a 	bl	80025bc <HAL_Delay>
	while(!all_heated(module1,module2,module3,module4, module5, heating_counter)){
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ff0c 	bl	8000ef4 <all_heated>
 80010dc:	4603      	mov	r3, r0
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f af4b 	bne.w	8000f80 <modules_heating+0x10>


	}
}
 80010ea:	e000      	b.n	80010ee <modules_heating+0x17e>
		            break;
 80010ec:	bf00      	nop
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	08008594 	.word	0x08008594
 80010fc:	20000200 	.word	0x20000200
 8001100:	48000400 	.word	0x48000400
 8001104:	20000210 	.word	0x20000210
 8001108:	20000220 	.word	0x20000220
 800110c:	20000230 	.word	0x20000230
 8001110:	20000240 	.word	0x20000240

08001114 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d102      	bne.n	8001128 <__io_putchar+0x14>
    __io_putchar('\r');
 8001122:	200d      	movs	r0, #13
 8001124:	f7ff fff6 	bl	8001114 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <__io_putchar+0x2c>)
 8001132:	f004 f93d 	bl	80053b0 <HAL_UART_Transmit>

  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002a0 	.word	0x200002a0

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001148:	b09c      	sub	sp, #112	@ 0x70
 800114a:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f001 f9d0 	bl	80024f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 fa56 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 fb8e 	bl	8001874 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001158:	f000 faac 	bl	80016b4 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fb5a 	bl	8001814 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001160:	f000 fb22 	bl	80017a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8001164:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001168:	f001 fa28 	bl	80025bc <HAL_Delay>


  callibration();
 800116c:	f000 fbf4 	bl	8001958 <callibration>

  for(int i =0; i<4;i++){
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001174:	e00c      	b.n	8001190 <main+0x4c>
	  measurement(&m1,&m2,&m3,&m4,&m5,&vtec);
 8001176:	4ba5      	ldr	r3, [pc, #660]	@ (800140c <main+0x2c8>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4ba5      	ldr	r3, [pc, #660]	@ (8001410 <main+0x2cc>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4ba5      	ldr	r3, [pc, #660]	@ (8001414 <main+0x2d0>)
 8001180:	4aa5      	ldr	r2, [pc, #660]	@ (8001418 <main+0x2d4>)
 8001182:	49a6      	ldr	r1, [pc, #664]	@ (800141c <main+0x2d8>)
 8001184:	48a6      	ldr	r0, [pc, #664]	@ (8001420 <main+0x2dc>)
 8001186:	f000 fc2b 	bl	80019e0 <measurement>
  for(int i =0; i<4;i++){
 800118a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118c:	3301      	adds	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001192:	2b03      	cmp	r3, #3
 8001194:	ddef      	ble.n	8001176 <main+0x32>

  }

  modules_init(&m1,&m2,&m3,&m4,&m5);
 8001196:	4b9e      	ldr	r3, [pc, #632]	@ (8001410 <main+0x2cc>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4b9e      	ldr	r3, [pc, #632]	@ (8001414 <main+0x2d0>)
 800119c:	4a9e      	ldr	r2, [pc, #632]	@ (8001418 <main+0x2d4>)
 800119e:	499f      	ldr	r1, [pc, #636]	@ (800141c <main+0x2d8>)
 80011a0:	489f      	ldr	r0, [pc, #636]	@ (8001420 <main+0x2dc>)
 80011a2:	f7ff fe0d 	bl	8000dc0 <modules_init>

	  if (ds18b20_init() != HAL_OK) {
 80011a6:	f7ff fd4f 	bl	8000c48 <ds18b20_init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <main+0x70>
	    Error_Handler();
 80011b0:	f000 fbcc 	bl	800194c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	    measurement(&m1,&m2,&m3,&m4,&m5,&vtec);
 80011b4:	4b95      	ldr	r3, [pc, #596]	@ (800140c <main+0x2c8>)
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	4b95      	ldr	r3, [pc, #596]	@ (8001410 <main+0x2cc>)
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	4b95      	ldr	r3, [pc, #596]	@ (8001414 <main+0x2d0>)
 80011be:	4a96      	ldr	r2, [pc, #600]	@ (8001418 <main+0x2d4>)
 80011c0:	4996      	ldr	r1, [pc, #600]	@ (800141c <main+0x2d8>)
 80011c2:	4897      	ldr	r0, [pc, #604]	@ (8001420 <main+0x2dc>)
 80011c4:	f000 fc0c 	bl	80019e0 <measurement>
	  		modules_heating(&m1,&m2,&m3,&m4,&m5,&heating_counter,&vtec);
 80011c8:	4b90      	ldr	r3, [pc, #576]	@ (800140c <main+0x2c8>)
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	4b95      	ldr	r3, [pc, #596]	@ (8001424 <main+0x2e0>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001410 <main+0x2cc>)
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001414 <main+0x2d0>)
 80011d6:	4a90      	ldr	r2, [pc, #576]	@ (8001418 <main+0x2d4>)
 80011d8:	4990      	ldr	r1, [pc, #576]	@ (800141c <main+0x2d8>)
 80011da:	4891      	ldr	r0, [pc, #580]	@ (8001420 <main+0x2dc>)
 80011dc:	f7ff fec8 	bl	8000f70 <modules_heating>

		  	  ds18b20_start_measure(ds1);
 80011e0:	4891      	ldr	r0, [pc, #580]	@ (8001428 <main+0x2e4>)
 80011e2:	f7ff fd68 	bl	8000cb6 <ds18b20_start_measure>
		  	  ds18b20_start_measure(ds2);
 80011e6:	4891      	ldr	r0, [pc, #580]	@ (800142c <main+0x2e8>)
 80011e8:	f7ff fd65 	bl	8000cb6 <ds18b20_start_measure>

		  	  HAL_Delay(750);
 80011ec:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80011f0:	f001 f9e4 	bl	80025bc <HAL_Delay>

		  	  temp1 = ds18b20_get_temp(ds1);
 80011f4:	488c      	ldr	r0, [pc, #560]	@ (8001428 <main+0x2e4>)
 80011f6:	f7ff fd9d 	bl	8000d34 <ds18b20_get_temp>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001430 <main+0x2ec>)
 8001200:	edc3 7a00 	vstr	s15, [r3]

		  	   if (temp1 <= -80.0f)
 8001204:	4b8a      	ldr	r3, [pc, #552]	@ (8001430 <main+0x2ec>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001434 <main+0x2f0>
 800120e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001216:	d802      	bhi.n	800121e <main+0xda>
		  	      printf("Sensor error (1)...\n");
 8001218:	4887      	ldr	r0, [pc, #540]	@ (8001438 <main+0x2f4>)
 800121a:	f005 fa23 	bl	8006664 <puts>

		  	    temp2 = ds18b20_get_temp(ds2);
 800121e:	4883      	ldr	r0, [pc, #524]	@ (800142c <main+0x2e8>)
 8001220:	f7ff fd88 	bl	8000d34 <ds18b20_get_temp>
 8001224:	eef0 7a40 	vmov.f32	s15, s0
 8001228:	4b84      	ldr	r3, [pc, #528]	@ (800143c <main+0x2f8>)
 800122a:	edc3 7a00 	vstr	s15, [r3]

		  	    if (temp2 <= -80.0f)
 800122e:	4b83      	ldr	r3, [pc, #524]	@ (800143c <main+0x2f8>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001434 <main+0x2f0>
 8001238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d802      	bhi.n	8001248 <main+0x104>
		  	      printf("Sensor error (2)...\n");
 8001242:	487f      	ldr	r0, [pc, #508]	@ (8001440 <main+0x2fc>)
 8001244:	f005 fa0e 	bl	8006664 <puts>

	  		values_eval(m1.values, &vtec);
 8001248:	4970      	ldr	r1, [pc, #448]	@ (800140c <main+0x2c8>)
 800124a:	487e      	ldr	r0, [pc, #504]	@ (8001444 <main+0x300>)
 800124c:	f000 fd88 	bl	8001d60 <values_eval>
	  		values_eval(m2.values, &vtec);
 8001250:	496e      	ldr	r1, [pc, #440]	@ (800140c <main+0x2c8>)
 8001252:	487d      	ldr	r0, [pc, #500]	@ (8001448 <main+0x304>)
 8001254:	f000 fd84 	bl	8001d60 <values_eval>
	  		values_eval(m3.values, &vtec);
 8001258:	496c      	ldr	r1, [pc, #432]	@ (800140c <main+0x2c8>)
 800125a:	487c      	ldr	r0, [pc, #496]	@ (800144c <main+0x308>)
 800125c:	f000 fd80 	bl	8001d60 <values_eval>
	  		values_eval(m4.values, &vtec);
 8001260:	496a      	ldr	r1, [pc, #424]	@ (800140c <main+0x2c8>)
 8001262:	487b      	ldr	r0, [pc, #492]	@ (8001450 <main+0x30c>)
 8001264:	f000 fd7c 	bl	8001d60 <values_eval>
	  		values_eval(m5.values, &vtec);
 8001268:	4968      	ldr	r1, [pc, #416]	@ (800140c <main+0x2c8>)
 800126a:	487a      	ldr	r0, [pc, #488]	@ (8001454 <main+0x310>)
 800126c:	f000 fd78 	bl	8001d60 <values_eval>

	  		if(m1.active){
 8001270:	4b6b      	ldr	r3, [pc, #428]	@ (8001420 <main+0x2dc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d045      	beq.n	8001304 <main+0x1c0>
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 8001278:	4b69      	ldr	r3, [pc, #420]	@ (8001420 <main+0x2dc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f963 	bl	8000548 <__aeabi_f2d>
 8001282:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001286:	4b66      	ldr	r3, [pc, #408]	@ (8001420 <main+0x2dc>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	4680      	mov	r8, r0
 8001292:	4689      	mov	r9, r1
 8001294:	4b62      	ldr	r3, [pc, #392]	@ (8001420 <main+0x2dc>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4682      	mov	sl, r0
 80012a0:	468b      	mov	fp, r1
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 80012a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001420 <main+0x2dc>)
 80012a4:	695b      	ldr	r3, [r3, #20]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f94e 	bl	8000548 <__aeabi_f2d>
 80012ac:	e9c7 0106 	strd	r0, r1, [r7, #24]
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 80012b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <main+0x2dc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f947 	bl	8000548 <__aeabi_f2d>
 80012ba:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 80012be:	4b58      	ldr	r3, [pc, #352]	@ (8001420 <main+0x2dc>)
 80012c0:	69db      	ldr	r3, [r3, #28]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f940 	bl	8000548 <__aeabi_f2d>
 80012c8:	4604      	mov	r4, r0
 80012ca:	460d      	mov	r5, r1
	  					m1.values[3],m1.values[4],m1.values[5],m1.values[6]);
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <main+0x2dc>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
	  			printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m1.values[0],m1.values[1],m1.values[2],
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f939 	bl	8000548 <__aeabi_f2d>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80012de:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80012e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80012e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80012ea:	ed97 7b06 	vldr	d7, [r7, #24]
 80012ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80012f2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80012f6:	e9cd 8900 	strd	r8, r9, [sp]
 80012fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012fe:	4856      	ldr	r0, [pc, #344]	@ (8001458 <main+0x314>)
 8001300:	f005 f948 	bl	8006594 <iprintf>
	  		}
	  		if(m2.active){
 8001304:	4b45      	ldr	r3, [pc, #276]	@ (800141c <main+0x2d8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <main+0x280>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.1f,%.1f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <main+0x2d8>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800131a:	4b40      	ldr	r3, [pc, #256]	@ (800141c <main+0x2d8>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f912 	bl	8000548 <__aeabi_f2d>
 8001324:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001328:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <main+0x2d8>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f90b 	bl	8000548 <__aeabi_f2d>
 8001332:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6],temp1,temp2);
 8001336:	4b39      	ldr	r3, [pc, #228]	@ (800141c <main+0x2d8>)
 8001338:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.1f,%.1f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6],temp1,temp2);
 8001344:	4b35      	ldr	r3, [pc, #212]	@ (800141c <main+0x2d8>)
 8001346:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.1f,%.1f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_f2d>
 800134e:	e9c7 0100 	strd	r0, r1, [r7]
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6],temp1,temp2);
 8001352:	4b32      	ldr	r3, [pc, #200]	@ (800141c <main+0x2d8>)
 8001354:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.1f,%.1f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8f6 	bl	8000548 <__aeabi_f2d>
 800135c:	4682      	mov	sl, r0
 800135e:	468b      	mov	fp, r1
	  					m2.values[3],m2.values[4],m2.values[5],m2.values[6],temp1,temp2);
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <main+0x2d8>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.1f,%.1f\r\n ",m2.values[0],m2.values[1],m2.values[2],
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ef 	bl	8000548 <__aeabi_f2d>
 800136a:	4680      	mov	r8, r0
 800136c:	4689      	mov	r9, r1
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <main+0x2ec>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <main+0x2f8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8e1 	bl	8000548 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800138e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001392:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001396:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800139a:	ed97 7b00 	vldr	d7, [r7]
 800139e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80013a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80013aa:	ed97 7b04 	vldr	d7, [r7, #16]
 80013ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80013b2:	ed97 7b06 	vldr	d7, [r7, #24]
 80013b6:	ed8d 7b00 	vstr	d7, [sp]
 80013ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013be:	4827      	ldr	r0, [pc, #156]	@ (800145c <main+0x318>)
 80013c0:	f005 f8e8 	bl	8006594 <iprintf>
	  				}
	  		if(m3.active){
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <main+0x2d4>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d071      	beq.n	80014b0 <main+0x36c>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <main+0x2d4>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8b9 	bl	8000548 <__aeabi_f2d>
 80013d6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <main+0x2d4>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8b2 	bl	8000548 <__aeabi_f2d>
 80013e4:	4680      	mov	r8, r0
 80013e6:	4689      	mov	r9, r1
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <main+0x2d4>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8ab 	bl	8000548 <__aeabi_f2d>
 80013f2:	4682      	mov	sl, r0
 80013f4:	468b      	mov	fp, r1
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <main+0x2d4>)
 80013f8:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8a4 	bl	8000548 <__aeabi_f2d>
 8001400:	e9c7 0106 	strd	r0, r1, [r7, #24]
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <main+0x2d4>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	e02a      	b.n	8001460 <main+0x31c>
 800140a:	bf00      	nop
 800140c:	200003dc 	.word	0x200003dc
 8001410:	200003b8 	.word	0x200003b8
 8001414:	20000394 	.word	0x20000394
 8001418:	20000370 	.word	0x20000370
 800141c:	2000034c 	.word	0x2000034c
 8001420:	20000328 	.word	0x20000328
 8001424:	200003e0 	.word	0x200003e0
 8001428:	0800862c 	.word	0x0800862c
 800142c:	08008634 	.word	0x08008634
 8001430:	200003e4 	.word	0x200003e4
 8001434:	c2a00000 	.word	0xc2a00000
 8001438:	080085ac 	.word	0x080085ac
 800143c:	200003e8 	.word	0x200003e8
 8001440:	080085c0 	.word	0x080085c0
 8001444:	20000330 	.word	0x20000330
 8001448:	20000354 	.word	0x20000354
 800144c:	20000378 	.word	0x20000378
 8001450:	2000039c 	.word	0x2000039c
 8001454:	200003c0 	.word	0x200003c0
 8001458:	080085d4 	.word	0x080085d4
 800145c:	080085fc 	.word	0x080085fc
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f871 	bl	8000548 <__aeabi_f2d>
 8001466:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 800146a:	4b61      	ldr	r3, [pc, #388]	@ (80015f0 <main+0x4ac>)
 800146c:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f86a 	bl	8000548 <__aeabi_f2d>
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
	  					m3.values[3],m3.values[4],m3.values[5],m3.values[6]);
 8001478:	4b5d      	ldr	r3, [pc, #372]	@ (80015f0 <main+0x4ac>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m3.values[0],m3.values[1],m3.values[2],
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f863 	bl	8000548 <__aeabi_f2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800148a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800148e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001492:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001496:	ed97 7b06 	vldr	d7, [r7, #24]
 800149a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800149e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80014a2:	e9cd 8900 	strd	r8, r9, [sp]
 80014a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014aa:	4852      	ldr	r0, [pc, #328]	@ (80015f4 <main+0x4b0>)
 80014ac:	f005 f872 	bl	8006594 <iprintf>
	  				}
	  		if(m4.active){
 80014b0:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <main+0x4b4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d045      	beq.n	8001544 <main+0x400>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 80014b8:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <main+0x4b4>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f843 	bl	8000548 <__aeabi_f2d>
 80014c2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80014c6:	4b4c      	ldr	r3, [pc, #304]	@ (80015f8 <main+0x4b4>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f83c 	bl	8000548 <__aeabi_f2d>
 80014d0:	4680      	mov	r8, r0
 80014d2:	4689      	mov	r9, r1
 80014d4:	4b48      	ldr	r3, [pc, #288]	@ (80015f8 <main+0x4b4>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f835 	bl	8000548 <__aeabi_f2d>
 80014de:	4682      	mov	sl, r0
 80014e0:	468b      	mov	fp, r1
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 80014e2:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <main+0x4b4>)
 80014e4:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <main+0x4b4>)
 80014f2:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 80014fe:	4b3e      	ldr	r3, [pc, #248]	@ (80015f8 <main+0x4b4>)
 8001500:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f820 	bl	8000548 <__aeabi_f2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
	  					m4.values[3],m4.values[4],m4.values[5],m4.values[6]);
 800150c:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <main+0x4b4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m4.values[0],m4.values[1],m4.values[2],
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f819 	bl	8000548 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800151e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001522:	ed97 7b04 	vldr	d7, [r7, #16]
 8001526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800152a:	ed97 7b06 	vldr	d7, [r7, #24]
 800152e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001532:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001536:	e9cd 8900 	strd	r8, r9, [sp]
 800153a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800153e:	482d      	ldr	r0, [pc, #180]	@ (80015f4 <main+0x4b0>)
 8001540:	f005 f828 	bl	8006594 <iprintf>
	  				}
	  		if(m5.active){
 8001544:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <main+0x4b8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d045      	beq.n	80015d8 <main+0x494>
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <main+0x4b8>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fff9 	bl	8000548 <__aeabi_f2d>
 8001556:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800155a:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <main+0x4b8>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_f2d>
 8001564:	4680      	mov	r8, r0
 8001566:	4689      	mov	r9, r1
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <main+0x4b8>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffeb 	bl	8000548 <__aeabi_f2d>
 8001572:	4682      	mov	sl, r0
 8001574:	468b      	mov	fp, r1
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 8001576:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <main+0x4b8>)
 8001578:	695b      	ldr	r3, [r3, #20]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	e9c7 0106 	strd	r0, r1, [r7, #24]
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <main+0x4b8>)
 8001586:	699b      	ldr	r3, [r3, #24]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <main+0x4b8>)
 8001594:	69db      	ldr	r3, [r3, #28]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
	  					m5.values[3],m5.values[4],m5.values[5],m5.values[6]);
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <main+0x4b8>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
	  					printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n ",m5.values[0],m5.values[1],m5.values[2],
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffcf 	bl	8000548 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80015b2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80015b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80015ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015be:	ed97 7b06 	vldr	d7, [r7, #24]
 80015c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80015c6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80015ca:	e9cd 8900 	strd	r8, r9, [sp]
 80015ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d2:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <main+0x4b0>)
 80015d4:	f004 ffde 	bl	8006594 <iprintf>
	  				}

	  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2101      	movs	r1, #1
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f002 f99e 	bl	8003920 <HAL_GPIO_WritePin>



	  		HAL_Delay(10000);
 80015e4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80015e8:	f000 ffe8 	bl	80025bc <HAL_Delay>
	  	    measurement(&m1,&m2,&m3,&m4,&m5,&vtec);
 80015ec:	e5e2      	b.n	80011b4 <main+0x70>
 80015ee:	bf00      	nop
 80015f0:	20000370 	.word	0x20000370
 80015f4:	080085d4 	.word	0x080085d4
 80015f8:	20000394 	.word	0x20000394
 80015fc:	200003b8 	.word	0x200003b8

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b096      	sub	sp, #88	@ 0x58
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800160a:	2228      	movs	r2, #40	@ 0x28
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f908 	bl	8006824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2310      	movs	r3, #16
 800163e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	2302      	movs	r3, #2
 8001642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001648:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800164c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001652:	4618      	mov	r0, r3
 8001654:	f002 f97c 	bl	8003950 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800165e:	f000 f975 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2102      	movs	r1, #2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 f974 	bl	800496c <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800168a:	f000 f95f 	bl	800194c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001696:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fb78 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016a6:	f000 f951 	bl	800194c <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3758      	adds	r7, #88	@ 0x58
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80016ca:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016cc:	4a35      	ldr	r2, [pc, #212]	@ (80017a4 <MX_ADC2_Init+0xf0>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016d0:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016de:	2201      	movs	r2, #1
 80016e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b28      	ldr	r3, [pc, #160]	@ (80017a0 <MX_ADC2_Init+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8001702:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <MX_ADC2_Init+0xec>)
 8001704:	2203      	movs	r2, #3
 8001706:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <MX_ADC2_Init+0xec>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <MX_ADC2_Init+0xec>)
 8001712:	2204      	movs	r2, #4
 8001714:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_ADC2_Init+0xec>)
 8001718:	2200      	movs	r2, #0
 800171a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <MX_ADC2_Init+0xec>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001722:	481f      	ldr	r0, [pc, #124]	@ (80017a0 <MX_ADC2_Init+0xec>)
 8001724:	f000 ff6e 	bl	8002604 <HAL_ADC_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800172e:	f000 f90d 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001732:	2304      	movs	r3, #4
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001736:	2301      	movs	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800173e:	2307      	movs	r3, #7
 8001740:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4814      	ldr	r0, [pc, #80]	@ (80017a0 <MX_ADC2_Init+0xec>)
 8001750:	f001 faee 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800175a:	f000 f8f7 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800175e:	2303      	movs	r3, #3
 8001760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001762:	2302      	movs	r3, #2
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_ADC2_Init+0xec>)
 800176c:	f001 fae0 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001776:	f000 f8e9 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800177a:	2302      	movs	r3, #2
 800177c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800177e:	2303      	movs	r3, #3
 8001780:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <MX_ADC2_Init+0xec>)
 8001788:	f001 fad2 	bl	8002d30 <HAL_ADC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001792:	f000 f8db 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003ec 	.word	0x200003ec
 80017a4:	50000100 	.word	0x50000100

080017a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_TIM6_Init+0x64>)
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <MX_TIM6_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <MX_TIM6_Init+0x64>)
 80017c0:	223f      	movs	r2, #63	@ 0x3f
 80017c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_TIM6_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MX_TIM6_Init+0x64>)
 80017cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_TIM6_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <MX_TIM6_Init+0x64>)
 80017da:	f003 fbfd 	bl	8004fd8 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017e4:	f000 f8b2 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_TIM6_Init+0x64>)
 80017f6:	f003 fd1f 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001800:	f000 f8a4 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000254 	.word	0x20000254
 8001810:	40001000 	.word	0x40001000

08001814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_USART2_UART_Init+0x58>)
 800181a:	4a15      	ldr	r2, [pc, #84]	@ (8001870 <MX_USART2_UART_Init+0x5c>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_USART2_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_USART2_UART_Init+0x58>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_USART2_UART_Init+0x58>)
 8001858:	f003 fd5c 	bl	8005314 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001862:	f000 f873 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002a0 	.word	0x200002a0
 8001870:	40004400 	.word	0x40004400

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <MX_GPIO_Init+0xd0>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a2d      	ldr	r2, [pc, #180]	@ (8001944 <MX_GPIO_Init+0xd0>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <MX_GPIO_Init+0xd0>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <MX_GPIO_Init+0xd0>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <MX_GPIO_Init+0xd0>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <MX_GPIO_Init+0xd0>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|S0_Pin|P6_LED_Pin
 80018ba:	2200      	movs	r2, #0
 80018bc:	f241 711b 	movw	r1, #5915	@ 0x171b
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c4:	f002 f82c 	bl	8003920 <HAL_GPIO_WritePin>
                          |S1_Pin|S2_Pin|S3_Pin|P5_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P4_LED_Pin|P3_LED_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2109      	movs	r1, #9
 80018cc:	481e      	ldr	r0, [pc, #120]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018ce:	f002 f827 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018dc:	f002 f820 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin S0_Pin P6_LED_Pin
                           S1_Pin S2_Pin S3_Pin P5_LED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|S0_Pin|P6_LED_Pin
 80018e0:	f241 731b 	movw	r3, #5915	@ 0x171b
 80018e4:	60fb      	str	r3, [r7, #12]
                          |S1_Pin|S2_Pin|S3_Pin|P5_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fc:	f001 fe86 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pins : P4_LED_Pin P3_LED_Pin */
  GPIO_InitStruct.Pin = P4_LED_Pin|P3_LED_Pin;
 8001900:	2309      	movs	r3, #9
 8001902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4619      	mov	r1, r3
 8001916:	480c      	ldr	r0, [pc, #48]	@ (8001948 <MX_GPIO_Init+0xd4>)
 8001918:	f001 fe78 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pin : DS_Pin */
  GPIO_InitStruct.Pin = DS_Pin;
 800191c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001922:	2311      	movs	r3, #17
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f001 fe68 	bl	800360c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <Error_Handler+0x8>

08001958 <callibration>:


int selectPins[4] = {S0_Pin, S1_Pin, S2_Pin, S3_Pin};


void callibration(){
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800195c:	2100      	movs	r1, #0
 800195e:	4802      	ldr	r0, [pc, #8]	@ (8001968 <callibration+0x10>)
 8001960:	f001 f973 	bl	8002c4a <HAL_ADCEx_Calibration_Start>

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200003ec 	.word	0x200003ec

0800196c <mux_select>:

void mux_select(int pin){
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	   for (int i = 0; i < 4; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e00d      	b.n	8001996 <mux_select+0x2a>
	        HAL_GPIO_WritePin(selectpinsPort, selectPins[i], GPIO_PIN_RESET);
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <mux_select+0x70>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	b29b      	uxth	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198c:	f001 ffc8 	bl	8003920 <HAL_GPIO_WritePin>
	   for (int i = 0; i < 4; i++) {
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b03      	cmp	r3, #3
 800199a:	ddee      	ble.n	800197a <mux_select+0xe>
	    }

	    // sets the pins to the correct value of the channel -> 0 to 4 bit shift
	    for (int i = 3; i >= 0; i--) {
 800199c:	2303      	movs	r3, #3
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	e014      	b.n	80019cc <mux_select+0x60>
	        HAL_GPIO_WritePin(selectpinsPort, selectPins[i], (GPIO_PinState)((pin >> i) & 0x01));
 80019a2:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <mux_select+0x70>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	b299      	uxth	r1, r3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	fa42 f303 	asr.w	r3, r2, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c2:	f001 ffad 	bl	8003920 <HAL_GPIO_WritePin>
	    for (int i = 3; i >= 0; i--) {
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dae7      	bge.n	80019a2 <mux_select+0x36>
	    }
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000000 	.word	0x20000000

080019e0 <measurement>:

void measurement(Module *module1, Module *module2, Module *module3, Module *module4, Module *module5,float *vtec)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b0d3      	sub	sp, #332	@ 0x14c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 80019ea:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 80019ee:	6020      	str	r0, [r4, #0]
 80019f0:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80019f4:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 80019f8:	6001      	str	r1, [r0, #0]
 80019fa:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80019fe:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8001a02:	600a      	str	r2, [r1, #0]
 8001a04:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001a08:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8001a0c:	6013      	str	r3, [r2, #0]
	  uint16_t temp_mux1[16] = {0};
 8001a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a12:	2220      	movs	r2, #32
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ff04 	bl	8006824 <memset>
	  uint16_t temp_mux2[16] = {0};
 8001a1c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001a20:	2220      	movs	r2, #32
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f004 fefd 	bl	8006824 <memset>
	  uint16_t temp_mux3[16] = {0};
 8001a2a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001a2e:	2220      	movs	r2, #32
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fef6 	bl	8006824 <memset>

	  float mux1_values[16] ={0};
 8001a38:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001a3c:	2240      	movs	r2, #64	@ 0x40
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 feef 	bl	8006824 <memset>
	  float mux2_values[16] ={0};
 8001a46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fee8 	bl	8006824 <memset>
	  float mux3_values[16] ={0};
 8001a54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a58:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	2340      	movs	r3, #64	@ 0x40
 8001a60:	461a      	mov	r2, r3
 8001a62:	2100      	movs	r1, #0
 8001a64:	f004 fede 	bl	8006824 <memset>

	for (int s = 0; s < SAMPLES; s++) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001a6e:	e06c      	b.n	8001b4a <measurement+0x16a>
	  for (int j = 0; j < 16; j++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001a76:	e05f      	b.n	8001b38 <measurement+0x158>
		  mux_select(j);
 8001a78:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8001a7c:	f7ff ff76 	bl	800196c <mux_select>

		  HAL_ADC_Start(&hadc2);
 8001a80:	48b2      	ldr	r0, [pc, #712]	@ (8001d4c <measurement+0x36c>)
 8001a82:	f000 ff51 	bl	8002928 <HAL_ADC_Start>

		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	48b0      	ldr	r0, [pc, #704]	@ (8001d4c <measurement+0x36c>)
 8001a8c:	f001 f802 	bl	8002a94 <HAL_ADC_PollForConversion>
		  temp_mux1[j] += HAL_ADC_GetValue(&hadc2);
 8001a90:	48ae      	ldr	r0, [pc, #696]	@ (8001d4c <measurement+0x36c>)
 8001a92:	f001 f8cd 	bl	8002c30 <HAL_ADC_GetValue>
 8001a96:	4601      	mov	r1, r0
 8001a98:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001aa2:	443b      	add	r3, r7
 8001aa4:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 8001aa8:	b28b      	uxth	r3, r1
 8001aaa:	4413      	add	r3, r2
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001ab8:	443b      	add	r3, r7
 8001aba:	f823 2c38 	strh.w	r2, [r3, #-56]
		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001abe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac2:	48a2      	ldr	r0, [pc, #648]	@ (8001d4c <measurement+0x36c>)
 8001ac4:	f000 ffe6 	bl	8002a94 <HAL_ADC_PollForConversion>
		  temp_mux2[j] += HAL_ADC_GetValue(&hadc2);
 8001ac8:	48a0      	ldr	r0, [pc, #640]	@ (8001d4c <measurement+0x36c>)
 8001aca:	f001 f8b1 	bl	8002c30 <HAL_ADC_GetValue>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001ada:	443b      	add	r3, r7
 8001adc:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 8001ae0:	b28b      	uxth	r3, r1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001af0:	443b      	add	r3, r7
 8001af2:	f823 2c58 	strh.w	r2, [r3, #-88]
		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001af6:	f04f 31ff 	mov.w	r1, #4294967295
 8001afa:	4894      	ldr	r0, [pc, #592]	@ (8001d4c <measurement+0x36c>)
 8001afc:	f000 ffca 	bl	8002a94 <HAL_ADC_PollForConversion>
		  temp_mux3[j] += HAL_ADC_GetValue(&hadc2);
 8001b00:	4892      	ldr	r0, [pc, #584]	@ (8001d4c <measurement+0x36c>)
 8001b02:	f001 f895 	bl	8002c30 <HAL_ADC_GetValue>
 8001b06:	4601      	mov	r1, r0
 8001b08:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001b12:	443b      	add	r3, r7
 8001b14:	f833 2c78 	ldrh.w	r2, [r3, #-120]
 8001b18:	b28b      	uxth	r3, r1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001b28:	443b      	add	r3, r7
 8001b2a:	f823 2c78 	strh.w	r2, [r3, #-120]
	  for (int j = 0; j < 16; j++) {
 8001b2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001b32:	3301      	adds	r3, #1
 8001b34:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001b38:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	dd9b      	ble.n	8001a78 <measurement+0x98>
	for (int s = 0; s < SAMPLES; s++) {
 8001b40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001b4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	dd8e      	ble.n	8001a70 <measurement+0x90>


	  }
	}

			for (int i = 0; i < 16; i++) {
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001b58:	e053      	b.n	8001c02 <measurement+0x222>
		        mux1_values[i] = temp_mux1[i] / SAMPLES;
 8001b5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001b64:	443b      	add	r3, r7
 8001b66:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001b6a:	4a79      	ldr	r2, [pc, #484]	@ (8001d50 <measurement+0x370>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001b86:	443b      	add	r3, r7
 8001b88:	3bb8      	subs	r3, #184	@ 0xb8
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
		        mux2_values[i] = temp_mux2[i] / SAMPLES;
 8001b8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001b98:	443b      	add	r3, r7
 8001b9a:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8001b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d50 <measurement+0x370>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001bba:	443b      	add	r3, r7
 8001bbc:	3bf8      	subs	r3, #248	@ 0xf8
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
		        mux3_values[i] = temp_mux3[i] / SAMPLES;
 8001bc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001bcc:	443b      	add	r3, r7
 8001bce:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d50 <measurement+0x370>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001be8:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8001bec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < 16; i++) {
 8001bf8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001c02:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	dda7      	ble.n	8001b5a <measurement+0x17a>
		    }

		    for (int z = 0; z < 7; z++) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001c10:	e03b      	b.n	8001c8a <measurement+0x2aa>
		        module1->values[z] = mux1_values[z];
 8001c12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001c1c:	443b      	add	r3, r7
 8001c1e:	3bb8      	subs	r3, #184	@ 0xb8
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001c26:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c30:	3302      	adds	r3, #2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	601a      	str	r2, [r3, #0]
		        module3->values[z] = mux2_values[z];
 8001c38:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001c42:	443b      	add	r3, r7
 8001c44:	3bf8      	subs	r3, #248	@ 0xf8
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001c4c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c56:	3302      	adds	r3, #2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	601a      	str	r2, [r3, #0]
		        module5->values[z] = mux3_values[z];
 8001c5e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001c62:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8001c66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8001c74:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c78:	3302      	adds	r3, #2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	601a      	str	r2, [r3, #0]
		    for (int z = 0; z < 7; z++) {
 8001c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	ddbf      	ble.n	8001c12 <measurement+0x232>
		    }

		    for (int y = 0, x = 7; y < 7 && x < 14; y++, x++) {
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001c98:	2307      	movs	r3, #7
 8001c9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001c9e:	e02f      	b.n	8001d00 <measurement+0x320>
		        module2->values[y] = mux1_values[x];
 8001ca0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001caa:	443b      	add	r3, r7
 8001cac:	3bb8      	subs	r3, #184	@ 0xb8
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001cb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	601a      	str	r2, [r3, #0]
		        module4->values[y] = mux2_values[x];
 8001cc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001cd0:	443b      	add	r3, r7
 8001cd2:	3bf8      	subs	r3, #248	@ 0xf8
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001cda:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	601a      	str	r2, [r3, #0]
		    for (int y = 0, x = 7; y < 7 && x < 14; y++, x++) {
 8001cec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	dc03      	bgt.n	8001d10 <measurement+0x330>
 8001d08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d0c:	2b0d      	cmp	r3, #13
 8001d0e:	ddc7      	ble.n	8001ca0 <measurement+0x2c0>
		    }

		    *vtec = mux3_values[7] * 2 * 3.3f / 4095;
 8001d10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d18:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d20:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001d54 <measurement+0x374>
 8001d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d28:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001d58 <measurement+0x378>
 8001d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d30:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001d34:	edc3 7a00 	vstr	s15, [r3]


		    HAL_Delay(1000);
 8001d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d3c:	f000 fc3e 	bl	80025bc <HAL_Delay>
}
 8001d40:	bf00      	nop
 8001d42:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003ec 	.word	0x200003ec
 8001d50:	cccccccd 	.word	0xcccccccd
 8001d54:	40533333 	.word	0x40533333
 8001d58:	457ff000 	.word	0x457ff000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <values_eval>:

void values_eval(float *module, float *vtec){
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]

	//OFFSET VALUES [V]
	for(int i = 0; i<4 ; i++){
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e016      	b.n	8001d9e <values_eval+0x3e>
		module[i] = module[i]*3.3f/4095;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001e88 <values_eval+0x128>
 8001d80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001e8c <values_eval+0x12c>
 8001d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<4 ; i++){
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	dde5      	ble.n	8001d70 <values_eval+0x10>
	}

	//each current (+ and -) calculation and substraction  (TEC_CURRENT) [mA]
	float tec_current = ((module[4]*3.3f/4095)/(19.3*0.1)*1000) - ((module[5]*3.3f/4095)/(150*0.1)*1000);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3310      	adds	r3, #16
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001e88 <values_eval+0x128>
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001e8c <values_eval+0x12c>
 8001db8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dbc:	ee16 0a90 	vmov	r0, s13
 8001dc0:	f7fe fbc2 	bl	8000548 <__aeabi_f2d>
 8001dc4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001e80 <values_eval+0x120>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fd3f 	bl	800084c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <values_eval+0x130>)
 8001ddc:	f7fe fc0c 	bl	80005f8 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3314      	adds	r3, #20
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001e88 <values_eval+0x128>
 8001df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001e8c <values_eval+0x12c>
 8001dfc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e00:	ee16 0a90 	vmov	r0, s13
 8001e04:	f7fe fba0 	bl	8000548 <__aeabi_f2d>
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <values_eval+0x134>)
 8001e0e:	f7fe fd1d 	bl	800084c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <values_eval+0x130>)
 8001e20:	f7fe fbea 	bl	80005f8 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe fa2c 	bl	8000288 <__aeabi_dsub>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe feb6 	bl	8000ba8 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60bb      	str	r3, [r7, #8]

	//changing the place of VTH in the table [V]
	module[4] = module[6]*3.3f/4095;;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3318      	adds	r3, #24
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001e88 <values_eval+0x128>
 8001e4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3310      	adds	r3, #16
 8001e54:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001e8c <values_eval+0x12c>
 8001e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5c:	edc3 7a00 	vstr	s15, [r3]

	module[6] = tec_current;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3318      	adds	r3, #24
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	601a      	str	r2, [r3, #0]

	module[5] = *vtec;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	601a      	str	r2, [r3, #0]

}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	f3af 8000 	nop.w
 8001e80:	ae147ae2 	.word	0xae147ae2
 8001e84:	3ffee147 	.word	0x3ffee147
 8001e88:	40533333 	.word	0x40533333
 8001e8c:	457ff000 	.word	0x457ff000
 8001e90:	408f4000 	.word	0x408f4000
 8001e94:	402e0000 	.word	0x402e0000

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_MspInit+0x44>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8001edc <HAL_MspInit+0x44>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6193      	str	r3, [r2, #24]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_MspInit+0x44>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_MspInit+0x44>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a08      	ldr	r2, [pc, #32]	@ (8001edc <HAL_MspInit+0x44>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_MspInit+0x44>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a15      	ldr	r2, [pc, #84]	@ (8001f54 <HAL_ADC_MspInit+0x74>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d124      	bne.n	8001f4c <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_ADC_MspInit+0x78>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <HAL_ADC_MspInit+0x78>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	6153      	str	r3, [r2, #20]
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_ADC_MspInit+0x78>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_ADC_MspInit+0x78>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_ADC_MspInit+0x78>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f24:	6153      	str	r3, [r2, #20]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_ADC_MspInit+0x78>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23e0      	movs	r3, #224	@ 0xe0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f48:	f001 fb60 	bl	800360c <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	@ 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	50000100 	.word	0x50000100
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <HAL_TIM_Base_MspInit+0x38>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d10b      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40001000 	.word	0x40001000
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	@ (800201c <HAL_UART_MspInit+0x80>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d129      	bne.n	8002012 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	6153      	str	r3, [r2, #20]
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001fee:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002000:	2307      	movs	r3, #7
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800200e:	f001 fafd 	bl	800360c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	@ 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40004400 	.word	0x40004400
 8002020:	40021000 	.word	0x40021000

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <NMI_Handler+0x4>

0800202c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <MemManage_Handler+0x4>

0800203c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <UsageFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207a:	f000 fa7f 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}

08002082 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return 1;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_kill>:

int _kill(int pid, int sig)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800209c:	f004 fc14 	bl	80068c8 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2216      	movs	r2, #22
 80020a4:	601a      	str	r2, [r3, #0]
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_exit>:

void _exit (int status)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ba:	f04f 31ff 	mov.w	r1, #4294967295
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffe7 	bl	8002092 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <_exit+0x12>

080020c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e00a      	b.n	80020f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020da:	f3af 8000 	nop.w
 80020de:	4601      	mov	r1, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dbf0      	blt.n	80020da <_read+0x12>
  }

  return len;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e009      	b.n	8002128 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fff9 	bl	8001114 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf1      	blt.n	8002114 <_write+0x12>
  }
  return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_close>:

int _close(int file)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002162:	605a      	str	r2, [r3, #4]
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_isatty>:

int _isatty(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f004 fb78 	bl	80068c8 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20003000 	.word	0x20003000
 8002204:	00000400 	.word	0x00000400
 8002208:	2000043c 	.word	0x2000043c
 800220c:	20000590 	.word	0x20000590

08002210 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <SystemInit+0x20>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <SystemInit+0x20>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <wire_init>:


extern TIM_HandleTypeDef htim6;

HAL_StatusTypeDef wire_init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <wire_init+0x10>)
 800223a:	f002 ff25 	bl	8005088 <HAL_TIM_Base_Start>
 800223e:	4603      	mov	r3, r0
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000254 	.word	0x20000254

08002248 <delay_us>:

static void delay_us(uint32_t us)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <delay_us+0x2c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8002258:	bf00      	nop
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <delay_us+0x2c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	429a      	cmp	r2, r3
 8002264:	d8f9      	bhi.n	800225a <delay_us+0x12>
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	20000254 	.word	0x20000254

08002278 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002288:	f001 fb4a 	bl	8003920 <HAL_GPIO_WritePin>
  delay_us(480);
 800228c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8002290:	f7ff ffda 	bl	8002248 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800229a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229e:	f001 fb3f 	bl	8003920 <HAL_GPIO_WritePin>
  delay_us(70);
 80022a2:	2046      	movs	r0, #70	@ 0x46
 80022a4:	f7ff ffd0 	bl	8002248 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80022a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b0:	f001 fb1e 	bl	80038f0 <HAL_GPIO_ReadPin>
 80022b4:	4603      	mov	r3, r0
 80022b6:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80022b8:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80022bc:	f7ff ffc4 	bl	8002248 <delay_us>

  if (rc == 0)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <wire_reset+0x52>
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <wire_reset+0x54>
  else
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <read_bit>:

static int read_bit(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e4:	f001 fb1c 	bl	8003920 <HAL_GPIO_WritePin>
  delay_us(6);
 80022e8:	2006      	movs	r0, #6
 80022ea:	f7ff ffad 	bl	8002248 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f8:	f001 fb12 	bl	8003920 <HAL_GPIO_WritePin>
  delay_us(9);
 80022fc:	2009      	movs	r0, #9
 80022fe:	f7ff ffa3 	bl	8002248 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8002302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230a:	f001 faf1 	bl	80038f0 <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8002312:	2037      	movs	r0, #55	@ 0x37
 8002314:	f7ff ff98 	bl	8002248 <delay_us>
  return rc;
 8002318:	687b      	ldr	r3, [r7, #4]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <wire_read>:

uint8_t wire_read(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	e00e      	b.n	8002350 <wire_read+0x2e>
    value >>= 1;
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8002338:	f7ff ffcc 	bl	80022d4 <read_bit>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <wire_read+0x28>
      value |= 0x80;
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002348:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b07      	cmp	r3, #7
 8002354:	dded      	ble.n	8002332 <wire_read+0x10>
  }
  return value;
 8002356:	79fb      	ldrb	r3, [r7, #7]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <write_bit>:

static void write_bit(int value)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if (value) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d014      	beq.n	8002398 <write_bit+0x38>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002378:	f001 fad2 	bl	8003920 <HAL_GPIO_WritePin>
    delay_us(6);
 800237c:	2006      	movs	r0, #6
 800237e:	f7ff ff63 	bl	8002248 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800238c:	f001 fac8 	bl	8003920 <HAL_GPIO_WritePin>
    delay_us(64);
 8002390:	2040      	movs	r0, #64	@ 0x40
 8002392:	f7ff ff59 	bl	8002248 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8002396:	e013      	b.n	80023c0 <write_bit+0x60>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800239e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a2:	f001 fabd 	bl	8003920 <HAL_GPIO_WritePin>
    delay_us(60);
 80023a6:	203c      	movs	r0, #60	@ 0x3c
 80023a8:	f7ff ff4e 	bl	8002248 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b6:	f001 fab3 	bl	8003920 <HAL_GPIO_WritePin>
    delay_us(10);
 80023ba:	200a      	movs	r0, #10
 80023bc:	f7ff ff44 	bl	8002248 <delay_us>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <wire_write>:

void wire_write(uint8_t byte)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e00b      	b.n	80023f0 <wire_write+0x28>
    write_bit(byte & 0x01);
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ffbe 	bl	8002360 <write_bit>
    byte >>= 1;
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3301      	adds	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b07      	cmp	r3, #7
 80023f4:	ddf0      	ble.n	80023d8 <wire_write+0x10>
  }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	460a      	mov	r2, r1
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	4613      	mov	r3, r2
 800240e:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e016      	b.n	8002444 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	4053      	eors	r3, r2
 800241c:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8002424:	7afb      	ldrb	r3, [r7, #11]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <byte_crc+0x38>
      crc ^= 0x8c;
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8002434:	43db      	mvns	r3, r3
 8002436:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8002438:	79bb      	ldrb	r3, [r7, #6]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3301      	adds	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b07      	cmp	r3, #7
 8002448:	dde5      	ble.n	8002416 <byte_crc+0x16>
  }
  return crc;
 800244a:	79fb      	ldrb	r3, [r7, #7]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e00d      	b.n	8002488 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ffc1 	bl	8002400 <byte_crc>
 800247e:	4603      	mov	r3, r0
 8002480:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3301      	adds	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbed      	blt.n	800246c <wire_crc+0x14>

    return crc;
 8002490:	7afb      	ldrb	r3, [r7, #11]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff feb6 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490d      	ldr	r1, [pc, #52]	@ (80024dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0a      	ldr	r4, [pc, #40]	@ (80024e8 <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f004 fa03 	bl	80068d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ce:	f7fe fe39 	bl	8001144 <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80024e0:	080089fc 	.word	0x080089fc
  ldr r2, =_sbss
 80024e4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80024e8:	20000590 	.word	0x20000590

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_Init+0x28>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <HAL_Init+0x28>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002500:	2003      	movs	r0, #3
 8002502:	f001 f84f 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002506:	200f      	movs	r0, #15
 8002508:	f000 f808 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800250c:	f7ff fcc4 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_InitTick+0x54>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_InitTick+0x58>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f001 f859 	bl	80035f2 <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f001 f82f 	bl	80035ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	@ (8002578 <HAL_InitTick+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000010 	.word	0x20000010
 8002574:	20000018 	.word	0x20000018
 8002578:	20000014 	.word	0x20000014

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000018 	.word	0x20000018
 80025a0:	20000440 	.word	0x20000440

080025a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000440 	.word	0x20000440

080025bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff ffee 	bl	80025a4 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d005      	beq.n	80025e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_Delay+0x44>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025e2:	bf00      	nop
 80025e4:	f7ff ffde 	bl	80025a4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8f7      	bhi.n	80025e4 <HAL_Delay+0x28>
  {
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000018 	.word	0x20000018

08002604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b09a      	sub	sp, #104	@ 0x68
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e172      	b.n	800290a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d176      	bne.n	8002724 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d152      	bne.n	80026e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fc41 	bl	8001ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13b      	bne.n	80026e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fe81 	bl	8003374 <ADC_Disable>
 8002672:	4603      	mov	r3, r0
 8002674:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d12f      	bne.n	80026e4 <HAL_ADC_Init+0xe0>
 8002684:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002688:	2b00      	cmp	r3, #0
 800268a:	d12b      	bne.n	80026e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002694:	f023 0302 	bic.w	r3, r3, #2
 8002698:	f043 0202 	orr.w	r2, r3, #2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c0:	4b94      	ldr	r3, [pc, #592]	@ (8002914 <HAL_ADC_Init+0x310>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a94      	ldr	r2, [pc, #592]	@ (8002918 <HAL_ADC_Init+0x314>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	0c9a      	lsrs	r2, r3, #18
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d6:	e002      	b.n	80026de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3b01      	subs	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002700:	d110      	bne.n	8002724 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f023 0312 	bic.w	r3, r3, #18
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 80df 	bne.w	80028f0 <HAL_ADC_Init+0x2ec>
 8002732:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 80da 	bne.w	80028f0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 80d2 	bne.w	80028f0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002754:	f043 0202 	orr.w	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800275c:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <HAL_ADC_Init+0x318>)
 800275e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002768:	d102      	bne.n	8002770 <HAL_ADC_Init+0x16c>
 800276a:	4b6d      	ldr	r3, [pc, #436]	@ (8002920 <HAL_ADC_Init+0x31c>)
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e002      	b.n	8002776 <HAL_ADC_Init+0x172>
 8002770:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002774:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_ADC_Init+0x192>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Init+0x192>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_ADC_Init+0x194>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11c      	bne.n	80027d6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800279c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_ADC_Init+0x1ba>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x1ba>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_Init+0x1bc>
 80027be:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7e5b      	ldrb	r3, [r3, #25]
 80027da:	035b      	lsls	r3, r3, #13
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027e0:	2a01      	cmp	r2, #1
 80027e2:	d002      	beq.n	80027ea <HAL_ADC_Init+0x1e6>
 80027e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027e8:	e000      	b.n	80027ec <HAL_ADC_Init+0x1e8>
 80027ea:	2200      	movs	r2, #0
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027fc:	4313      	orrs	r3, r2
 80027fe:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d11b      	bne.n	8002842 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7e5b      	ldrb	r3, [r3, #25]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	3b01      	subs	r3, #1
 8002818:	045a      	lsls	r2, r3, #17
 800281a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800281c:	4313      	orrs	r3, r2
 800281e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002822:	663b      	str	r3, [r7, #96]	@ 0x60
 8002824:	e00d      	b.n	8002842 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	2b01      	cmp	r3, #1
 8002848:	d007      	beq.n	800285a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	4313      	orrs	r3, r2
 8002854:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002856:	4313      	orrs	r3, r2
 8002858:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	d114      	bne.n	8002892 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002876:	f023 0302 	bic.w	r3, r3, #2
 800287a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7e1b      	ldrb	r3, [r3, #24]
 8002880:	039a      	lsls	r2, r3, #14
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4313      	orrs	r3, r2
 800288c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800288e:	4313      	orrs	r3, r2
 8002890:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <HAL_ADC_Init+0x320>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80028a2:	430b      	orrs	r3, r1
 80028a4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10c      	bne.n	80028c8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	f023 010f 	bic.w	r1, r3, #15
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c6:	e007      	b.n	80028d8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020f 	bic.w	r2, r2, #15
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ee:	e00a      	b.n	8002906 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f023 0312 	bic.w	r3, r3, #18
 80028f8:	f043 0210 	orr.w	r2, r3, #16
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002900:	2301      	movs	r3, #1
 8002902:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002906:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800290a:	4618      	mov	r0, r3
 800290c:	3768      	adds	r7, #104	@ 0x68
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000010 	.word	0x20000010
 8002918:	431bde83 	.word	0x431bde83
 800291c:	50000300 	.word	0x50000300
 8002920:	50000100 	.word	0x50000100
 8002924:	fff0c007 	.word	0xfff0c007

08002928 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 809c 	bne.w	8002a7c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Start+0x2a>
 800294e:	2302      	movs	r3, #2
 8002950:	e097      	b.n	8002a82 <HAL_ADC_Start+0x15a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fca6 	bl	80032ac <ADC_Enable>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8083 	bne.w	8002a72 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002980:	4b42      	ldr	r3, [pc, #264]	@ (8002a8c <HAL_ADC_Start+0x164>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_ADC_Start+0x6e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002994:	d115      	bne.n	80029c2 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d027      	beq.n	8002a00 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029c0:	e01e      	b.n	8002a00 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d6:	d004      	beq.n	80029e2 <HAL_ADC_Start+0xba>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a90 <HAL_ADC_Start+0x168>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10e      	bne.n	8002a00 <HAL_ADC_Start+0xd8>
 80029e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f023 0206 	bic.w	r2, r3, #6
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a1a:	e002      	b.n	8002a22 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	221c      	movs	r2, #28
 8002a30:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a32:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <HAL_ADC_Start+0x164>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_ADC_Start+0x138>
 8002a3e:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <HAL_ADC_Start+0x164>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d00a      	beq.n	8002a60 <HAL_ADC_Start+0x138>
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <HAL_ADC_Start+0x164>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d004      	beq.n	8002a60 <HAL_ADC_Start+0x138>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a5e:	d10f      	bne.n	8002a80 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0204 	orr.w	r2, r2, #4
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e006      	b.n	8002a80 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002a7a:	e001      	b.n	8002a80 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	50000300 	.word	0x50000300
 8002a90:	50000100 	.word	0x50000100

08002a94 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d102      	bne.n	8002ab0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e02e      	b.n	8002b0e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_ADC_PollForConversion+0x198>)
 8002ab2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d112      	bne.n	8002ae6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d11d      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e09d      	b.n	8002c22 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08b      	b.n	8002c22 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_ADC_PollForConversion+0x198>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_ADC_PollForConversion+0x90>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b22:	d104      	bne.n	8002b2e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002b36:	f7ff fd35 	bl	80025a4 <HAL_GetTick>
 8002b3a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b3c:	e021      	b.n	8002b82 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d01d      	beq.n	8002b82 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_ADC_PollForConversion+0xc8>
 8002b4c:	f7ff fd2a 	bl	80025a4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d212      	bcs.n	8002b82 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f043 0204 	orr.w	r2, r3, #4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04f      	b.n	8002c22 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0d6      	beq.n	8002b3e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d131      	bne.n	8002c0e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d12c      	bne.n	8002c0e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d125      	bne.n	8002c0e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d112      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d112      	bne.n	8002c0e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bf4:	e00b      	b.n	8002c0e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	50000300 	.word	0x50000300

08002c30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADCEx_Calibration_Start+0x1c>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e05f      	b.n	8002d26 <HAL_ADCEx_Calibration_Start+0xdc>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fb80 	bl	8003374 <ADC_Disable>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d14e      	bne.n	8002d1c <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002c92:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ca8:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002cb8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002cba:	f7ff fc73 	bl	80025a4 <HAL_GetTick>
 8002cbe:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cc0:	e01c      	b.n	8002cfc <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002cc2:	f7ff fc6f 	bl	80025a4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b0a      	cmp	r3, #10
 8002cce:	d915      	bls.n	8002cfc <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cde:	d10d      	bne.n	8002cfc <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f023 0312 	bic.w	r3, r3, #18
 8002ce8:	f043 0210 	orr.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e014      	b.n	8002d26 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d0a:	d0da      	beq.n	8002cc2 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f023 0303 	bic.w	r3, r3, #3
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b09b      	sub	sp, #108	@ 0x6c
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x22>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e2a1      	b.n	8003296 <HAL_ADC_ConfigChannel+0x566>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 8285 	bne.w	8003274 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d81c      	bhi.n	8002dac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	461a      	mov	r2, r3
 8002d86:	231f      	movs	r3, #31
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4019      	ands	r1, r3
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002daa:	e063      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	d81e      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	221f      	movs	r2, #31
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	4019      	ands	r1, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	3b1e      	subs	r3, #30
 8002de4:	fa00 f203 	lsl.w	r2, r0, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	@ 0x34
 8002df0:	e040      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b0e      	cmp	r3, #14
 8002df8:	d81e      	bhi.n	8002e38 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	3b3c      	subs	r3, #60	@ 0x3c
 8002e0e:	221f      	movs	r2, #31
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	4019      	ands	r1, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	3b3c      	subs	r3, #60	@ 0x3c
 8002e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e36:	e01d      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	3b5a      	subs	r3, #90	@ 0x5a
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4019      	ands	r1, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	3b5a      	subs	r3, #90	@ 0x5a
 8002e68:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 80e5 	bne.w	800304e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d91c      	bls.n	8002ec6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b1e      	subs	r3, #30
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4019      	ands	r1, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6898      	ldr	r0, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b1e      	subs	r3, #30
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]
 8002ec4:	e019      	b.n	8002efa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6959      	ldr	r1, [r3, #20]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	4019      	ands	r1, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6898      	ldr	r0, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d84f      	bhi.n	8002fbc <HAL_ADC_ConfigChannel+0x28c>
 8002f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <HAL_ADC_ConfigChannel+0x1f4>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f79 	.word	0x08002f79
 8002f30:	08002f9b 	.word	0x08002f9b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f3a:	4b9c      	ldr	r3, [pc, #624]	@ (80031ac <HAL_ADC_ConfigChannel+0x47c>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	0691      	lsls	r1, r2, #26
 8002f44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f46:	430a      	orrs	r2, r1
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f52:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f54:	e07b      	b.n	800304e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f5c:	4b93      	ldr	r3, [pc, #588]	@ (80031ac <HAL_ADC_ConfigChannel+0x47c>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	0691      	lsls	r1, r2, #26
 8002f66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f74:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f76:	e06a      	b.n	800304e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80031ac <HAL_ADC_ConfigChannel+0x47c>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	0691      	lsls	r1, r2, #26
 8002f88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f96:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f98:	e059      	b.n	800304e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002fa0:	4b82      	ldr	r3, [pc, #520]	@ (80031ac <HAL_ADC_ConfigChannel+0x47c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	0691      	lsls	r1, r2, #26
 8002faa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002fac:	430a      	orrs	r2, r1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002fb8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fba:	e048      	b.n	800304e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	069b      	lsls	r3, r3, #26
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fde:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fe6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	069b      	lsls	r3, r3, #26
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d107      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003002:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800300a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	069b      	lsls	r3, r3, #26
 8003014:	429a      	cmp	r2, r3
 8003016:	d107      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003026:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	429a      	cmp	r2, r3
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800304a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800304c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d108      	bne.n	800306e <HAL_ADC_ConfigChannel+0x33e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x33e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_ADC_ConfigChannel+0x340>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 810a 	bne.w	800328a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d00f      	beq.n	800309e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43da      	mvns	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	400a      	ands	r2, r1
 8003098:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800309c:	e049      	b.n	8003132 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d91c      	bls.n	80030fa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6999      	ldr	r1, [r3, #24]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	3b1b      	subs	r3, #27
 80030d2:	2207      	movs	r2, #7
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4019      	ands	r1, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6898      	ldr	r0, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1b      	subs	r3, #27
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	619a      	str	r2, [r3, #24]
 80030f8:	e01b      	b.n	8003132 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6959      	ldr	r1, [r3, #20]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	2207      	movs	r2, #7
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	4019      	ands	r1, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6898      	ldr	r0, [r3, #8]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	fa00 f203 	lsl.w	r2, r0, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003132:	4b1f      	ldr	r3, [pc, #124]	@ (80031b0 <HAL_ADC_ConfigChannel+0x480>)
 8003134:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b10      	cmp	r3, #16
 800313c:	d105      	bne.n	800314a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800313e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800314e:	2b11      	cmp	r3, #17
 8003150:	d105      	bne.n	800315e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003162:	2b12      	cmp	r3, #18
 8003164:	f040 8091 	bne.w	800328a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 808a 	bne.w	800328a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800317e:	d102      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x456>
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <HAL_ADC_ConfigChannel+0x484>)
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e002      	b.n	800318c <HAL_ADC_ConfigChannel+0x45c>
 8003186:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800318a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10e      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x488>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d107      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x488>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e006      	b.n	80031ba <HAL_ADC_ConfigChannel+0x48a>
 80031ac:	83fff000 	.word	0x83fff000
 80031b0:	50000300 	.word	0x50000300
 80031b4:	50000100 	.word	0x50000100
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d150      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031be:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x4b0>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x4b0>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x4b2>
 80031e0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d13c      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d11d      	bne.n	800322a <HAL_ADC_ConfigChannel+0x4fa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f6:	d118      	bne.n	800322a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003202:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003204:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_ADC_ConfigChannel+0x574>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_ADC_ConfigChannel+0x578>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0c9a      	lsrs	r2, r3, #18
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800321a:	e002      	b.n	8003222 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3b01      	subs	r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f9      	bne.n	800321c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003228:	e02e      	b.n	8003288 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b11      	cmp	r3, #17
 8003230:	d10b      	bne.n	800324a <HAL_ADC_ConfigChannel+0x51a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323a:	d106      	bne.n	800324a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800323c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003246:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003248:	e01e      	b.n	8003288 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b12      	cmp	r3, #18
 8003250:	d11a      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800325a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800325c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800325e:	e013      	b.n	8003288 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003272:	e00a      	b.n	800328a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003286:	e000      	b.n	800328a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003288:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003292:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003296:	4618      	mov	r0, r3
 8003298:	376c      	adds	r7, #108	@ 0x6c
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000010 	.word	0x20000010
 80032a8:	431bde83 	.word	0x431bde83

080032ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <ADC_Enable+0x2c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <ADC_Enable+0x2c>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <ADC_Enable+0x2e>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d143      	bne.n	8003366 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <ADC_Enable+0xc4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e02f      	b.n	8003368 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003318:	f7ff f944 	bl	80025a4 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800331e:	e01b      	b.n	8003358 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003320:	f7ff f940 	bl	80025a4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d914      	bls.n	8003358 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d00d      	beq.n	8003358 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	f043 0210 	orr.w	r2, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e007      	b.n	8003368 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d1dc      	bne.n	8003320 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	8000003f 	.word	0x8000003f

08003374 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <ADC_Disable+0x2c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <ADC_Disable+0x2c>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <ADC_Disable+0x2e>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d047      	beq.n	8003436 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030d 	and.w	r3, r3, #13
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10f      	bne.n	80033d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0202 	orr.w	r2, r2, #2
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2203      	movs	r2, #3
 80033ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80033cc:	f7ff f8ea 	bl	80025a4 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033d2:	e029      	b.n	8003428 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e023      	b.n	8003438 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033f0:	f7ff f8d8 	bl	80025a4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d914      	bls.n	8003428 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10d      	bne.n	8003428 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f043 0210 	orr.w	r2, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e007      	b.n	8003438 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d0dc      	beq.n	80033f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800345c:	4013      	ands	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800346c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <__NVIC_GetPriorityGrouping+0x18>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f003 0307 	and.w	r3, r3, #7
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	@ (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	@ (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	@ 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003570:	d301      	bcc.n	8003576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	4a0a      	ldr	r2, [pc, #40]	@ (80035a0 <SysTick_Config+0x40>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357e:	210f      	movs	r1, #15
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f7ff ff8e 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <SysTick_Config+0x40>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <SysTick_Config+0x40>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff47 	bl	8003440 <__NVIC_SetPriorityGrouping>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035cc:	f7ff ff5c 	bl	8003488 <__NVIC_GetPriorityGrouping>
 80035d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f7ff ff8e 	bl	80034f8 <NVIC_EncodePriority>
 80035dc:	4602      	mov	r2, r0
 80035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5d 	bl	80034a4 <__NVIC_SetPriority>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffb0 	bl	8003560 <SysTick_Config>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361a:	e14e      	b.n	80038ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8140 	beq.w	80038b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d005      	beq.n	800364c <HAL_GPIO_Init+0x40>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d130      	bne.n	80036ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003682:	2201      	movs	r2, #1
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	f003 0201 	and.w	r2, r3, #1
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d017      	beq.n	80036ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4013      	ands	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d123      	bne.n	800373e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	08da      	lsrs	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3208      	adds	r2, #8
 80036fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	220f      	movs	r2, #15
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	6939      	ldr	r1, [r7, #16]
 800373a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0203 	and.w	r2, r3, #3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 809a 	beq.w	80038b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003780:	4b55      	ldr	r3, [pc, #340]	@ (80038d8 <HAL_GPIO_Init+0x2cc>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	4a54      	ldr	r2, [pc, #336]	@ (80038d8 <HAL_GPIO_Init+0x2cc>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6193      	str	r3, [r2, #24]
 800378c:	4b52      	ldr	r3, [pc, #328]	@ (80038d8 <HAL_GPIO_Init+0x2cc>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003798:	4a50      	ldr	r2, [pc, #320]	@ (80038dc <HAL_GPIO_Init+0x2d0>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	220f      	movs	r2, #15
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037c2:	d013      	beq.n	80037ec <HAL_GPIO_Init+0x1e0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a46      	ldr	r2, [pc, #280]	@ (80038e0 <HAL_GPIO_Init+0x2d4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00d      	beq.n	80037e8 <HAL_GPIO_Init+0x1dc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a45      	ldr	r2, [pc, #276]	@ (80038e4 <HAL_GPIO_Init+0x2d8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <HAL_GPIO_Init+0x1d8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a44      	ldr	r2, [pc, #272]	@ (80038e8 <HAL_GPIO_Init+0x2dc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_GPIO_Init+0x1d4>
 80037dc:	2303      	movs	r3, #3
 80037de:	e006      	b.n	80037ee <HAL_GPIO_Init+0x1e2>
 80037e0:	2305      	movs	r3, #5
 80037e2:	e004      	b.n	80037ee <HAL_GPIO_Init+0x1e2>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e002      	b.n	80037ee <HAL_GPIO_Init+0x1e2>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_GPIO_Init+0x1e2>
 80037ec:	2300      	movs	r3, #0
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	f002 0203 	and.w	r2, r2, #3
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	4093      	lsls	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037fe:	4937      	ldr	r1, [pc, #220]	@ (80038dc <HAL_GPIO_Init+0x2d0>)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3302      	adds	r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380c:	4b37      	ldr	r3, [pc, #220]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003830:	4a2e      	ldr	r2, [pc, #184]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003836:	4b2d      	ldr	r3, [pc, #180]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800385a:	4a24      	ldr	r2, [pc, #144]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003860:	4b22      	ldr	r3, [pc, #136]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388a:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038ae:	4a0f      	ldr	r2, [pc, #60]	@ (80038ec <HAL_GPIO_Init+0x2e0>)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3301      	adds	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f aea9 	bne.w	800361c <HAL_GPIO_Init+0x10>
  }
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40010000 	.word	0x40010000
 80038e0:	48000400 	.word	0x48000400
 80038e4:	48000800 	.word	0x48000800
 80038e8:	48000c00 	.word	0x48000c00
 80038ec:	40010400 	.word	0x40010400

080038f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e001      	b.n	8003912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
 800392c:	4613      	mov	r3, r2
 800392e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003930:	787b      	ldrb	r3, [r7, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800393c:	e002      	b.n	8003944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003956:	af00      	add	r7, sp, #0
 8003958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003960:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f000 bff4 	b.w	800495e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 816d 	beq.w	8003c66 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800398c:	4bb4      	ldr	r3, [pc, #720]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b04      	cmp	r3, #4
 8003996:	d00c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003998:	4bb1      	ldr	r3, [pc, #708]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x104>
 80039a4:	4bae      	ldr	r3, [pc, #696]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d150      	bne.n	8003a54 <HAL_RCC_OscConfig+0x104>
 80039b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039b6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80039d2:	d802      	bhi.n	80039da <HAL_RCC_OscConfig+0x8a>
 80039d4:	4ba2      	ldr	r3, [pc, #648]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0xb6>
 80039da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039de:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80039ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80039f6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003a02:	4b97      	ldr	r3, [pc, #604]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a0a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003a0e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003a12:	fa92 f2a2 	rbit	r2, r2
 8003a16:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003a1a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	f042 0220 	orr.w	r2, r2, #32
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	f002 021f 	and.w	r2, r2, #31
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f202 	lsl.w	r2, r1, r2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8114 	beq.w	8003c64 <HAL_RCC_OscConfig+0x314>
 8003a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f040 810b 	bne.w	8003c64 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f000 bf85 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a64:	d106      	bne.n	8003a74 <HAL_RCC_OscConfig+0x124>
 8003a66:	4b7e      	ldr	r3, [pc, #504]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e036      	b.n	8003ae2 <HAL_RCC_OscConfig+0x192>
 8003a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_OscConfig+0x14e>
 8003a84:	4b76      	ldr	r3, [pc, #472]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a75      	ldr	r2, [pc, #468]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b73      	ldr	r3, [pc, #460]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a72      	ldr	r2, [pc, #456]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e021      	b.n	8003ae2 <HAL_RCC_OscConfig+0x192>
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aae:	d10c      	bne.n	8003aca <HAL_RCC_OscConfig+0x17a>
 8003ab0:	4b6b      	ldr	r3, [pc, #428]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003ab6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b68      	ldr	r3, [pc, #416]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a67      	ldr	r2, [pc, #412]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x192>
 8003aca:	4b65      	ldr	r3, [pc, #404]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a64      	ldr	r2, [pc, #400]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b62      	ldr	r3, [pc, #392]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a61      	ldr	r2, [pc, #388]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003adc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	495a      	ldr	r1, [pc, #360]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d054      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fd4a 	bl	80025a4 <HAL_GetTick>
 8003b10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b16:	f7fe fd45 	bl	80025a4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	@ 0x64
 8003b24:	d902      	bls.n	8003b2c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	f000 bf19 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
 8003b2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b30:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003b40:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b4c:	d802      	bhi.n	8003b54 <HAL_RCC_OscConfig+0x204>
 8003b4e:	4b44      	ldr	r3, [pc, #272]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e015      	b.n	8003b80 <HAL_RCC_OscConfig+0x230>
 8003b54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b58:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b6c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b7c:	4b38      	ldr	r3, [pc, #224]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b84:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003b88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b8c:	fa92 f2a2 	rbit	r2, r2
 8003b90:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003b94:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f042 0220 	orr.w	r2, r2, #32
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f002 021f 	and.w	r2, r2, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0b0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1c6>
 8003bb4:	e057      	b.n	8003c66 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fe fcf5 	bl	80025a4 <HAL_GetTick>
 8003bba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe fcf0 	bl	80025a4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b64      	cmp	r3, #100	@ 0x64
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f000 bec4 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
 8003bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bda:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003bea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bf6:	d802      	bhi.n	8003bfe <HAL_RCC_OscConfig+0x2ae>
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	e015      	b.n	8003c2a <HAL_RCC_OscConfig+0x2da>
 8003bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c02:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003c12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c16:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003c1a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003c26:	4b0e      	ldr	r3, [pc, #56]	@ (8003c60 <HAL_RCC_OscConfig+0x310>)
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c2e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003c32:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c36:	fa92 f2a2 	rbit	r2, r2
 8003c3a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003c3e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003c42:	fab2 f282 	clz	r2, r2
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	f002 021f 	and.w	r2, r2, #31
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1b0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x270>
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_OscConfig+0x316>
 8003c60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 816c 	beq.w	8003f54 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c7c:	4bcc      	ldr	r3, [pc, #816]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c88:	4bc9      	ldr	r3, [pc, #804]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d16d      	bne.n	8003d70 <HAL_RCC_OscConfig+0x420>
 8003c94:	4bc6      	ldr	r3, [pc, #792]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d167      	bne.n	8003d70 <HAL_RCC_OscConfig+0x420>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003cb2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cbe:	d802      	bhi.n	8003cc6 <HAL_RCC_OscConfig+0x376>
 8003cc0:	4bbb      	ldr	r3, [pc, #748]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e013      	b.n	8003cee <HAL_RCC_OscConfig+0x39e>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003cde:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003cea:	4bb1      	ldr	r3, [pc, #708]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003cf4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003cf8:	fa92 f2a2 	rbit	r2, r2
 8003cfc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003d00:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f002 021f 	and.w	r2, r2, #31
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3e6>
 8003d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d002      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f000 be14 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b9e      	ldr	r3, [pc, #632]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	21f8      	movs	r1, #248	@ 0xf8
 8003d4c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003d54:	fa91 f1a1 	rbit	r1, r1
 8003d58:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003d5c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003d60:	fab1 f181 	clz	r1, r1
 8003d64:	b2c9      	uxtb	r1, r1
 8003d66:	408b      	lsls	r3, r1
 8003d68:	4991      	ldr	r1, [pc, #580]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e0f1      	b.n	8003f54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8083 	beq.w	8003e88 <HAL_RCC_OscConfig+0x538>
 8003d82:	2301      	movs	r3, #1
 8003d84:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003d94:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003da2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	2301      	movs	r3, #1
 8003dac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fe fbf9 	bl	80025a4 <HAL_GetTick>
 8003db2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db8:	f7fe fbf4 	bl	80025a4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	f000 bdc8 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003de0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dec:	d802      	bhi.n	8003df4 <HAL_RCC_OscConfig+0x4a4>
 8003dee:	4b70      	ldr	r3, [pc, #448]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	e013      	b.n	8003e1c <HAL_RCC_OscConfig+0x4cc>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003e06:	2302      	movs	r3, #2
 8003e08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003e0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003e18:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003e22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003e26:	fa92 f2a2 	rbit	r2, r2
 8003e2a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003e2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003e32:	fab2 f282 	clz	r2, r2
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f042 0220 	orr.w	r2, r2, #32
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	f002 021f 	and.w	r2, r2, #31
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f202 	lsl.w	r2, r1, r2
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0b4      	beq.n	8003db8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b58      	ldr	r3, [pc, #352]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	21f8      	movs	r1, #248	@ 0xf8
 8003e64:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e6c:	fa91 f1a1 	rbit	r1, r1
 8003e70:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003e74:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003e78:	fab1 f181 	clz	r1, r1
 8003e7c:	b2c9      	uxtb	r1, r1
 8003e7e:	408b      	lsls	r3, r1
 8003e80:	494b      	ldr	r1, [pc, #300]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
 8003e86:	e065      	b.n	8003f54 <HAL_RCC_OscConfig+0x604>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ea8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fb76 	bl	80025a4 <HAL_GetTick>
 8003eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebe:	f7fe fb71 	bl	80025a4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d902      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	f000 bd45 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ef2:	d802      	bhi.n	8003efa <HAL_RCC_OscConfig+0x5aa>
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	e013      	b.n	8003f22 <HAL_RCC_OscConfig+0x5d2>
 8003efa:	2302      	movs	r3, #2
 8003efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003f12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003f1e:	4b24      	ldr	r3, [pc, #144]	@ (8003fb0 <HAL_RCC_OscConfig+0x660>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	2202      	movs	r2, #2
 8003f24:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003f28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003f2c:	fa92 f2a2 	rbit	r2, r2
 8003f30:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003f34:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f002 021f 	and.w	r2, r2, #31
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1b4      	bne.n	8003ebe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8115 	beq.w	8004194 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d07e      	beq.n	8004078 <HAL_RCC_OscConfig+0x728>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_RCC_OscConfig+0x664>)
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fafe 	bl	80025a4 <HAL_GetTick>
 8003fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fac:	e00f      	b.n	8003fce <HAL_RCC_OscConfig+0x67e>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fe faf4 	bl	80025a4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f000 bcc8 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003fe8:	2202      	movs	r2, #2
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800400c:	2202      	movs	r2, #2
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	fa93 f2a3 	rbit	r2, r3
 800401e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004022:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004026:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004028:	4bb0      	ldr	r3, [pc, #704]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 800402a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004030:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004034:	2102      	movs	r1, #2
 8004036:	6019      	str	r1, [r3, #0]
 8004038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f1a3 	rbit	r1, r3
 8004046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800404e:	6019      	str	r1, [r3, #0]
  return result;
 8004050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004054:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0a0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x668>
 8004076:	e08d      	b.n	8004194 <HAL_RCC_OscConfig+0x844>
 8004078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004088:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	fa93 f2a3 	rbit	r2, r3
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800409a:	601a      	str	r2, [r3, #0]
  return result;
 800409c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80040a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b90      	ldr	r3, [pc, #576]	@ (80042f0 <HAL_RCC_OscConfig+0x9a0>)
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fa73 	bl	80025a4 <HAL_GetTick>
 80040be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c2:	e00a      	b.n	80040da <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe fa6e 	bl	80025a4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d902      	bls.n	80040da <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	f000 bc42 	b.w	800495e <HAL_RCC_OscConfig+0x100e>
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040e2:	2202      	movs	r2, #2
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fa93 f2a3 	rbit	r2, r3
 80040f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004106:	2202      	movs	r2, #2
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004126:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800412a:	2202      	movs	r2, #2
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004132:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	fa93 f2a3 	rbit	r2, r3
 800413c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004140:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004144:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004146:	4b69      	ldr	r3, [pc, #420]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800414a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004152:	2102      	movs	r1, #2
 8004154:	6019      	str	r1, [r3, #0]
 8004156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f1a3 	rbit	r1, r3
 8004164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004168:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800416c:	6019      	str	r1, [r3, #0]
  return result;
 800416e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004172:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d197      	bne.n	80040c4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 819e 	beq.w	80044e6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b0:	4b4e      	ldr	r3, [pc, #312]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	61d3      	str	r3, [r2, #28]
 80041c8:	4b48      	ldr	r3, [pc, #288]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80041d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041de:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b42      	ldr	r3, [pc, #264]	@ (80042f4 <HAL_RCC_OscConfig+0x9a4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11a      	bne.n	800422c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b3f      	ldr	r3, [pc, #252]	@ (80042f4 <HAL_RCC_OscConfig+0x9a4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3e      	ldr	r2, [pc, #248]	@ (80042f4 <HAL_RCC_OscConfig+0x9a4>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fe f9cf 	bl	80025a4 <HAL_GetTick>
 8004206:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	e009      	b.n	8004220 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fe f9ca 	bl	80025a4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	@ 0x64
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e39e      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b34      	ldr	r3, [pc, #208]	@ (80042f4 <HAL_RCC_OscConfig+0x9a4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ef      	beq.n	800420c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x8fa>
 800423c:	4b2b      	ldr	r3, [pc, #172]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6213      	str	r3, [r2, #32]
 8004248:	e035      	b.n	80042b6 <HAL_RCC_OscConfig+0x966>
 800424a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x924>
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4a23      	ldr	r2, [pc, #140]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	6213      	str	r3, [r2, #32]
 8004266:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4a20      	ldr	r2, [pc, #128]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 800426c:	f023 0304 	bic.w	r3, r3, #4
 8004270:	6213      	str	r3, [r2, #32]
 8004272:	e020      	b.n	80042b6 <HAL_RCC_OscConfig+0x966>
 8004274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d10c      	bne.n	800429e <HAL_RCC_OscConfig+0x94e>
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a18      	ldr	r2, [pc, #96]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a15      	ldr	r2, [pc, #84]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	e00b      	b.n	80042b6 <HAL_RCC_OscConfig+0x966>
 800429e:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6213      	str	r3, [r2, #32]
 80042aa:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a0f      	ldr	r2, [pc, #60]	@ (80042ec <HAL_RCC_OscConfig+0x99c>)
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8087 	beq.w	80043d6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fe f96c 	bl	80025a4 <HAL_GetTick>
 80042cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e012      	b.n	80042f8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe f967 	bl	80025a4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d908      	bls.n	80042f8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e339      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	10908120 	.word	0x10908120
 80042f4:	40007000 	.word	0x40007000
 80042f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004300:	2202      	movs	r2, #2
 8004302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004308:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004316:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004320:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004324:	2202      	movs	r2, #2
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	fa93 f2a3 	rbit	r2, r3
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800433e:	601a      	str	r2, [r3, #0]
  return result;
 8004340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004344:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004348:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_RCC_OscConfig+0xa10>
 800435a:	4b98      	ldr	r3, [pc, #608]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	e013      	b.n	8004388 <HAL_RCC_OscConfig+0xa38>
 8004360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004364:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004368:	2202      	movs	r2, #2
 800436a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004370:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	fa93 f2a3 	rbit	r2, r3
 800437a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	4b8d      	ldr	r3, [pc, #564]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800438c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004390:	2102      	movs	r1, #2
 8004392:	6011      	str	r1, [r2, #0]
 8004394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004398:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	fa92 f1a2 	rbit	r1, r2
 80043a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043aa:	6011      	str	r1, [r2, #0]
  return result;
 80043ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	fab2 f282 	clz	r2, r2
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f002 021f 	and.w	r2, r2, #31
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f202 	lsl.w	r2, r1, r2
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f43f af7f 	beq.w	80042d2 <HAL_RCC_OscConfig+0x982>
 80043d4:	e07d      	b.n	80044d2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d6:	f7fe f8e5 	bl	80025a4 <HAL_GetTick>
 80043da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fe f8e0 	bl	80025a4 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e2b2      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
 80043f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004400:	2202      	movs	r2, #2
 8004402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004408:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	fa93 f2a3 	rbit	r2, r3
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004420:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004424:	2202      	movs	r2, #2
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	fa93 f2a3 	rbit	r2, r3
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800443e:	601a      	str	r2, [r3, #0]
  return result;
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004448:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_RCC_OscConfig+0xb10>
 800445a:	4b58      	ldr	r3, [pc, #352]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	e013      	b.n	8004488 <HAL_RCC_OscConfig+0xb38>
 8004460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004464:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004468:	2202      	movs	r2, #2
 800446a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004470:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	fa93 f2a3 	rbit	r2, r3
 800447a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	4b4d      	ldr	r3, [pc, #308]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800448c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004490:	2102      	movs	r1, #2
 8004492:	6011      	str	r1, [r2, #0]
 8004494:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004498:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	fa92 f1a2 	rbit	r1, r2
 80044a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044a6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80044aa:	6011      	str	r1, [r2, #0]
  return result;
 80044ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	fab2 f282 	clz	r2, r2
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	f002 021f 	and.w	r2, r2, #31
 80044c6:	2101      	movs	r1, #1
 80044c8:	fa01 f202 	lsl.w	r2, r1, r2
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d186      	bne.n	80043e0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044d2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4b38      	ldr	r3, [pc, #224]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a37      	ldr	r2, [pc, #220]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8232 	beq.w	800495c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f8:	4b30      	ldr	r3, [pc, #192]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	f000 8201 	beq.w	8004908 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2b02      	cmp	r3, #2
 8004514:	f040 8157 	bne.w	80047c6 <HAL_RCC_OscConfig+0xe76>
 8004518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004520:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	fa93 f2a3 	rbit	r2, r3
 8004534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004538:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800453c:	601a      	str	r2, [r3, #0]
  return result;
 800453e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004542:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004546:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004552:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	461a      	mov	r2, r3
 800455a:	2300      	movs	r3, #0
 800455c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7fe f821 	bl	80025a4 <HAL_GetTick>
 8004562:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004566:	e009      	b.n	800457c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fe f81c 	bl	80025a4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e1f0      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
 800457c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004580:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800458e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	fa93 f2a3 	rbit	r2, r3
 8004598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80045a0:	601a      	str	r2, [r3, #0]
  return result;
 80045a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80045aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80045b4:	d804      	bhi.n	80045c0 <HAL_RCC_OscConfig+0xc70>
 80045b6:	4b01      	ldr	r3, [pc, #4]	@ (80045bc <HAL_RCC_OscConfig+0xc6c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	e029      	b.n	8004610 <HAL_RCC_OscConfig+0xcc0>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	fa93 f2a3 	rbit	r2, r3
 80045dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	fa93 f2a3 	rbit	r2, r3
 8004602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004606:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	4bc3      	ldr	r3, [pc, #780]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004614:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004618:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004622:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	fa92 f1a2 	rbit	r1, r2
 800462c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004630:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004634:	6011      	str	r1, [r2, #0]
  return result;
 8004636:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800463a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	fab2 f282 	clz	r2, r2
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	f042 0220 	orr.w	r2, r2, #32
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	f002 021f 	and.w	r2, r2, #31
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f202 	lsl.w	r2, r1, r2
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d185      	bne.n	8004568 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465c:	4baf      	ldr	r3, [pc, #700]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004668:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004674:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	430b      	orrs	r3, r1
 800467e:	49a7      	ldr	r1, [pc, #668]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800468c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004696:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fa93 f2a3 	rbit	r2, r3
 80046a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80046a8:	601a      	str	r2, [r3, #0]
  return result;
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80046b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	461a      	mov	r2, r3
 80046c6:	2301      	movs	r3, #1
 80046c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fd ff6b 	bl	80025a4 <HAL_GetTick>
 80046ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d2:	e009      	b.n	80046e8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd ff66 	bl	80025a4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e13a      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
 80046e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	fa93 f2a3 	rbit	r2, r3
 8004704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004708:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800470c:	601a      	str	r2, [r3, #0]
  return result;
 800470e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004712:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004716:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004718:	fab3 f383 	clz	r3, r3
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004720:	d802      	bhi.n	8004728 <HAL_RCC_OscConfig+0xdd8>
 8004722:	4b7e      	ldr	r3, [pc, #504]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	e027      	b.n	8004778 <HAL_RCC_OscConfig+0xe28>
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	fa93 f2a3 	rbit	r2, r3
 8004744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004748:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004752:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004756:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004760:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	fa93 f2a3 	rbit	r2, r3
 800476a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	4b69      	ldr	r3, [pc, #420]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800477c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004780:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004784:	6011      	str	r1, [r2, #0]
 8004786:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800478a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	fa92 f1a2 	rbit	r1, r2
 8004794:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004798:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800479c:	6011      	str	r1, [r2, #0]
  return result;
 800479e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	fab2 f282 	clz	r2, r2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	f042 0220 	orr.w	r2, r2, #32
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	f002 021f 	and.w	r2, r2, #31
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d087      	beq.n	80046d4 <HAL_RCC_OscConfig+0xd84>
 80047c4:	e0ca      	b.n	800495c <HAL_RCC_OscConfig+0x100c>
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	fa93 f2a3 	rbit	r2, r3
 80047e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047ea:	601a      	str	r2, [r3, #0]
  return result;
 80047ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004800:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fd feca 	bl	80025a4 <HAL_GetTick>
 8004810:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004814:	e009      	b.n	800482a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd fec5 	bl	80025a4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e099      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
 800482a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004832:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	fa93 f2a3 	rbit	r2, r3
 8004846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800484e:	601a      	str	r2, [r3, #0]
  return result;
 8004850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004854:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004858:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b3f      	cmp	r3, #63	@ 0x3f
 8004862:	d802      	bhi.n	800486a <HAL_RCC_OscConfig+0xf1a>
 8004864:	4b2d      	ldr	r3, [pc, #180]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e027      	b.n	80048ba <HAL_RCC_OscConfig+0xf6a>
 800486a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004872:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	fa93 f2a3 	rbit	r2, r3
 8004886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004894:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004898:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	fa93 f2a3 	rbit	r2, r3
 80048ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	4b19      	ldr	r3, [pc, #100]	@ (800491c <HAL_RCC_OscConfig+0xfcc>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048be:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048c2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80048c6:	6011      	str	r1, [r2, #0]
 80048c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	fa92 f1a2 	rbit	r1, r2
 80048d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048de:	6011      	str	r1, [r2, #0]
  return result;
 80048e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048e4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	fab2 f282 	clz	r2, r2
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	f042 0220 	orr.w	r2, r2, #32
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	f002 021f 	and.w	r2, r2, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d187      	bne.n	8004816 <HAL_RCC_OscConfig+0xec6>
 8004906:	e029      	b.n	800495c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d103      	bne.n	8004920 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e020      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
 800491c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004920:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_RCC_OscConfig+0x1018>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004928:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800492c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	429a      	cmp	r2, r3
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004940:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004944:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800494c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b09e      	sub	sp, #120	@ 0x78
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e154      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b89      	ldr	r3, [pc, #548]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b86      	ldr	r3, [pc, #536]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	4984      	ldr	r1, [pc, #528]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b82      	ldr	r3, [pc, #520]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e13c      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4978      	ldr	r1, [pc, #480]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80cd 	beq.w	8004b7a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d137      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xec>
 80049e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80049f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f8:	fab3 f383 	clz	r3, r3
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a00:	d802      	bhi.n	8004a08 <HAL_RCC_ClockConfig+0x9c>
 8004a02:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_ClockConfig+0xbc>
 8004a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a24:	4b62      	ldr	r3, [pc, #392]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a30:	fa92 f2a2 	rbit	r2, r2
 8004a34:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004a36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a38:	fab2 f282 	clz	r2, r2
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	f042 0220 	orr.w	r2, r2, #32
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	f002 021f 	and.w	r2, r2, #31
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d171      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0ea      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d137      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x164>
 8004a60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a64:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a70:	fab3 f383 	clz	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a78:	d802      	bhi.n	8004a80 <HAL_RCC_ClockConfig+0x114>
 8004a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	e00f      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x134>
 8004a80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a9c:	4b44      	ldr	r3, [pc, #272]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aa4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004aa8:	fa92 f2a2 	rbit	r2, r2
 8004aac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ab0:	fab2 f282 	clz	r2, r2
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	f042 0220 	orr.w	r2, r2, #32
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	f002 021f 	and.w	r2, r2, #31
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d135      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0ae      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ae6:	d802      	bhi.n	8004aee <HAL_RCC_ClockConfig+0x182>
 8004ae8:	4b31      	ldr	r3, [pc, #196]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	e00d      	b.n	8004b0a <HAL_RCC_ClockConfig+0x19e>
 8004aee:	2302      	movs	r3, #2
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afa:	2302      	movs	r3, #2
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	61ba      	str	r2, [r7, #24]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	fa92 f2a2 	rbit	r2, r2
 8004b14:	617a      	str	r2, [r7, #20]
  return result;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	fab2 f282 	clz	r2, r2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	f002 021f 	and.w	r2, r2, #31
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e07a      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b38:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 0203 	bic.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	491a      	ldr	r1, [pc, #104]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fd2b 	bl	80025a4 <HAL_GetTick>
 8004b4e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b52:	f7fd fd27 	bl	80025a4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e062      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b68:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 020c 	and.w	r2, r3, #12
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d1eb      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d215      	bcs.n	8004bb4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b88:	4b08      	ldr	r3, [pc, #32]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 0207 	bic.w	r2, r3, #7
 8004b90:	4906      	ldr	r1, [pc, #24]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b98:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d006      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e041      	b.n	8004c2e <HAL_RCC_ClockConfig+0x2c2>
 8004baa:	bf00      	nop
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <HAL_RCC_ClockConfig+0x2cc>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	491a      	ldr	r1, [pc, #104]	@ (8004c38 <HAL_RCC_ClockConfig+0x2cc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bde:	4b16      	ldr	r3, [pc, #88]	@ (8004c38 <HAL_RCC_ClockConfig+0x2cc>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4912      	ldr	r1, [pc, #72]	@ (8004c38 <HAL_RCC_ClockConfig+0x2cc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bf2:	f000 f829 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <HAL_RCC_ClockConfig+0x2cc>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c00:	22f0      	movs	r2, #240	@ 0xf0
 8004c02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	fa92 f2a2 	rbit	r2, r2
 8004c0a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	fab2 f282 	clz	r2, r2
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	40d3      	lsrs	r3, r2
 8004c16:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <HAL_RCC_ClockConfig+0x2d0>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c1e:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HAL_RCC_ClockConfig+0x2d4>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <HAL_RCC_ClockConfig+0x2d8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fc78 	bl	800251c <HAL_InitTick>
  
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3778      	adds	r7, #120	@ 0x78
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800863c 	.word	0x0800863c
 8004c40:	20000010 	.word	0x20000010
 8004c44:	20000014 	.word	0x20000014

08004c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c62:	4b1e      	ldr	r3, [pc, #120]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d002      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x30>
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x36>
 8004c76:	e026      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c78:	4b19      	ldr	r3, [pc, #100]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c7a:	613b      	str	r3, [r7, #16]
      break;
 8004c7c:	e026      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	0c9b      	lsrs	r3, r3, #18
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c88:	5cd3      	ldrb	r3, [r2, r3]
 8004c8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004c8c:	4b13      	ldr	r3, [pc, #76]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	4a14      	ldr	r2, [pc, #80]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]
      break;
 8004cc4:	e002      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cc6:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cc8:	613b      	str	r3, [r7, #16]
      break;
 8004cca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ccc:	693b      	ldr	r3, [r7, #16]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	007a1200 	.word	0x007a1200
 8004ce4:	08008654 	.word	0x08008654
 8004ce8:	08008664 	.word	0x08008664
 8004cec:	003d0900 	.word	0x003d0900

08004cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf4:	4b03      	ldr	r3, [pc, #12]	@ (8004d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000010 	.word	0x20000010

08004d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d0e:	f7ff ffef 	bl	8004cf0 <HAL_RCC_GetHCLKFreq>
 8004d12:	4601      	mov	r1, r0
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d1c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	fa92 f2a2 	rbit	r2, r2
 8004d28:	603a      	str	r2, [r7, #0]
  return result;
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	fab2 f282 	clz	r2, r2
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	40d3      	lsrs	r3, r2
 8004d34:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000
 8004d48:	0800864c 	.word	0x0800864c

08004d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d52:	f7ff ffcd 	bl	8004cf0 <HAL_RCC_GetHCLKFreq>
 8004d56:	4601      	mov	r1, r0
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d60:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	fa92 f2a2 	rbit	r2, r2
 8004d6c:	603a      	str	r2, [r7, #0]
  return result;
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	fab2 f282 	clz	r2, r2
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	40d3      	lsrs	r3, r2
 8004d78:	4a04      	ldr	r2, [pc, #16]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800864c 	.word	0x0800864c

08004d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b092      	sub	sp, #72	@ 0x48
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80cb 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db4:	4b85      	ldr	r3, [pc, #532]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10e      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc0:	4b82      	ldr	r3, [pc, #520]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4a81      	ldr	r2, [pc, #516]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	61d3      	str	r3, [r2, #28]
 8004dcc:	4b7f      	ldr	r3, [pc, #508]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b7c      	ldr	r3, [pc, #496]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d118      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	4b79      	ldr	r3, [pc, #484]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a78      	ldr	r2, [pc, #480]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df6:	f7fd fbd5 	bl	80025a4 <HAL_GetTick>
 8004dfa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfe:	f7fd fbd1 	bl	80025a4 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b64      	cmp	r3, #100	@ 0x64
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0d9      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d07b      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d074      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e3a:	4b64      	ldr	r3, [pc, #400]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e48:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	2301      	movs	r3, #1
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4b54      	ldr	r3, [pc, #336]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	461a      	mov	r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e90:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d043      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fb82 	bl	80025a4 <HAL_GetTick>
 8004ea0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	e00a      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fb7e 	bl	80025a4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e084      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	fa93 f3a3 	rbit	r3, r3
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	fa93 f3a3 	rbit	r3, r3
 8004ed0:	61fb      	str	r3, [r7, #28]
  return result;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004ee4:	4b39      	ldr	r3, [pc, #228]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	e007      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004eea:	2302      	movs	r3, #2
 8004eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	4b35      	ldr	r3, [pc, #212]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	2202      	movs	r2, #2
 8004efc:	613a      	str	r2, [r7, #16]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	fa92 f2a2 	rbit	r2, r2
 8004f04:	60fa      	str	r2, [r7, #12]
  return result;
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	fab2 f282 	clz	r2, r2
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	f002 021f 	and.w	r2, r2, #31
 8004f18:	2101      	movs	r1, #1
 8004f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0bf      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f24:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4926      	ldr	r1, [pc, #152]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f36:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4b23      	ldr	r3, [pc, #140]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	4a22      	ldr	r2, [pc, #136]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f56:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f023 0203 	bic.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	491a      	ldr	r1, [pc, #104]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f74:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	f023 0210 	bic.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4912      	ldr	r1, [pc, #72]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f92:	4b0e      	ldr	r3, [pc, #56]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	490b      	ldr	r1, [pc, #44]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004fb0:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	4903      	ldr	r1, [pc, #12]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3748      	adds	r7, #72	@ 0x48
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	10908100 	.word	0x10908100

08004fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e049      	b.n	800507e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc ffac 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 f88a 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e038      	b.n	8005112 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005120 <HAL_TIM_Base_Start+0x98>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00e      	beq.n	80050d0 <HAL_TIM_Base_Start+0x48>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ba:	d009      	beq.n	80050d0 <HAL_TIM_Base_Start+0x48>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a18      	ldr	r2, [pc, #96]	@ (8005124 <HAL_TIM_Base_Start+0x9c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_TIM_Base_Start+0x48>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a17      	ldr	r2, [pc, #92]	@ (8005128 <HAL_TIM_Base_Start+0xa0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d115      	bne.n	80050fc <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <HAL_TIM_Base_Start+0xa4>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b06      	cmp	r3, #6
 80050e0:	d015      	beq.n	800510e <HAL_TIM_Base_Start+0x86>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d011      	beq.n	800510e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	e008      	b.n	800510e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e000      	b.n	8005110 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40014000 	.word	0x40014000
 800512c:	00010007 	.word	0x00010007

08005130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a38      	ldr	r2, [pc, #224]	@ (8005224 <TIM_Base_SetConfig+0xf4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_Base_SetConfig+0x28>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0x28>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a35      	ldr	r2, [pc, #212]	@ (8005228 <TIM_Base_SetConfig+0xf8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <TIM_Base_SetConfig+0xf4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <TIM_Base_SetConfig+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a29      	ldr	r2, [pc, #164]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <TIM_Base_SetConfig+0xf4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0xc0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a14      	ldr	r2, [pc, #80]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0xc0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a13      	ldr	r2, [pc, #76]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0xc0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a12      	ldr	r2, [pc, #72]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]
  }
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e054      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a24      	ldr	r2, [pc, #144]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a17      	ldr	r2, [pc, #92]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a11      	ldr	r2, [pc, #68]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40000400 	.word	0x40000400
 8005310:	40014000 	.word	0x40014000

08005314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e040      	b.n	80053a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc fe30 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2224      	movs	r2, #36	@ 0x24
 8005340:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9e8 	bl	8005730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8af 	bl	80054c4 <UART_SetConfig>
 8005366:	4603      	mov	r3, r0
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e01b      	b.n	80053a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800537e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800538e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fa67 	bl	8005874 <UART_CheckIdleState>
 80053a6:	4603      	mov	r3, r0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	@ 0x28
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d177      	bne.n	80054b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_UART_Transmit+0x24>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e070      	b.n	80054ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2221      	movs	r2, #33	@ 0x21
 80053e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e6:	f7fd f8dd 	bl	80025a4 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005404:	d108      	bne.n	8005418 <HAL_UART_Transmit+0x68>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e003      	b.n	8005420 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005420:	e02f      	b.n	8005482 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	2180      	movs	r1, #128	@ 0x80
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fac9 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e03b      	b.n	80054ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005454:	b292      	uxth	r2, r2
 8005456:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	3302      	adds	r3, #2
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e007      	b.n	8005470 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1c9      	bne.n	8005422 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	2140      	movs	r1, #64	@ 0x40
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fa93 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e005      	b.n	80054ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005718 <UART_SetConfig+0x254>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	430a      	orrs	r2, r1
 8005534:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a78      	ldr	r2, [pc, #480]	@ (800571c <UART_SetConfig+0x258>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d120      	bne.n	8005582 <UART_SetConfig+0xbe>
 8005540:	4b77      	ldr	r3, [pc, #476]	@ (8005720 <UART_SetConfig+0x25c>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b03      	cmp	r3, #3
 800554a:	d817      	bhi.n	800557c <UART_SetConfig+0xb8>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <UART_SetConfig+0x90>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005565 	.word	0x08005565
 8005558:	08005571 	.word	0x08005571
 800555c:	08005577 	.word	0x08005577
 8005560:	0800556b 	.word	0x0800556b
 8005564:	2300      	movs	r3, #0
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e01d      	b.n	80055a6 <UART_SetConfig+0xe2>
 800556a:	2302      	movs	r3, #2
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e01a      	b.n	80055a6 <UART_SetConfig+0xe2>
 8005570:	2304      	movs	r3, #4
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e017      	b.n	80055a6 <UART_SetConfig+0xe2>
 8005576:	2308      	movs	r3, #8
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e014      	b.n	80055a6 <UART_SetConfig+0xe2>
 800557c:	2310      	movs	r3, #16
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e011      	b.n	80055a6 <UART_SetConfig+0xe2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a67      	ldr	r2, [pc, #412]	@ (8005724 <UART_SetConfig+0x260>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d102      	bne.n	8005592 <UART_SetConfig+0xce>
 800558c:	2300      	movs	r3, #0
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e009      	b.n	80055a6 <UART_SetConfig+0xe2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a64      	ldr	r2, [pc, #400]	@ (8005728 <UART_SetConfig+0x264>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d102      	bne.n	80055a2 <UART_SetConfig+0xde>
 800559c:	2300      	movs	r3, #0
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e001      	b.n	80055a6 <UART_SetConfig+0xe2>
 80055a2:	2310      	movs	r3, #16
 80055a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ae:	d15a      	bne.n	8005666 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80055b0:	7ffb      	ldrb	r3, [r7, #31]
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d827      	bhi.n	8005606 <UART_SetConfig+0x142>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <UART_SetConfig+0xf8>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	08005607 	.word	0x08005607
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005607 	.word	0x08005607
 80055dc:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7ff fb92 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 80055e4:	61b8      	str	r0, [r7, #24]
        break;
 80055e6:	e013      	b.n	8005610 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7ff fbb0 	bl	8004d4c <HAL_RCC_GetPCLK2Freq>
 80055ec:	61b8      	str	r0, [r7, #24]
        break;
 80055ee:	e00f      	b.n	8005610 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b4e      	ldr	r3, [pc, #312]	@ (800572c <UART_SetConfig+0x268>)
 80055f2:	61bb      	str	r3, [r7, #24]
        break;
 80055f4:	e00c      	b.n	8005610 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7ff fb27 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 80055fa:	61b8      	str	r0, [r7, #24]
        break;
 80055fc:	e008      	b.n	8005610 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005602:	61bb      	str	r3, [r7, #24]
        break;
 8005604:	e004      	b.n	8005610 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	77bb      	strb	r3, [r7, #30]
        break;
 800560e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d074      	beq.n	8005700 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	005a      	lsls	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d916      	bls.n	8005660 <UART_SetConfig+0x19c>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005638:	d212      	bcs.n	8005660 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f023 030f 	bic.w	r3, r3, #15
 8005642:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	b29b      	uxth	r3, r3
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	b29a      	uxth	r2, r3
 8005650:	89fb      	ldrh	r3, [r7, #14]
 8005652:	4313      	orrs	r3, r2
 8005654:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	89fa      	ldrh	r2, [r7, #14]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	e04f      	b.n	8005700 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77bb      	strb	r3, [r7, #30]
 8005664:	e04c      	b.n	8005700 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005666:	7ffb      	ldrb	r3, [r7, #31]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d828      	bhi.n	80056be <UART_SetConfig+0x1fa>
 800566c:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <UART_SetConfig+0x1b0>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005699 	.word	0x08005699
 8005678:	080056a1 	.word	0x080056a1
 800567c:	080056a9 	.word	0x080056a9
 8005680:	080056bf 	.word	0x080056bf
 8005684:	080056af 	.word	0x080056af
 8005688:	080056bf 	.word	0x080056bf
 800568c:	080056bf 	.word	0x080056bf
 8005690:	080056bf 	.word	0x080056bf
 8005694:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7ff fb36 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 800569c:	61b8      	str	r0, [r7, #24]
        break;
 800569e:	e013      	b.n	80056c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7ff fb54 	bl	8004d4c <HAL_RCC_GetPCLK2Freq>
 80056a4:	61b8      	str	r0, [r7, #24]
        break;
 80056a6:	e00f      	b.n	80056c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b20      	ldr	r3, [pc, #128]	@ (800572c <UART_SetConfig+0x268>)
 80056aa:	61bb      	str	r3, [r7, #24]
        break;
 80056ac:	e00c      	b.n	80056c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7ff facb 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 80056b2:	61b8      	str	r0, [r7, #24]
        break;
 80056b4:	e008      	b.n	80056c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ba:	61bb      	str	r3, [r7, #24]
        break;
 80056bc:	e004      	b.n	80056c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	77bb      	strb	r3, [r7, #30]
        break;
 80056c6:	bf00      	nop
    }

    if (pclk != 0U)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d018      	beq.n	8005700 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	085a      	lsrs	r2, r3, #1
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	441a      	add	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d909      	bls.n	80056fc <UART_SetConfig+0x238>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ee:	d205      	bcs.n	80056fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	e001      	b.n	8005700 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800570c:	7fbb      	ldrb	r3, [r7, #30]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	efff69f3 	.word	0xefff69f3
 800571c:	40013800 	.word	0x40013800
 8005720:	40021000 	.word	0x40021000
 8005724:	40004400 	.word	0x40004400
 8005728:	40004800 	.word	0x40004800
 800572c:	007a1200 	.word	0x007a1200

08005730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800582e:	d10a      	bne.n	8005846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b098      	sub	sp, #96	@ 0x60
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005884:	f7fc fe8e 	bl	80025a4 <HAL_GetTick>
 8005888:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d12e      	bne.n	80058f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005898:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f88c 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d021      	beq.n	80058f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e062      	b.n	80059bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d149      	bne.n	8005998 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f856 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03c      	beq.n	8005998 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	623b      	str	r3, [r7, #32]
   return(result);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
 800593e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005970:	61fa      	str	r2, [r7, #28]
 8005972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	617b      	str	r3, [r7, #20]
   return(result);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e011      	b.n	80059bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3758      	adds	r7, #88	@ 0x58
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	e04f      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d04b      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc fde1 	bl	80025a4 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e04e      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d037      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b80      	cmp	r3, #128	@ 0x80
 8005a0a:	d034      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d031      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d110      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2208      	movs	r2, #8
 8005a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f838 	bl	8005a9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2208      	movs	r2, #8
 8005a32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e029      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a50:	d111      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f81e 	bl	8005a9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e00f      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d0a0      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b095      	sub	sp, #84	@ 0x54
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e6      	bne.n	8005aa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e5      	bne.n	8005ad8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d118      	bne.n	8005b46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0310 	bic.w	r3, r3, #16
 8005b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b5a:	bf00      	nop
 8005b5c:	3754      	adds	r7, #84	@ 0x54
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <__cvt>:
 8005b66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6a:	ec57 6b10 	vmov	r6, r7, d0
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	460c      	mov	r4, r1
 8005b72:	4619      	mov	r1, r3
 8005b74:	463b      	mov	r3, r7
 8005b76:	bfbb      	ittet	lt
 8005b78:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b7c:	461f      	movlt	r7, r3
 8005b7e:	2300      	movge	r3, #0
 8005b80:	232d      	movlt	r3, #45	@ 0x2d
 8005b82:	700b      	strb	r3, [r1, #0]
 8005b84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b86:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b8a:	4691      	mov	r9, r2
 8005b8c:	f023 0820 	bic.w	r8, r3, #32
 8005b90:	bfbc      	itt	lt
 8005b92:	4632      	movlt	r2, r6
 8005b94:	4616      	movlt	r6, r2
 8005b96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b9a:	d005      	beq.n	8005ba8 <__cvt+0x42>
 8005b9c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ba0:	d100      	bne.n	8005ba4 <__cvt+0x3e>
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	e000      	b.n	8005baa <__cvt+0x44>
 8005ba8:	2103      	movs	r1, #3
 8005baa:	ab03      	add	r3, sp, #12
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	ab02      	add	r3, sp, #8
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	ec47 6b10 	vmov	d0, r6, r7
 8005bb6:	4653      	mov	r3, sl
 8005bb8:	4622      	mov	r2, r4
 8005bba:	f000 ff3d 	bl	8006a38 <_dtoa_r>
 8005bbe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	d119      	bne.n	8005bfa <__cvt+0x94>
 8005bc6:	f019 0f01 	tst.w	r9, #1
 8005bca:	d00e      	beq.n	8005bea <__cvt+0x84>
 8005bcc:	eb00 0904 	add.w	r9, r0, r4
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f7fa ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bdc:	b108      	cbz	r0, 8005be2 <__cvt+0x7c>
 8005bde:	f8cd 900c 	str.w	r9, [sp, #12]
 8005be2:	2230      	movs	r2, #48	@ 0x30
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	454b      	cmp	r3, r9
 8005be8:	d31e      	bcc.n	8005c28 <__cvt+0xc2>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bee:	1b5b      	subs	r3, r3, r5
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	b004      	add	sp, #16
 8005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bfe:	eb00 0904 	add.w	r9, r0, r4
 8005c02:	d1e5      	bne.n	8005bd0 <__cvt+0x6a>
 8005c04:	7803      	ldrb	r3, [r0, #0]
 8005c06:	2b30      	cmp	r3, #48	@ 0x30
 8005c08:	d10a      	bne.n	8005c20 <__cvt+0xba>
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	f7fa ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c16:	b918      	cbnz	r0, 8005c20 <__cvt+0xba>
 8005c18:	f1c4 0401 	rsb	r4, r4, #1
 8005c1c:	f8ca 4000 	str.w	r4, [sl]
 8005c20:	f8da 3000 	ldr.w	r3, [sl]
 8005c24:	4499      	add	r9, r3
 8005c26:	e7d3      	b.n	8005bd0 <__cvt+0x6a>
 8005c28:	1c59      	adds	r1, r3, #1
 8005c2a:	9103      	str	r1, [sp, #12]
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e7d9      	b.n	8005be4 <__cvt+0x7e>

08005c30 <__exponent>:
 8005c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c32:	2900      	cmp	r1, #0
 8005c34:	bfba      	itte	lt
 8005c36:	4249      	neglt	r1, r1
 8005c38:	232d      	movlt	r3, #45	@ 0x2d
 8005c3a:	232b      	movge	r3, #43	@ 0x2b
 8005c3c:	2909      	cmp	r1, #9
 8005c3e:	7002      	strb	r2, [r0, #0]
 8005c40:	7043      	strb	r3, [r0, #1]
 8005c42:	dd29      	ble.n	8005c98 <__exponent+0x68>
 8005c44:	f10d 0307 	add.w	r3, sp, #7
 8005c48:	461d      	mov	r5, r3
 8005c4a:	270a      	movs	r7, #10
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c52:	fb07 1416 	mls	r4, r7, r6, r1
 8005c56:	3430      	adds	r4, #48	@ 0x30
 8005c58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	2c63      	cmp	r4, #99	@ 0x63
 8005c60:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c64:	4631      	mov	r1, r6
 8005c66:	dcf1      	bgt.n	8005c4c <__exponent+0x1c>
 8005c68:	3130      	adds	r1, #48	@ 0x30
 8005c6a:	1e94      	subs	r4, r2, #2
 8005c6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c70:	1c41      	adds	r1, r0, #1
 8005c72:	4623      	mov	r3, r4
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	d30a      	bcc.n	8005c8e <__exponent+0x5e>
 8005c78:	f10d 0309 	add.w	r3, sp, #9
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	42ac      	cmp	r4, r5
 8005c80:	bf88      	it	hi
 8005c82:	2300      	movhi	r3, #0
 8005c84:	3302      	adds	r3, #2
 8005c86:	4403      	add	r3, r0
 8005c88:	1a18      	subs	r0, r3, r0
 8005c8a:	b003      	add	sp, #12
 8005c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c96:	e7ed      	b.n	8005c74 <__exponent+0x44>
 8005c98:	2330      	movs	r3, #48	@ 0x30
 8005c9a:	3130      	adds	r1, #48	@ 0x30
 8005c9c:	7083      	strb	r3, [r0, #2]
 8005c9e:	70c1      	strb	r1, [r0, #3]
 8005ca0:	1d03      	adds	r3, r0, #4
 8005ca2:	e7f1      	b.n	8005c88 <__exponent+0x58>

08005ca4 <_printf_float>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	b08d      	sub	sp, #52	@ 0x34
 8005caa:	460c      	mov	r4, r1
 8005cac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005cb0:	4616      	mov	r6, r2
 8005cb2:	461f      	mov	r7, r3
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	f000 fdbd 	bl	8006834 <_localeconv_r>
 8005cba:	6803      	ldr	r3, [r0, #0]
 8005cbc:	9304      	str	r3, [sp, #16]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fad6 	bl	8000270 <strlen>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ccc:	9005      	str	r0, [sp, #20]
 8005cce:	3307      	adds	r3, #7
 8005cd0:	f023 0307 	bic.w	r3, r3, #7
 8005cd4:	f103 0208 	add.w	r2, r3, #8
 8005cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8005ce0:	f8c8 2000 	str.w	r2, [r8]
 8005ce4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ce8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cec:	9307      	str	r3, [sp, #28]
 8005cee:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005f6c <_printf_float+0x2c8>)
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	f7fa ff14 	bl	8000b2c <__aeabi_dcmpun>
 8005d04:	bb70      	cbnz	r0, 8005d64 <_printf_float+0xc0>
 8005d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0a:	4b98      	ldr	r3, [pc, #608]	@ (8005f6c <_printf_float+0x2c8>)
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	f7fa feee 	bl	8000af0 <__aeabi_dcmple>
 8005d14:	bb30      	cbnz	r0, 8005d64 <_printf_float+0xc0>
 8005d16:	2200      	movs	r2, #0
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fedd 	bl	8000adc <__aeabi_dcmplt>
 8005d22:	b110      	cbz	r0, 8005d2a <_printf_float+0x86>
 8005d24:	232d      	movs	r3, #45	@ 0x2d
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d2a:	4a91      	ldr	r2, [pc, #580]	@ (8005f70 <_printf_float+0x2cc>)
 8005d2c:	4b91      	ldr	r3, [pc, #580]	@ (8005f74 <_printf_float+0x2d0>)
 8005d2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d32:	bf8c      	ite	hi
 8005d34:	4690      	movhi	r8, r2
 8005d36:	4698      	movls	r8, r3
 8005d38:	2303      	movs	r3, #3
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	f02b 0304 	bic.w	r3, fp, #4
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	f04f 0900 	mov.w	r9, #0
 8005d46:	9700      	str	r7, [sp, #0]
 8005d48:	4633      	mov	r3, r6
 8005d4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f9d2 	bl	80060f8 <_printf_common>
 8005d54:	3001      	adds	r0, #1
 8005d56:	f040 808d 	bne.w	8005e74 <_printf_float+0x1d0>
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5e:	b00d      	add	sp, #52	@ 0x34
 8005d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	4640      	mov	r0, r8
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f7fa fede 	bl	8000b2c <__aeabi_dcmpun>
 8005d70:	b140      	cbz	r0, 8005d84 <_printf_float+0xe0>
 8005d72:	464b      	mov	r3, r9
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfbc      	itt	lt
 8005d78:	232d      	movlt	r3, #45	@ 0x2d
 8005d7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f78 <_printf_float+0x2d4>)
 8005d80:	4b7e      	ldr	r3, [pc, #504]	@ (8005f7c <_printf_float+0x2d8>)
 8005d82:	e7d4      	b.n	8005d2e <_printf_float+0x8a>
 8005d84:	6863      	ldr	r3, [r4, #4]
 8005d86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d8a:	9206      	str	r2, [sp, #24]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	d13b      	bne.n	8005e08 <_printf_float+0x164>
 8005d90:	2306      	movs	r3, #6
 8005d92:	6063      	str	r3, [r4, #4]
 8005d94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6022      	str	r2, [r4, #0]
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005da0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005da4:	ab09      	add	r3, sp, #36	@ 0x24
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	6861      	ldr	r1, [r4, #4]
 8005daa:	ec49 8b10 	vmov	d0, r8, r9
 8005dae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005db2:	4628      	mov	r0, r5
 8005db4:	f7ff fed7 	bl	8005b66 <__cvt>
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dbc:	2b47      	cmp	r3, #71	@ 0x47
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	d129      	bne.n	8005e16 <_printf_float+0x172>
 8005dc2:	1cc8      	adds	r0, r1, #3
 8005dc4:	db02      	blt.n	8005dcc <_printf_float+0x128>
 8005dc6:	6863      	ldr	r3, [r4, #4]
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	dd41      	ble.n	8005e50 <_printf_float+0x1ac>
 8005dcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005dd4:	3901      	subs	r1, #1
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ddc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dde:	f7ff ff27 	bl	8005c30 <__exponent>
 8005de2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005de4:	1813      	adds	r3, r2, r0
 8005de6:	2a01      	cmp	r2, #1
 8005de8:	4681      	mov	r9, r0
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	dc02      	bgt.n	8005df4 <_printf_float+0x150>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	07d2      	lsls	r2, r2, #31
 8005df2:	d501      	bpl.n	8005df8 <_printf_float+0x154>
 8005df4:	3301      	adds	r3, #1
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0a2      	beq.n	8005d46 <_printf_float+0xa2>
 8005e00:	232d      	movs	r3, #45	@ 0x2d
 8005e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e06:	e79e      	b.n	8005d46 <_printf_float+0xa2>
 8005e08:	9a06      	ldr	r2, [sp, #24]
 8005e0a:	2a47      	cmp	r2, #71	@ 0x47
 8005e0c:	d1c2      	bne.n	8005d94 <_printf_float+0xf0>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1c0      	bne.n	8005d94 <_printf_float+0xf0>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e7bd      	b.n	8005d92 <_printf_float+0xee>
 8005e16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e1a:	d9db      	bls.n	8005dd4 <_printf_float+0x130>
 8005e1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e20:	d118      	bne.n	8005e54 <_printf_float+0x1b0>
 8005e22:	2900      	cmp	r1, #0
 8005e24:	6863      	ldr	r3, [r4, #4]
 8005e26:	dd0b      	ble.n	8005e40 <_printf_float+0x19c>
 8005e28:	6121      	str	r1, [r4, #16]
 8005e2a:	b913      	cbnz	r3, 8005e32 <_printf_float+0x18e>
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	07d0      	lsls	r0, r2, #31
 8005e30:	d502      	bpl.n	8005e38 <_printf_float+0x194>
 8005e32:	3301      	adds	r3, #1
 8005e34:	440b      	add	r3, r1
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e3a:	f04f 0900 	mov.w	r9, #0
 8005e3e:	e7db      	b.n	8005df8 <_printf_float+0x154>
 8005e40:	b913      	cbnz	r3, 8005e48 <_printf_float+0x1a4>
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	07d2      	lsls	r2, r2, #31
 8005e46:	d501      	bpl.n	8005e4c <_printf_float+0x1a8>
 8005e48:	3302      	adds	r3, #2
 8005e4a:	e7f4      	b.n	8005e36 <_printf_float+0x192>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e7f2      	b.n	8005e36 <_printf_float+0x192>
 8005e50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e56:	4299      	cmp	r1, r3
 8005e58:	db05      	blt.n	8005e66 <_printf_float+0x1c2>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	6121      	str	r1, [r4, #16]
 8005e5e:	07d8      	lsls	r0, r3, #31
 8005e60:	d5ea      	bpl.n	8005e38 <_printf_float+0x194>
 8005e62:	1c4b      	adds	r3, r1, #1
 8005e64:	e7e7      	b.n	8005e36 <_printf_float+0x192>
 8005e66:	2900      	cmp	r1, #0
 8005e68:	bfd4      	ite	le
 8005e6a:	f1c1 0202 	rsble	r2, r1, #2
 8005e6e:	2201      	movgt	r2, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	e7e0      	b.n	8005e36 <_printf_float+0x192>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	055a      	lsls	r2, r3, #21
 8005e78:	d407      	bmi.n	8005e8a <_printf_float+0x1e6>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	d12b      	bne.n	8005ee0 <_printf_float+0x23c>
 8005e88:	e767      	b.n	8005d5a <_printf_float+0xb6>
 8005e8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e8e:	f240 80dd 	bls.w	800604c <_printf_float+0x3a8>
 8005e92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e96:	2200      	movs	r2, #0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f7fa fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d033      	beq.n	8005f0a <_printf_float+0x266>
 8005ea2:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <_printf_float+0x2dc>)
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	f43f af54 	beq.w	8005d5a <_printf_float+0xb6>
 8005eb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005eb6:	4543      	cmp	r3, r8
 8005eb8:	db02      	blt.n	8005ec0 <_printf_float+0x21c>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	07d8      	lsls	r0, r3, #31
 8005ebe:	d50f      	bpl.n	8005ee0 <_printf_float+0x23c>
 8005ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af45 	beq.w	8005d5a <_printf_float+0xb6>
 8005ed0:	f04f 0900 	mov.w	r9, #0
 8005ed4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ed8:	f104 0a1a 	add.w	sl, r4, #26
 8005edc:	45c8      	cmp	r8, r9
 8005ede:	dc09      	bgt.n	8005ef4 <_printf_float+0x250>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	079b      	lsls	r3, r3, #30
 8005ee4:	f100 8103 	bmi.w	80060ee <_printf_float+0x44a>
 8005ee8:	68e0      	ldr	r0, [r4, #12]
 8005eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eec:	4298      	cmp	r0, r3
 8005eee:	bfb8      	it	lt
 8005ef0:	4618      	movlt	r0, r3
 8005ef2:	e734      	b.n	8005d5e <_printf_float+0xba>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	f43f af2b 	beq.w	8005d5a <_printf_float+0xb6>
 8005f04:	f109 0901 	add.w	r9, r9, #1
 8005f08:	e7e8      	b.n	8005edc <_printf_float+0x238>
 8005f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dc39      	bgt.n	8005f84 <_printf_float+0x2e0>
 8005f10:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <_printf_float+0x2dc>)
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af1d 	beq.w	8005d5a <_printf_float+0xb6>
 8005f20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f24:	ea59 0303 	orrs.w	r3, r9, r3
 8005f28:	d102      	bne.n	8005f30 <_printf_float+0x28c>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	07d9      	lsls	r1, r3, #31
 8005f2e:	d5d7      	bpl.n	8005ee0 <_printf_float+0x23c>
 8005f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f43f af0d 	beq.w	8005d5a <_printf_float+0xb6>
 8005f40:	f04f 0a00 	mov.w	sl, #0
 8005f44:	f104 0b1a 	add.w	fp, r4, #26
 8005f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4a:	425b      	negs	r3, r3
 8005f4c:	4553      	cmp	r3, sl
 8005f4e:	dc01      	bgt.n	8005f54 <_printf_float+0x2b0>
 8005f50:	464b      	mov	r3, r9
 8005f52:	e793      	b.n	8005e7c <_printf_float+0x1d8>
 8005f54:	2301      	movs	r3, #1
 8005f56:	465a      	mov	r2, fp
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f aefb 	beq.w	8005d5a <_printf_float+0xb6>
 8005f64:	f10a 0a01 	add.w	sl, sl, #1
 8005f68:	e7ee      	b.n	8005f48 <_printf_float+0x2a4>
 8005f6a:	bf00      	nop
 8005f6c:	7fefffff 	.word	0x7fefffff
 8005f70:	08008678 	.word	0x08008678
 8005f74:	08008674 	.word	0x08008674
 8005f78:	08008680 	.word	0x08008680
 8005f7c:	0800867c 	.word	0x0800867c
 8005f80:	08008684 	.word	0x08008684
 8005f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f8a:	4553      	cmp	r3, sl
 8005f8c:	bfa8      	it	ge
 8005f8e:	4653      	movge	r3, sl
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	4699      	mov	r9, r3
 8005f94:	dc36      	bgt.n	8006004 <_printf_float+0x360>
 8005f96:	f04f 0b00 	mov.w	fp, #0
 8005f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f9e:	f104 021a 	add.w	r2, r4, #26
 8005fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fa4:	9306      	str	r3, [sp, #24]
 8005fa6:	eba3 0309 	sub.w	r3, r3, r9
 8005faa:	455b      	cmp	r3, fp
 8005fac:	dc31      	bgt.n	8006012 <_printf_float+0x36e>
 8005fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb0:	459a      	cmp	sl, r3
 8005fb2:	dc3a      	bgt.n	800602a <_printf_float+0x386>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	07da      	lsls	r2, r3, #31
 8005fb8:	d437      	bmi.n	800602a <_printf_float+0x386>
 8005fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fbc:	ebaa 0903 	sub.w	r9, sl, r3
 8005fc0:	9b06      	ldr	r3, [sp, #24]
 8005fc2:	ebaa 0303 	sub.w	r3, sl, r3
 8005fc6:	4599      	cmp	r9, r3
 8005fc8:	bfa8      	it	ge
 8005fca:	4699      	movge	r9, r3
 8005fcc:	f1b9 0f00 	cmp.w	r9, #0
 8005fd0:	dc33      	bgt.n	800603a <_printf_float+0x396>
 8005fd2:	f04f 0800 	mov.w	r8, #0
 8005fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fda:	f104 0b1a 	add.w	fp, r4, #26
 8005fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8005fe4:	eba3 0309 	sub.w	r3, r3, r9
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	f77f af79 	ble.w	8005ee0 <_printf_float+0x23c>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	465a      	mov	r2, fp
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	f43f aeae 	beq.w	8005d5a <_printf_float+0xb6>
 8005ffe:	f108 0801 	add.w	r8, r8, #1
 8006002:	e7ec      	b.n	8005fde <_printf_float+0x33a>
 8006004:	4642      	mov	r2, r8
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	d1c2      	bne.n	8005f96 <_printf_float+0x2f2>
 8006010:	e6a3      	b.n	8005d5a <_printf_float+0xb6>
 8006012:	2301      	movs	r3, #1
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	9206      	str	r2, [sp, #24]
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	f43f ae9c 	beq.w	8005d5a <_printf_float+0xb6>
 8006022:	9a06      	ldr	r2, [sp, #24]
 8006024:	f10b 0b01 	add.w	fp, fp, #1
 8006028:	e7bb      	b.n	8005fa2 <_printf_float+0x2fe>
 800602a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	d1c0      	bne.n	8005fba <_printf_float+0x316>
 8006038:	e68f      	b.n	8005d5a <_printf_float+0xb6>
 800603a:	9a06      	ldr	r2, [sp, #24]
 800603c:	464b      	mov	r3, r9
 800603e:	4442      	add	r2, r8
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	d1c3      	bne.n	8005fd2 <_printf_float+0x32e>
 800604a:	e686      	b.n	8005d5a <_printf_float+0xb6>
 800604c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006050:	f1ba 0f01 	cmp.w	sl, #1
 8006054:	dc01      	bgt.n	800605a <_printf_float+0x3b6>
 8006056:	07db      	lsls	r3, r3, #31
 8006058:	d536      	bpl.n	80060c8 <_printf_float+0x424>
 800605a:	2301      	movs	r3, #1
 800605c:	4642      	mov	r2, r8
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f ae78 	beq.w	8005d5a <_printf_float+0xb6>
 800606a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	f43f ae70 	beq.w	8005d5a <_printf_float+0xb6>
 800607a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800607e:	2200      	movs	r2, #0
 8006080:	2300      	movs	r3, #0
 8006082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006086:	f7fa fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800608a:	b9c0      	cbnz	r0, 80060be <_printf_float+0x41a>
 800608c:	4653      	mov	r3, sl
 800608e:	f108 0201 	add.w	r2, r8, #1
 8006092:	4631      	mov	r1, r6
 8006094:	4628      	mov	r0, r5
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	d10c      	bne.n	80060b6 <_printf_float+0x412>
 800609c:	e65d      	b.n	8005d5a <_printf_float+0xb6>
 800609e:	2301      	movs	r3, #1
 80060a0:	465a      	mov	r2, fp
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f ae56 	beq.w	8005d5a <_printf_float+0xb6>
 80060ae:	f108 0801 	add.w	r8, r8, #1
 80060b2:	45d0      	cmp	r8, sl
 80060b4:	dbf3      	blt.n	800609e <_printf_float+0x3fa>
 80060b6:	464b      	mov	r3, r9
 80060b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060bc:	e6df      	b.n	8005e7e <_printf_float+0x1da>
 80060be:	f04f 0800 	mov.w	r8, #0
 80060c2:	f104 0b1a 	add.w	fp, r4, #26
 80060c6:	e7f4      	b.n	80060b2 <_printf_float+0x40e>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4642      	mov	r2, r8
 80060cc:	e7e1      	b.n	8006092 <_printf_float+0x3ee>
 80060ce:	2301      	movs	r3, #1
 80060d0:	464a      	mov	r2, r9
 80060d2:	4631      	mov	r1, r6
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	f43f ae3e 	beq.w	8005d5a <_printf_float+0xb6>
 80060de:	f108 0801 	add.w	r8, r8, #1
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	4543      	cmp	r3, r8
 80060ea:	dcf0      	bgt.n	80060ce <_printf_float+0x42a>
 80060ec:	e6fc      	b.n	8005ee8 <_printf_float+0x244>
 80060ee:	f04f 0800 	mov.w	r8, #0
 80060f2:	f104 0919 	add.w	r9, r4, #25
 80060f6:	e7f4      	b.n	80060e2 <_printf_float+0x43e>

080060f8 <_printf_common>:
 80060f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	4616      	mov	r6, r2
 80060fe:	4698      	mov	r8, r3
 8006100:	688a      	ldr	r2, [r1, #8]
 8006102:	690b      	ldr	r3, [r1, #16]
 8006104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006108:	4293      	cmp	r3, r2
 800610a:	bfb8      	it	lt
 800610c:	4613      	movlt	r3, r2
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006114:	4607      	mov	r7, r0
 8006116:	460c      	mov	r4, r1
 8006118:	b10a      	cbz	r2, 800611e <_printf_common+0x26>
 800611a:	3301      	adds	r3, #1
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	0699      	lsls	r1, r3, #26
 8006122:	bf42      	ittt	mi
 8006124:	6833      	ldrmi	r3, [r6, #0]
 8006126:	3302      	addmi	r3, #2
 8006128:	6033      	strmi	r3, [r6, #0]
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	f015 0506 	ands.w	r5, r5, #6
 8006130:	d106      	bne.n	8006140 <_printf_common+0x48>
 8006132:	f104 0a19 	add.w	sl, r4, #25
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	6832      	ldr	r2, [r6, #0]
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	42ab      	cmp	r3, r5
 800613e:	dc26      	bgt.n	800618e <_printf_common+0x96>
 8006140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	3b00      	subs	r3, #0
 8006148:	bf18      	it	ne
 800614a:	2301      	movne	r3, #1
 800614c:	0692      	lsls	r2, r2, #26
 800614e:	d42b      	bmi.n	80061a8 <_printf_common+0xb0>
 8006150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006154:	4641      	mov	r1, r8
 8006156:	4638      	mov	r0, r7
 8006158:	47c8      	blx	r9
 800615a:	3001      	adds	r0, #1
 800615c:	d01e      	beq.n	800619c <_printf_common+0xa4>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	6922      	ldr	r2, [r4, #16]
 8006162:	f003 0306 	and.w	r3, r3, #6
 8006166:	2b04      	cmp	r3, #4
 8006168:	bf02      	ittt	eq
 800616a:	68e5      	ldreq	r5, [r4, #12]
 800616c:	6833      	ldreq	r3, [r6, #0]
 800616e:	1aed      	subeq	r5, r5, r3
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	bf0c      	ite	eq
 8006174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006178:	2500      	movne	r5, #0
 800617a:	4293      	cmp	r3, r2
 800617c:	bfc4      	itt	gt
 800617e:	1a9b      	subgt	r3, r3, r2
 8006180:	18ed      	addgt	r5, r5, r3
 8006182:	2600      	movs	r6, #0
 8006184:	341a      	adds	r4, #26
 8006186:	42b5      	cmp	r5, r6
 8006188:	d11a      	bne.n	80061c0 <_printf_common+0xc8>
 800618a:	2000      	movs	r0, #0
 800618c:	e008      	b.n	80061a0 <_printf_common+0xa8>
 800618e:	2301      	movs	r3, #1
 8006190:	4652      	mov	r2, sl
 8006192:	4641      	mov	r1, r8
 8006194:	4638      	mov	r0, r7
 8006196:	47c8      	blx	r9
 8006198:	3001      	adds	r0, #1
 800619a:	d103      	bne.n	80061a4 <_printf_common+0xac>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a4:	3501      	adds	r5, #1
 80061a6:	e7c6      	b.n	8006136 <_printf_common+0x3e>
 80061a8:	18e1      	adds	r1, r4, r3
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	2030      	movs	r0, #48	@ 0x30
 80061ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061b2:	4422      	add	r2, r4
 80061b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061bc:	3302      	adds	r3, #2
 80061be:	e7c7      	b.n	8006150 <_printf_common+0x58>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4622      	mov	r2, r4
 80061c4:	4641      	mov	r1, r8
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c8      	blx	r9
 80061ca:	3001      	adds	r0, #1
 80061cc:	d0e6      	beq.n	800619c <_printf_common+0xa4>
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7d9      	b.n	8006186 <_printf_common+0x8e>
	...

080061d4 <_printf_i>:
 80061d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	7e0f      	ldrb	r7, [r1, #24]
 80061da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061dc:	2f78      	cmp	r7, #120	@ 0x78
 80061de:	4691      	mov	r9, r2
 80061e0:	4680      	mov	r8, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	469a      	mov	sl, r3
 80061e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061ea:	d807      	bhi.n	80061fc <_printf_i+0x28>
 80061ec:	2f62      	cmp	r7, #98	@ 0x62
 80061ee:	d80a      	bhi.n	8006206 <_printf_i+0x32>
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	f000 80d1 	beq.w	8006398 <_printf_i+0x1c4>
 80061f6:	2f58      	cmp	r7, #88	@ 0x58
 80061f8:	f000 80b8 	beq.w	800636c <_printf_i+0x198>
 80061fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006204:	e03a      	b.n	800627c <_printf_i+0xa8>
 8006206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800620a:	2b15      	cmp	r3, #21
 800620c:	d8f6      	bhi.n	80061fc <_printf_i+0x28>
 800620e:	a101      	add	r1, pc, #4	@ (adr r1, 8006214 <_printf_i+0x40>)
 8006210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006214:	0800626d 	.word	0x0800626d
 8006218:	08006281 	.word	0x08006281
 800621c:	080061fd 	.word	0x080061fd
 8006220:	080061fd 	.word	0x080061fd
 8006224:	080061fd 	.word	0x080061fd
 8006228:	080061fd 	.word	0x080061fd
 800622c:	08006281 	.word	0x08006281
 8006230:	080061fd 	.word	0x080061fd
 8006234:	080061fd 	.word	0x080061fd
 8006238:	080061fd 	.word	0x080061fd
 800623c:	080061fd 	.word	0x080061fd
 8006240:	0800637f 	.word	0x0800637f
 8006244:	080062ab 	.word	0x080062ab
 8006248:	08006339 	.word	0x08006339
 800624c:	080061fd 	.word	0x080061fd
 8006250:	080061fd 	.word	0x080061fd
 8006254:	080063a1 	.word	0x080063a1
 8006258:	080061fd 	.word	0x080061fd
 800625c:	080062ab 	.word	0x080062ab
 8006260:	080061fd 	.word	0x080061fd
 8006264:	080061fd 	.word	0x080061fd
 8006268:	08006341 	.word	0x08006341
 800626c:	6833      	ldr	r3, [r6, #0]
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6032      	str	r2, [r6, #0]
 8006274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800627c:	2301      	movs	r3, #1
 800627e:	e09c      	b.n	80063ba <_printf_i+0x1e6>
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	1d19      	adds	r1, r3, #4
 8006286:	6031      	str	r1, [r6, #0]
 8006288:	0606      	lsls	r6, r0, #24
 800628a:	d501      	bpl.n	8006290 <_printf_i+0xbc>
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	e003      	b.n	8006298 <_printf_i+0xc4>
 8006290:	0645      	lsls	r5, r0, #25
 8006292:	d5fb      	bpl.n	800628c <_printf_i+0xb8>
 8006294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006298:	2d00      	cmp	r5, #0
 800629a:	da03      	bge.n	80062a4 <_printf_i+0xd0>
 800629c:	232d      	movs	r3, #45	@ 0x2d
 800629e:	426d      	negs	r5, r5
 80062a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a4:	4858      	ldr	r0, [pc, #352]	@ (8006408 <_printf_i+0x234>)
 80062a6:	230a      	movs	r3, #10
 80062a8:	e011      	b.n	80062ce <_printf_i+0xfa>
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	0608      	lsls	r0, r1, #24
 80062b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062b4:	d402      	bmi.n	80062bc <_printf_i+0xe8>
 80062b6:	0649      	lsls	r1, r1, #25
 80062b8:	bf48      	it	mi
 80062ba:	b2ad      	uxthmi	r5, r5
 80062bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80062be:	4852      	ldr	r0, [pc, #328]	@ (8006408 <_printf_i+0x234>)
 80062c0:	6033      	str	r3, [r6, #0]
 80062c2:	bf14      	ite	ne
 80062c4:	230a      	movne	r3, #10
 80062c6:	2308      	moveq	r3, #8
 80062c8:	2100      	movs	r1, #0
 80062ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ce:	6866      	ldr	r6, [r4, #4]
 80062d0:	60a6      	str	r6, [r4, #8]
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	db05      	blt.n	80062e2 <_printf_i+0x10e>
 80062d6:	6821      	ldr	r1, [r4, #0]
 80062d8:	432e      	orrs	r6, r5
 80062da:	f021 0104 	bic.w	r1, r1, #4
 80062de:	6021      	str	r1, [r4, #0]
 80062e0:	d04b      	beq.n	800637a <_printf_i+0x1a6>
 80062e2:	4616      	mov	r6, r2
 80062e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80062e8:	fb03 5711 	mls	r7, r3, r1, r5
 80062ec:	5dc7      	ldrb	r7, [r0, r7]
 80062ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062f2:	462f      	mov	r7, r5
 80062f4:	42bb      	cmp	r3, r7
 80062f6:	460d      	mov	r5, r1
 80062f8:	d9f4      	bls.n	80062e4 <_printf_i+0x110>
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d10b      	bne.n	8006316 <_printf_i+0x142>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	07df      	lsls	r7, r3, #31
 8006302:	d508      	bpl.n	8006316 <_printf_i+0x142>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	6861      	ldr	r1, [r4, #4]
 8006308:	4299      	cmp	r1, r3
 800630a:	bfde      	ittt	le
 800630c:	2330      	movle	r3, #48	@ 0x30
 800630e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006312:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006316:	1b92      	subs	r2, r2, r6
 8006318:	6122      	str	r2, [r4, #16]
 800631a:	f8cd a000 	str.w	sl, [sp]
 800631e:	464b      	mov	r3, r9
 8006320:	aa03      	add	r2, sp, #12
 8006322:	4621      	mov	r1, r4
 8006324:	4640      	mov	r0, r8
 8006326:	f7ff fee7 	bl	80060f8 <_printf_common>
 800632a:	3001      	adds	r0, #1
 800632c:	d14a      	bne.n	80063c4 <_printf_i+0x1f0>
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	b004      	add	sp, #16
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	f043 0320 	orr.w	r3, r3, #32
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	4832      	ldr	r0, [pc, #200]	@ (800640c <_printf_i+0x238>)
 8006342:	2778      	movs	r7, #120	@ 0x78
 8006344:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6831      	ldr	r1, [r6, #0]
 800634c:	061f      	lsls	r7, r3, #24
 800634e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006352:	d402      	bmi.n	800635a <_printf_i+0x186>
 8006354:	065f      	lsls	r7, r3, #25
 8006356:	bf48      	it	mi
 8006358:	b2ad      	uxthmi	r5, r5
 800635a:	6031      	str	r1, [r6, #0]
 800635c:	07d9      	lsls	r1, r3, #31
 800635e:	bf44      	itt	mi
 8006360:	f043 0320 	orrmi.w	r3, r3, #32
 8006364:	6023      	strmi	r3, [r4, #0]
 8006366:	b11d      	cbz	r5, 8006370 <_printf_i+0x19c>
 8006368:	2310      	movs	r3, #16
 800636a:	e7ad      	b.n	80062c8 <_printf_i+0xf4>
 800636c:	4826      	ldr	r0, [pc, #152]	@ (8006408 <_printf_i+0x234>)
 800636e:	e7e9      	b.n	8006344 <_printf_i+0x170>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f023 0320 	bic.w	r3, r3, #32
 8006376:	6023      	str	r3, [r4, #0]
 8006378:	e7f6      	b.n	8006368 <_printf_i+0x194>
 800637a:	4616      	mov	r6, r2
 800637c:	e7bd      	b.n	80062fa <_printf_i+0x126>
 800637e:	6833      	ldr	r3, [r6, #0]
 8006380:	6825      	ldr	r5, [r4, #0]
 8006382:	6961      	ldr	r1, [r4, #20]
 8006384:	1d18      	adds	r0, r3, #4
 8006386:	6030      	str	r0, [r6, #0]
 8006388:	062e      	lsls	r6, r5, #24
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	d501      	bpl.n	8006392 <_printf_i+0x1be>
 800638e:	6019      	str	r1, [r3, #0]
 8006390:	e002      	b.n	8006398 <_printf_i+0x1c4>
 8006392:	0668      	lsls	r0, r5, #25
 8006394:	d5fb      	bpl.n	800638e <_printf_i+0x1ba>
 8006396:	8019      	strh	r1, [r3, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	4616      	mov	r6, r2
 800639e:	e7bc      	b.n	800631a <_printf_i+0x146>
 80063a0:	6833      	ldr	r3, [r6, #0]
 80063a2:	1d1a      	adds	r2, r3, #4
 80063a4:	6032      	str	r2, [r6, #0]
 80063a6:	681e      	ldr	r6, [r3, #0]
 80063a8:	6862      	ldr	r2, [r4, #4]
 80063aa:	2100      	movs	r1, #0
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7f9 ff0f 	bl	80001d0 <memchr>
 80063b2:	b108      	cbz	r0, 80063b8 <_printf_i+0x1e4>
 80063b4:	1b80      	subs	r0, r0, r6
 80063b6:	6060      	str	r0, [r4, #4]
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	2300      	movs	r3, #0
 80063be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c2:	e7aa      	b.n	800631a <_printf_i+0x146>
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	4632      	mov	r2, r6
 80063c8:	4649      	mov	r1, r9
 80063ca:	4640      	mov	r0, r8
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d0ad      	beq.n	800632e <_printf_i+0x15a>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	079b      	lsls	r3, r3, #30
 80063d6:	d413      	bmi.n	8006400 <_printf_i+0x22c>
 80063d8:	68e0      	ldr	r0, [r4, #12]
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	4298      	cmp	r0, r3
 80063de:	bfb8      	it	lt
 80063e0:	4618      	movlt	r0, r3
 80063e2:	e7a6      	b.n	8006332 <_printf_i+0x15e>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4632      	mov	r2, r6
 80063e8:	4649      	mov	r1, r9
 80063ea:	4640      	mov	r0, r8
 80063ec:	47d0      	blx	sl
 80063ee:	3001      	adds	r0, #1
 80063f0:	d09d      	beq.n	800632e <_printf_i+0x15a>
 80063f2:	3501      	adds	r5, #1
 80063f4:	68e3      	ldr	r3, [r4, #12]
 80063f6:	9903      	ldr	r1, [sp, #12]
 80063f8:	1a5b      	subs	r3, r3, r1
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	dcf2      	bgt.n	80063e4 <_printf_i+0x210>
 80063fe:	e7eb      	b.n	80063d8 <_printf_i+0x204>
 8006400:	2500      	movs	r5, #0
 8006402:	f104 0619 	add.w	r6, r4, #25
 8006406:	e7f5      	b.n	80063f4 <_printf_i+0x220>
 8006408:	08008686 	.word	0x08008686
 800640c:	08008697 	.word	0x08008697

08006410 <std>:
 8006410:	2300      	movs	r3, #0
 8006412:	b510      	push	{r4, lr}
 8006414:	4604      	mov	r4, r0
 8006416:	e9c0 3300 	strd	r3, r3, [r0]
 800641a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800641e:	6083      	str	r3, [r0, #8]
 8006420:	8181      	strh	r1, [r0, #12]
 8006422:	6643      	str	r3, [r0, #100]	@ 0x64
 8006424:	81c2      	strh	r2, [r0, #14]
 8006426:	6183      	str	r3, [r0, #24]
 8006428:	4619      	mov	r1, r3
 800642a:	2208      	movs	r2, #8
 800642c:	305c      	adds	r0, #92	@ 0x5c
 800642e:	f000 f9f9 	bl	8006824 <memset>
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <std+0x58>)
 8006434:	6263      	str	r3, [r4, #36]	@ 0x24
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <std+0x5c>)
 8006438:	62a3      	str	r3, [r4, #40]	@ 0x28
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <std+0x60>)
 800643c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800643e:	4b0d      	ldr	r3, [pc, #52]	@ (8006474 <std+0x64>)
 8006440:	6323      	str	r3, [r4, #48]	@ 0x30
 8006442:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <std+0x68>)
 8006444:	6224      	str	r4, [r4, #32]
 8006446:	429c      	cmp	r4, r3
 8006448:	d006      	beq.n	8006458 <std+0x48>
 800644a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800644e:	4294      	cmp	r4, r2
 8006450:	d002      	beq.n	8006458 <std+0x48>
 8006452:	33d0      	adds	r3, #208	@ 0xd0
 8006454:	429c      	cmp	r4, r3
 8006456:	d105      	bne.n	8006464 <std+0x54>
 8006458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006460:	f000 ba5c 	b.w	800691c <__retarget_lock_init_recursive>
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop
 8006468:	08006675 	.word	0x08006675
 800646c:	08006697 	.word	0x08006697
 8006470:	080066cf 	.word	0x080066cf
 8006474:	080066f3 	.word	0x080066f3
 8006478:	20000444 	.word	0x20000444

0800647c <stdio_exit_handler>:
 800647c:	4a02      	ldr	r2, [pc, #8]	@ (8006488 <stdio_exit_handler+0xc>)
 800647e:	4903      	ldr	r1, [pc, #12]	@ (800648c <stdio_exit_handler+0x10>)
 8006480:	4803      	ldr	r0, [pc, #12]	@ (8006490 <stdio_exit_handler+0x14>)
 8006482:	f000 b869 	b.w	8006558 <_fwalk_sglue>
 8006486:	bf00      	nop
 8006488:	2000001c 	.word	0x2000001c
 800648c:	08008259 	.word	0x08008259
 8006490:	2000002c 	.word	0x2000002c

08006494 <cleanup_stdio>:
 8006494:	6841      	ldr	r1, [r0, #4]
 8006496:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <cleanup_stdio+0x34>)
 8006498:	4299      	cmp	r1, r3
 800649a:	b510      	push	{r4, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	d001      	beq.n	80064a4 <cleanup_stdio+0x10>
 80064a0:	f001 feda 	bl	8008258 <_fflush_r>
 80064a4:	68a1      	ldr	r1, [r4, #8]
 80064a6:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <cleanup_stdio+0x38>)
 80064a8:	4299      	cmp	r1, r3
 80064aa:	d002      	beq.n	80064b2 <cleanup_stdio+0x1e>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f001 fed3 	bl	8008258 <_fflush_r>
 80064b2:	68e1      	ldr	r1, [r4, #12]
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <cleanup_stdio+0x3c>)
 80064b6:	4299      	cmp	r1, r3
 80064b8:	d004      	beq.n	80064c4 <cleanup_stdio+0x30>
 80064ba:	4620      	mov	r0, r4
 80064bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c0:	f001 beca 	b.w	8008258 <_fflush_r>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	bf00      	nop
 80064c8:	20000444 	.word	0x20000444
 80064cc:	200004ac 	.word	0x200004ac
 80064d0:	20000514 	.word	0x20000514

080064d4 <global_stdio_init.part.0>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <global_stdio_init.part.0+0x30>)
 80064d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006508 <global_stdio_init.part.0+0x34>)
 80064da:	4a0c      	ldr	r2, [pc, #48]	@ (800650c <global_stdio_init.part.0+0x38>)
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	4620      	mov	r0, r4
 80064e0:	2200      	movs	r2, #0
 80064e2:	2104      	movs	r1, #4
 80064e4:	f7ff ff94 	bl	8006410 <std>
 80064e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064ec:	2201      	movs	r2, #1
 80064ee:	2109      	movs	r1, #9
 80064f0:	f7ff ff8e 	bl	8006410 <std>
 80064f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064f8:	2202      	movs	r2, #2
 80064fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fe:	2112      	movs	r1, #18
 8006500:	f7ff bf86 	b.w	8006410 <std>
 8006504:	2000057c 	.word	0x2000057c
 8006508:	20000444 	.word	0x20000444
 800650c:	0800647d 	.word	0x0800647d

08006510 <__sfp_lock_acquire>:
 8006510:	4801      	ldr	r0, [pc, #4]	@ (8006518 <__sfp_lock_acquire+0x8>)
 8006512:	f000 ba04 	b.w	800691e <__retarget_lock_acquire_recursive>
 8006516:	bf00      	nop
 8006518:	20000585 	.word	0x20000585

0800651c <__sfp_lock_release>:
 800651c:	4801      	ldr	r0, [pc, #4]	@ (8006524 <__sfp_lock_release+0x8>)
 800651e:	f000 b9ff 	b.w	8006920 <__retarget_lock_release_recursive>
 8006522:	bf00      	nop
 8006524:	20000585 	.word	0x20000585

08006528 <__sinit>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	f7ff fff0 	bl	8006510 <__sfp_lock_acquire>
 8006530:	6a23      	ldr	r3, [r4, #32]
 8006532:	b11b      	cbz	r3, 800653c <__sinit+0x14>
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f7ff bff0 	b.w	800651c <__sfp_lock_release>
 800653c:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <__sinit+0x28>)
 800653e:	6223      	str	r3, [r4, #32]
 8006540:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <__sinit+0x2c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f5      	bne.n	8006534 <__sinit+0xc>
 8006548:	f7ff ffc4 	bl	80064d4 <global_stdio_init.part.0>
 800654c:	e7f2      	b.n	8006534 <__sinit+0xc>
 800654e:	bf00      	nop
 8006550:	08006495 	.word	0x08006495
 8006554:	2000057c 	.word	0x2000057c

08006558 <_fwalk_sglue>:
 8006558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800655c:	4607      	mov	r7, r0
 800655e:	4688      	mov	r8, r1
 8006560:	4614      	mov	r4, r2
 8006562:	2600      	movs	r6, #0
 8006564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006568:	f1b9 0901 	subs.w	r9, r9, #1
 800656c:	d505      	bpl.n	800657a <_fwalk_sglue+0x22>
 800656e:	6824      	ldr	r4, [r4, #0]
 8006570:	2c00      	cmp	r4, #0
 8006572:	d1f7      	bne.n	8006564 <_fwalk_sglue+0xc>
 8006574:	4630      	mov	r0, r6
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	89ab      	ldrh	r3, [r5, #12]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d907      	bls.n	8006590 <_fwalk_sglue+0x38>
 8006580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006584:	3301      	adds	r3, #1
 8006586:	d003      	beq.n	8006590 <_fwalk_sglue+0x38>
 8006588:	4629      	mov	r1, r5
 800658a:	4638      	mov	r0, r7
 800658c:	47c0      	blx	r8
 800658e:	4306      	orrs	r6, r0
 8006590:	3568      	adds	r5, #104	@ 0x68
 8006592:	e7e9      	b.n	8006568 <_fwalk_sglue+0x10>

08006594 <iprintf>:
 8006594:	b40f      	push	{r0, r1, r2, r3}
 8006596:	b507      	push	{r0, r1, r2, lr}
 8006598:	4906      	ldr	r1, [pc, #24]	@ (80065b4 <iprintf+0x20>)
 800659a:	ab04      	add	r3, sp, #16
 800659c:	6808      	ldr	r0, [r1, #0]
 800659e:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a2:	6881      	ldr	r1, [r0, #8]
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	f001 fcbb 	bl	8007f20 <_vfiprintf_r>
 80065aa:	b003      	add	sp, #12
 80065ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80065b0:	b004      	add	sp, #16
 80065b2:	4770      	bx	lr
 80065b4:	20000028 	.word	0x20000028

080065b8 <_puts_r>:
 80065b8:	6a03      	ldr	r3, [r0, #32]
 80065ba:	b570      	push	{r4, r5, r6, lr}
 80065bc:	6884      	ldr	r4, [r0, #8]
 80065be:	4605      	mov	r5, r0
 80065c0:	460e      	mov	r6, r1
 80065c2:	b90b      	cbnz	r3, 80065c8 <_puts_r+0x10>
 80065c4:	f7ff ffb0 	bl	8006528 <__sinit>
 80065c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ca:	07db      	lsls	r3, r3, #31
 80065cc:	d405      	bmi.n	80065da <_puts_r+0x22>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	0598      	lsls	r0, r3, #22
 80065d2:	d402      	bmi.n	80065da <_puts_r+0x22>
 80065d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d6:	f000 f9a2 	bl	800691e <__retarget_lock_acquire_recursive>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	0719      	lsls	r1, r3, #28
 80065de:	d502      	bpl.n	80065e6 <_puts_r+0x2e>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d135      	bne.n	8006652 <_puts_r+0x9a>
 80065e6:	4621      	mov	r1, r4
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 f8c5 	bl	8006778 <__swsetup_r>
 80065ee:	b380      	cbz	r0, 8006652 <_puts_r+0x9a>
 80065f0:	f04f 35ff 	mov.w	r5, #4294967295
 80065f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065f6:	07da      	lsls	r2, r3, #31
 80065f8:	d405      	bmi.n	8006606 <_puts_r+0x4e>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	059b      	lsls	r3, r3, #22
 80065fe:	d402      	bmi.n	8006606 <_puts_r+0x4e>
 8006600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006602:	f000 f98d 	bl	8006920 <__retarget_lock_release_recursive>
 8006606:	4628      	mov	r0, r5
 8006608:	bd70      	pop	{r4, r5, r6, pc}
 800660a:	2b00      	cmp	r3, #0
 800660c:	da04      	bge.n	8006618 <_puts_r+0x60>
 800660e:	69a2      	ldr	r2, [r4, #24]
 8006610:	429a      	cmp	r2, r3
 8006612:	dc17      	bgt.n	8006644 <_puts_r+0x8c>
 8006614:	290a      	cmp	r1, #10
 8006616:	d015      	beq.n	8006644 <_puts_r+0x8c>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	6022      	str	r2, [r4, #0]
 800661e:	7019      	strb	r1, [r3, #0]
 8006620:	68a3      	ldr	r3, [r4, #8]
 8006622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006626:	3b01      	subs	r3, #1
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	2900      	cmp	r1, #0
 800662c:	d1ed      	bne.n	800660a <_puts_r+0x52>
 800662e:	2b00      	cmp	r3, #0
 8006630:	da11      	bge.n	8006656 <_puts_r+0x9e>
 8006632:	4622      	mov	r2, r4
 8006634:	210a      	movs	r1, #10
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f85f 	bl	80066fa <__swbuf_r>
 800663c:	3001      	adds	r0, #1
 800663e:	d0d7      	beq.n	80065f0 <_puts_r+0x38>
 8006640:	250a      	movs	r5, #10
 8006642:	e7d7      	b.n	80065f4 <_puts_r+0x3c>
 8006644:	4622      	mov	r2, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f857 	bl	80066fa <__swbuf_r>
 800664c:	3001      	adds	r0, #1
 800664e:	d1e7      	bne.n	8006620 <_puts_r+0x68>
 8006650:	e7ce      	b.n	80065f0 <_puts_r+0x38>
 8006652:	3e01      	subs	r6, #1
 8006654:	e7e4      	b.n	8006620 <_puts_r+0x68>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	6022      	str	r2, [r4, #0]
 800665c:	220a      	movs	r2, #10
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e7ee      	b.n	8006640 <_puts_r+0x88>
	...

08006664 <puts>:
 8006664:	4b02      	ldr	r3, [pc, #8]	@ (8006670 <puts+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f7ff bfa5 	b.w	80065b8 <_puts_r>
 800666e:	bf00      	nop
 8006670:	20000028 	.word	0x20000028

08006674 <__sread>:
 8006674:	b510      	push	{r4, lr}
 8006676:	460c      	mov	r4, r1
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	f000 f900 	bl	8006880 <_read_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	bfab      	itete	ge
 8006684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006686:	89a3      	ldrhlt	r3, [r4, #12]
 8006688:	181b      	addge	r3, r3, r0
 800668a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800668e:	bfac      	ite	ge
 8006690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006692:	81a3      	strhlt	r3, [r4, #12]
 8006694:	bd10      	pop	{r4, pc}

08006696 <__swrite>:
 8006696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	461f      	mov	r7, r3
 800669c:	898b      	ldrh	r3, [r1, #12]
 800669e:	05db      	lsls	r3, r3, #23
 80066a0:	4605      	mov	r5, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	4616      	mov	r6, r2
 80066a6:	d505      	bpl.n	80066b4 <__swrite+0x1e>
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	2302      	movs	r3, #2
 80066ae:	2200      	movs	r2, #0
 80066b0:	f000 f8d4 	bl	800685c <_lseek_r>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	f000 b8eb 	b.w	80068a4 <_write_r>

080066ce <__sseek>:
 80066ce:	b510      	push	{r4, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d6:	f000 f8c1 	bl	800685c <_lseek_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	bf15      	itete	ne
 80066e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ea:	81a3      	strheq	r3, [r4, #12]
 80066ec:	bf18      	it	ne
 80066ee:	81a3      	strhne	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__sclose>:
 80066f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f6:	f000 b8a1 	b.w	800683c <_close_r>

080066fa <__swbuf_r>:
 80066fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fc:	460e      	mov	r6, r1
 80066fe:	4614      	mov	r4, r2
 8006700:	4605      	mov	r5, r0
 8006702:	b118      	cbz	r0, 800670c <__swbuf_r+0x12>
 8006704:	6a03      	ldr	r3, [r0, #32]
 8006706:	b90b      	cbnz	r3, 800670c <__swbuf_r+0x12>
 8006708:	f7ff ff0e 	bl	8006528 <__sinit>
 800670c:	69a3      	ldr	r3, [r4, #24]
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	071a      	lsls	r2, r3, #28
 8006714:	d501      	bpl.n	800671a <__swbuf_r+0x20>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	b943      	cbnz	r3, 800672c <__swbuf_r+0x32>
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f000 f82b 	bl	8006778 <__swsetup_r>
 8006722:	b118      	cbz	r0, 800672c <__swbuf_r+0x32>
 8006724:	f04f 37ff 	mov.w	r7, #4294967295
 8006728:	4638      	mov	r0, r7
 800672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	6922      	ldr	r2, [r4, #16]
 8006730:	1a98      	subs	r0, r3, r2
 8006732:	6963      	ldr	r3, [r4, #20]
 8006734:	b2f6      	uxtb	r6, r6
 8006736:	4283      	cmp	r3, r0
 8006738:	4637      	mov	r7, r6
 800673a:	dc05      	bgt.n	8006748 <__swbuf_r+0x4e>
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f001 fd8a 	bl	8008258 <_fflush_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	d1ed      	bne.n	8006724 <__swbuf_r+0x2a>
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	3b01      	subs	r3, #1
 800674c:	60a3      	str	r3, [r4, #8]
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	6022      	str	r2, [r4, #0]
 8006754:	701e      	strb	r6, [r3, #0]
 8006756:	6962      	ldr	r2, [r4, #20]
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	429a      	cmp	r2, r3
 800675c:	d004      	beq.n	8006768 <__swbuf_r+0x6e>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	07db      	lsls	r3, r3, #31
 8006762:	d5e1      	bpl.n	8006728 <__swbuf_r+0x2e>
 8006764:	2e0a      	cmp	r6, #10
 8006766:	d1df      	bne.n	8006728 <__swbuf_r+0x2e>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f001 fd74 	bl	8008258 <_fflush_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d0d9      	beq.n	8006728 <__swbuf_r+0x2e>
 8006774:	e7d6      	b.n	8006724 <__swbuf_r+0x2a>
	...

08006778 <__swsetup_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4b29      	ldr	r3, [pc, #164]	@ (8006820 <__swsetup_r+0xa8>)
 800677c:	4605      	mov	r5, r0
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	460c      	mov	r4, r1
 8006782:	b118      	cbz	r0, 800678c <__swsetup_r+0x14>
 8006784:	6a03      	ldr	r3, [r0, #32]
 8006786:	b90b      	cbnz	r3, 800678c <__swsetup_r+0x14>
 8006788:	f7ff fece 	bl	8006528 <__sinit>
 800678c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006790:	0719      	lsls	r1, r3, #28
 8006792:	d422      	bmi.n	80067da <__swsetup_r+0x62>
 8006794:	06da      	lsls	r2, r3, #27
 8006796:	d407      	bmi.n	80067a8 <__swsetup_r+0x30>
 8006798:	2209      	movs	r2, #9
 800679a:	602a      	str	r2, [r5, #0]
 800679c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	f04f 30ff 	mov.w	r0, #4294967295
 80067a6:	e033      	b.n	8006810 <__swsetup_r+0x98>
 80067a8:	0758      	lsls	r0, r3, #29
 80067aa:	d512      	bpl.n	80067d2 <__swsetup_r+0x5a>
 80067ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067ae:	b141      	cbz	r1, 80067c2 <__swsetup_r+0x4a>
 80067b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067b4:	4299      	cmp	r1, r3
 80067b6:	d002      	beq.n	80067be <__swsetup_r+0x46>
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 ff0d 	bl	80075d8 <_free_r>
 80067be:	2300      	movs	r3, #0
 80067c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067c8:	81a3      	strh	r3, [r4, #12]
 80067ca:	2300      	movs	r3, #0
 80067cc:	6063      	str	r3, [r4, #4]
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	b94b      	cbnz	r3, 80067f2 <__swsetup_r+0x7a>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e8:	d003      	beq.n	80067f2 <__swsetup_r+0x7a>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f001 fd81 	bl	80082f4 <__smakebuf_r>
 80067f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f6:	f013 0201 	ands.w	r2, r3, #1
 80067fa:	d00a      	beq.n	8006812 <__swsetup_r+0x9a>
 80067fc:	2200      	movs	r2, #0
 80067fe:	60a2      	str	r2, [r4, #8]
 8006800:	6962      	ldr	r2, [r4, #20]
 8006802:	4252      	negs	r2, r2
 8006804:	61a2      	str	r2, [r4, #24]
 8006806:	6922      	ldr	r2, [r4, #16]
 8006808:	b942      	cbnz	r2, 800681c <__swsetup_r+0xa4>
 800680a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800680e:	d1c5      	bne.n	800679c <__swsetup_r+0x24>
 8006810:	bd38      	pop	{r3, r4, r5, pc}
 8006812:	0799      	lsls	r1, r3, #30
 8006814:	bf58      	it	pl
 8006816:	6962      	ldrpl	r2, [r4, #20]
 8006818:	60a2      	str	r2, [r4, #8]
 800681a:	e7f4      	b.n	8006806 <__swsetup_r+0x8e>
 800681c:	2000      	movs	r0, #0
 800681e:	e7f7      	b.n	8006810 <__swsetup_r+0x98>
 8006820:	20000028 	.word	0x20000028

08006824 <memset>:
 8006824:	4402      	add	r2, r0
 8006826:	4603      	mov	r3, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	f803 1b01 	strb.w	r1, [r3], #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <_localeconv_r>:
 8006834:	4800      	ldr	r0, [pc, #0]	@ (8006838 <_localeconv_r+0x4>)
 8006836:	4770      	bx	lr
 8006838:	20000168 	.word	0x20000168

0800683c <_close_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d06      	ldr	r5, [pc, #24]	@ (8006858 <_close_r+0x1c>)
 8006840:	2300      	movs	r3, #0
 8006842:	4604      	mov	r4, r0
 8006844:	4608      	mov	r0, r1
 8006846:	602b      	str	r3, [r5, #0]
 8006848:	f7fb fc77 	bl	800213a <_close>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_close_r+0x1a>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	b103      	cbz	r3, 8006856 <_close_r+0x1a>
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20000580 	.word	0x20000580

0800685c <_lseek_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d07      	ldr	r5, [pc, #28]	@ (800687c <_lseek_r+0x20>)
 8006860:	4604      	mov	r4, r0
 8006862:	4608      	mov	r0, r1
 8006864:	4611      	mov	r1, r2
 8006866:	2200      	movs	r2, #0
 8006868:	602a      	str	r2, [r5, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	f7fb fc8c 	bl	8002188 <_lseek>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_lseek_r+0x1e>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b103      	cbz	r3, 800687a <_lseek_r+0x1e>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	20000580 	.word	0x20000580

08006880 <_read_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d07      	ldr	r5, [pc, #28]	@ (80068a0 <_read_r+0x20>)
 8006884:	4604      	mov	r4, r0
 8006886:	4608      	mov	r0, r1
 8006888:	4611      	mov	r1, r2
 800688a:	2200      	movs	r2, #0
 800688c:	602a      	str	r2, [r5, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f7fb fc1a 	bl	80020c8 <_read>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_read_r+0x1e>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_read_r+0x1e>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000580 	.word	0x20000580

080068a4 <_write_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d07      	ldr	r5, [pc, #28]	@ (80068c4 <_write_r+0x20>)
 80068a8:	4604      	mov	r4, r0
 80068aa:	4608      	mov	r0, r1
 80068ac:	4611      	mov	r1, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	602a      	str	r2, [r5, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f7fb fc25 	bl	8002102 <_write>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_write_r+0x1e>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_write_r+0x1e>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	20000580 	.word	0x20000580

080068c8 <__errno>:
 80068c8:	4b01      	ldr	r3, [pc, #4]	@ (80068d0 <__errno+0x8>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20000028 	.word	0x20000028

080068d4 <__libc_init_array>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	4d0d      	ldr	r5, [pc, #52]	@ (800690c <__libc_init_array+0x38>)
 80068d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006910 <__libc_init_array+0x3c>)
 80068da:	1b64      	subs	r4, r4, r5
 80068dc:	10a4      	asrs	r4, r4, #2
 80068de:	2600      	movs	r6, #0
 80068e0:	42a6      	cmp	r6, r4
 80068e2:	d109      	bne.n	80068f8 <__libc_init_array+0x24>
 80068e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006914 <__libc_init_array+0x40>)
 80068e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006918 <__libc_init_array+0x44>)
 80068e8:	f001 fe30 	bl	800854c <_init>
 80068ec:	1b64      	subs	r4, r4, r5
 80068ee:	10a4      	asrs	r4, r4, #2
 80068f0:	2600      	movs	r6, #0
 80068f2:	42a6      	cmp	r6, r4
 80068f4:	d105      	bne.n	8006902 <__libc_init_array+0x2e>
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fc:	4798      	blx	r3
 80068fe:	3601      	adds	r6, #1
 8006900:	e7ee      	b.n	80068e0 <__libc_init_array+0xc>
 8006902:	f855 3b04 	ldr.w	r3, [r5], #4
 8006906:	4798      	blx	r3
 8006908:	3601      	adds	r6, #1
 800690a:	e7f2      	b.n	80068f2 <__libc_init_array+0x1e>
 800690c:	080089f4 	.word	0x080089f4
 8006910:	080089f4 	.word	0x080089f4
 8006914:	080089f4 	.word	0x080089f4
 8006918:	080089f8 	.word	0x080089f8

0800691c <__retarget_lock_init_recursive>:
 800691c:	4770      	bx	lr

0800691e <__retarget_lock_acquire_recursive>:
 800691e:	4770      	bx	lr

08006920 <__retarget_lock_release_recursive>:
 8006920:	4770      	bx	lr

08006922 <quorem>:
 8006922:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006926:	6903      	ldr	r3, [r0, #16]
 8006928:	690c      	ldr	r4, [r1, #16]
 800692a:	42a3      	cmp	r3, r4
 800692c:	4607      	mov	r7, r0
 800692e:	db7e      	blt.n	8006a2e <quorem+0x10c>
 8006930:	3c01      	subs	r4, #1
 8006932:	f101 0814 	add.w	r8, r1, #20
 8006936:	00a3      	lsls	r3, r4, #2
 8006938:	f100 0514 	add.w	r5, r0, #20
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694c:	3301      	adds	r3, #1
 800694e:	429a      	cmp	r2, r3
 8006950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006954:	fbb2 f6f3 	udiv	r6, r2, r3
 8006958:	d32e      	bcc.n	80069b8 <quorem+0x96>
 800695a:	f04f 0a00 	mov.w	sl, #0
 800695e:	46c4      	mov	ip, r8
 8006960:	46ae      	mov	lr, r5
 8006962:	46d3      	mov	fp, sl
 8006964:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006968:	b298      	uxth	r0, r3
 800696a:	fb06 a000 	mla	r0, r6, r0, sl
 800696e:	0c02      	lsrs	r2, r0, #16
 8006970:	0c1b      	lsrs	r3, r3, #16
 8006972:	fb06 2303 	mla	r3, r6, r3, r2
 8006976:	f8de 2000 	ldr.w	r2, [lr]
 800697a:	b280      	uxth	r0, r0
 800697c:	b292      	uxth	r2, r2
 800697e:	1a12      	subs	r2, r2, r0
 8006980:	445a      	add	r2, fp
 8006982:	f8de 0000 	ldr.w	r0, [lr]
 8006986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800698a:	b29b      	uxth	r3, r3
 800698c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006990:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006994:	b292      	uxth	r2, r2
 8006996:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800699a:	45e1      	cmp	r9, ip
 800699c:	f84e 2b04 	str.w	r2, [lr], #4
 80069a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069a4:	d2de      	bcs.n	8006964 <quorem+0x42>
 80069a6:	9b00      	ldr	r3, [sp, #0]
 80069a8:	58eb      	ldr	r3, [r5, r3]
 80069aa:	b92b      	cbnz	r3, 80069b8 <quorem+0x96>
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	3b04      	subs	r3, #4
 80069b0:	429d      	cmp	r5, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	d32f      	bcc.n	8006a16 <quorem+0xf4>
 80069b6:	613c      	str	r4, [r7, #16]
 80069b8:	4638      	mov	r0, r7
 80069ba:	f001 f97f 	bl	8007cbc <__mcmp>
 80069be:	2800      	cmp	r0, #0
 80069c0:	db25      	blt.n	8006a0e <quorem+0xec>
 80069c2:	4629      	mov	r1, r5
 80069c4:	2000      	movs	r0, #0
 80069c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80069ca:	f8d1 c000 	ldr.w	ip, [r1]
 80069ce:	fa1f fe82 	uxth.w	lr, r2
 80069d2:	fa1f f38c 	uxth.w	r3, ip
 80069d6:	eba3 030e 	sub.w	r3, r3, lr
 80069da:	4403      	add	r3, r0
 80069dc:	0c12      	lsrs	r2, r2, #16
 80069de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ec:	45c1      	cmp	r9, r8
 80069ee:	f841 3b04 	str.w	r3, [r1], #4
 80069f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069f6:	d2e6      	bcs.n	80069c6 <quorem+0xa4>
 80069f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a00:	b922      	cbnz	r2, 8006a0c <quorem+0xea>
 8006a02:	3b04      	subs	r3, #4
 8006a04:	429d      	cmp	r5, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	d30b      	bcc.n	8006a22 <quorem+0x100>
 8006a0a:	613c      	str	r4, [r7, #16]
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	4630      	mov	r0, r6
 8006a10:	b003      	add	sp, #12
 8006a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d1cb      	bne.n	80069b6 <quorem+0x94>
 8006a1e:	3c01      	subs	r4, #1
 8006a20:	e7c6      	b.n	80069b0 <quorem+0x8e>
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	3b04      	subs	r3, #4
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	d1ef      	bne.n	8006a0a <quorem+0xe8>
 8006a2a:	3c01      	subs	r4, #1
 8006a2c:	e7ea      	b.n	8006a04 <quorem+0xe2>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e7ee      	b.n	8006a10 <quorem+0xee>
 8006a32:	0000      	movs	r0, r0
 8006a34:	0000      	movs	r0, r0
	...

08006a38 <_dtoa_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	69c7      	ldr	r7, [r0, #28]
 8006a3e:	b097      	sub	sp, #92	@ 0x5c
 8006a40:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a44:	ec55 4b10 	vmov	r4, r5, d0
 8006a48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006a4a:	9107      	str	r1, [sp, #28]
 8006a4c:	4681      	mov	r9, r0
 8006a4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a50:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a52:	b97f      	cbnz	r7, 8006a74 <_dtoa_r+0x3c>
 8006a54:	2010      	movs	r0, #16
 8006a56:	f000 fe09 	bl	800766c <malloc>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a60:	b920      	cbnz	r0, 8006a6c <_dtoa_r+0x34>
 8006a62:	4ba9      	ldr	r3, [pc, #676]	@ (8006d08 <_dtoa_r+0x2d0>)
 8006a64:	21ef      	movs	r1, #239	@ 0xef
 8006a66:	48a9      	ldr	r0, [pc, #676]	@ (8006d0c <_dtoa_r+0x2d4>)
 8006a68:	f001 fcc0 	bl	80083ec <__assert_func>
 8006a6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a70:	6007      	str	r7, [r0, #0]
 8006a72:	60c7      	str	r7, [r0, #12]
 8006a74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a78:	6819      	ldr	r1, [r3, #0]
 8006a7a:	b159      	cbz	r1, 8006a94 <_dtoa_r+0x5c>
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	604a      	str	r2, [r1, #4]
 8006a80:	2301      	movs	r3, #1
 8006a82:	4093      	lsls	r3, r2
 8006a84:	608b      	str	r3, [r1, #8]
 8006a86:	4648      	mov	r0, r9
 8006a88:	f000 fee6 	bl	8007858 <_Bfree>
 8006a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	1e2b      	subs	r3, r5, #0
 8006a96:	bfb9      	ittee	lt
 8006a98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a9c:	9305      	strlt	r3, [sp, #20]
 8006a9e:	2300      	movge	r3, #0
 8006aa0:	6033      	strge	r3, [r6, #0]
 8006aa2:	9f05      	ldr	r7, [sp, #20]
 8006aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8006d10 <_dtoa_r+0x2d8>)
 8006aa6:	bfbc      	itt	lt
 8006aa8:	2201      	movlt	r2, #1
 8006aaa:	6032      	strlt	r2, [r6, #0]
 8006aac:	43bb      	bics	r3, r7
 8006aae:	d112      	bne.n	8006ad6 <_dtoa_r+0x9e>
 8006ab0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006abc:	4323      	orrs	r3, r4
 8006abe:	f000 855a 	beq.w	8007576 <_dtoa_r+0xb3e>
 8006ac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ac4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006d24 <_dtoa_r+0x2ec>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 855c 	beq.w	8007586 <_dtoa_r+0xb4e>
 8006ace:	f10a 0303 	add.w	r3, sl, #3
 8006ad2:	f000 bd56 	b.w	8007582 <_dtoa_r+0xb4a>
 8006ad6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006ada:	2200      	movs	r2, #0
 8006adc:	ec51 0b17 	vmov	r0, r1, d7
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ae6:	f7f9 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aea:	4680      	mov	r8, r0
 8006aec:	b158      	cbz	r0, 8006b06 <_dtoa_r+0xce>
 8006aee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006af0:	2301      	movs	r3, #1
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006af6:	b113      	cbz	r3, 8006afe <_dtoa_r+0xc6>
 8006af8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006afa:	4b86      	ldr	r3, [pc, #536]	@ (8006d14 <_dtoa_r+0x2dc>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006d28 <_dtoa_r+0x2f0>
 8006b02:	f000 bd40 	b.w	8007586 <_dtoa_r+0xb4e>
 8006b06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006b0a:	aa14      	add	r2, sp, #80	@ 0x50
 8006b0c:	a915      	add	r1, sp, #84	@ 0x54
 8006b0e:	4648      	mov	r0, r9
 8006b10:	f001 f984 	bl	8007e1c <__d2b>
 8006b14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b18:	9002      	str	r0, [sp, #8]
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d078      	beq.n	8006c10 <_dtoa_r+0x1d8>
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b38:	4619      	mov	r1, r3
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <_dtoa_r+0x2e0>)
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	a36b      	add	r3, pc, #428	@ (adr r3, 8006cf0 <_dtoa_r+0x2b8>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fd56 	bl	80005f8 <__aeabi_dmul>
 8006b4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006cf8 <_dtoa_r+0x2c0>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fb9b 	bl	800028c <__adddf3>
 8006b56:	4604      	mov	r4, r0
 8006b58:	4630      	mov	r0, r6
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	f7f9 fce2 	bl	8000524 <__aeabi_i2d>
 8006b60:	a367      	add	r3, pc, #412	@ (adr r3, 8006d00 <_dtoa_r+0x2c8>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fd47 	bl	80005f8 <__aeabi_dmul>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	f7f9 ffed 	bl	8000b58 <__aeabi_d2iz>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4607      	mov	r7, r0
 8006b82:	2300      	movs	r3, #0
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7f9 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8006b8c:	b140      	cbz	r0, 8006ba0 <_dtoa_r+0x168>
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f7f9 fcc8 	bl	8000524 <__aeabi_i2d>
 8006b94:	4622      	mov	r2, r4
 8006b96:	462b      	mov	r3, r5
 8006b98:	f7f9 ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b9c:	b900      	cbnz	r0, 8006ba0 <_dtoa_r+0x168>
 8006b9e:	3f01      	subs	r7, #1
 8006ba0:	2f16      	cmp	r7, #22
 8006ba2:	d852      	bhi.n	8006c4a <_dtoa_r+0x212>
 8006ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8006d1c <_dtoa_r+0x2e4>)
 8006ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bb2:	f7f9 ff93 	bl	8000adc <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d049      	beq.n	8006c4e <_dtoa_r+0x216>
 8006bba:	3f01      	subs	r7, #1
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bc2:	1b9b      	subs	r3, r3, r6
 8006bc4:	1e5a      	subs	r2, r3, #1
 8006bc6:	bf45      	ittet	mi
 8006bc8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bcc:	9300      	strmi	r3, [sp, #0]
 8006bce:	2300      	movpl	r3, #0
 8006bd0:	2300      	movmi	r3, #0
 8006bd2:	9206      	str	r2, [sp, #24]
 8006bd4:	bf54      	ite	pl
 8006bd6:	9300      	strpl	r3, [sp, #0]
 8006bd8:	9306      	strmi	r3, [sp, #24]
 8006bda:	2f00      	cmp	r7, #0
 8006bdc:	db39      	blt.n	8006c52 <_dtoa_r+0x21a>
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	970d      	str	r7, [sp, #52]	@ 0x34
 8006be2:	443b      	add	r3, r7
 8006be4:	9306      	str	r3, [sp, #24]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9308      	str	r3, [sp, #32]
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	d863      	bhi.n	8006cb8 <_dtoa_r+0x280>
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	bfc4      	itt	gt
 8006bf4:	3b04      	subgt	r3, #4
 8006bf6:	9307      	strgt	r3, [sp, #28]
 8006bf8:	9b07      	ldr	r3, [sp, #28]
 8006bfa:	f1a3 0302 	sub.w	r3, r3, #2
 8006bfe:	bfcc      	ite	gt
 8006c00:	2400      	movgt	r4, #0
 8006c02:	2401      	movle	r4, #1
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d863      	bhi.n	8006cd0 <_dtoa_r+0x298>
 8006c08:	e8df f003 	tbb	[pc, r3]
 8006c0c:	2b375452 	.word	0x2b375452
 8006c10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c14:	441e      	add	r6, r3
 8006c16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	bfc1      	itttt	gt
 8006c1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c22:	409f      	lslgt	r7, r3
 8006c24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c2c:	bfd6      	itet	le
 8006c2e:	f1c3 0320 	rsble	r3, r3, #32
 8006c32:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c36:	fa04 f003 	lslle.w	r0, r4, r3
 8006c3a:	f7f9 fc63 	bl	8000504 <__aeabi_ui2d>
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c44:	3e01      	subs	r6, #1
 8006c46:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c48:	e776      	b.n	8006b38 <_dtoa_r+0x100>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e7b7      	b.n	8006bbe <_dtoa_r+0x186>
 8006c4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006c50:	e7b6      	b.n	8006bc0 <_dtoa_r+0x188>
 8006c52:	9b00      	ldr	r3, [sp, #0]
 8006c54:	1bdb      	subs	r3, r3, r7
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	427b      	negs	r3, r7
 8006c5a:	9308      	str	r3, [sp, #32]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c60:	e7c3      	b.n	8006bea <_dtoa_r+0x1b2>
 8006c62:	2301      	movs	r3, #1
 8006c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c68:	eb07 0b03 	add.w	fp, r7, r3
 8006c6c:	f10b 0301 	add.w	r3, fp, #1
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	9303      	str	r3, [sp, #12]
 8006c74:	bfb8      	it	lt
 8006c76:	2301      	movlt	r3, #1
 8006c78:	e006      	b.n	8006c88 <_dtoa_r+0x250>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dd28      	ble.n	8006cd6 <_dtoa_r+0x29e>
 8006c84:	469b      	mov	fp, r3
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f102 0514 	add.w	r5, r2, #20
 8006c94:	429d      	cmp	r5, r3
 8006c96:	d926      	bls.n	8006ce6 <_dtoa_r+0x2ae>
 8006c98:	6041      	str	r1, [r0, #4]
 8006c9a:	4648      	mov	r0, r9
 8006c9c:	f000 fd9c 	bl	80077d8 <_Balloc>
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d142      	bne.n	8006d2c <_dtoa_r+0x2f4>
 8006ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d20 <_dtoa_r+0x2e8>)
 8006ca8:	4602      	mov	r2, r0
 8006caa:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cae:	e6da      	b.n	8006a66 <_dtoa_r+0x2e>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e7e3      	b.n	8006c7c <_dtoa_r+0x244>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e7d5      	b.n	8006c64 <_dtoa_r+0x22c>
 8006cb8:	2401      	movs	r4, #1
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9307      	str	r3, [sp, #28]
 8006cbe:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cc0:	f04f 3bff 	mov.w	fp, #4294967295
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cca:	2312      	movs	r3, #18
 8006ccc:	920c      	str	r2, [sp, #48]	@ 0x30
 8006cce:	e7db      	b.n	8006c88 <_dtoa_r+0x250>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd4:	e7f4      	b.n	8006cc0 <_dtoa_r+0x288>
 8006cd6:	f04f 0b01 	mov.w	fp, #1
 8006cda:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cde:	465b      	mov	r3, fp
 8006ce0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006ce4:	e7d0      	b.n	8006c88 <_dtoa_r+0x250>
 8006ce6:	3101      	adds	r1, #1
 8006ce8:	0052      	lsls	r2, r2, #1
 8006cea:	e7d1      	b.n	8006c90 <_dtoa_r+0x258>
 8006cec:	f3af 8000 	nop.w
 8006cf0:	636f4361 	.word	0x636f4361
 8006cf4:	3fd287a7 	.word	0x3fd287a7
 8006cf8:	8b60c8b3 	.word	0x8b60c8b3
 8006cfc:	3fc68a28 	.word	0x3fc68a28
 8006d00:	509f79fb 	.word	0x509f79fb
 8006d04:	3fd34413 	.word	0x3fd34413
 8006d08:	080086b5 	.word	0x080086b5
 8006d0c:	080086cc 	.word	0x080086cc
 8006d10:	7ff00000 	.word	0x7ff00000
 8006d14:	08008685 	.word	0x08008685
 8006d18:	3ff80000 	.word	0x3ff80000
 8006d1c:	08008820 	.word	0x08008820
 8006d20:	08008724 	.word	0x08008724
 8006d24:	080086b1 	.word	0x080086b1
 8006d28:	08008684 	.word	0x08008684
 8006d2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d30:	6018      	str	r0, [r3, #0]
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	2b0e      	cmp	r3, #14
 8006d36:	f200 80a1 	bhi.w	8006e7c <_dtoa_r+0x444>
 8006d3a:	2c00      	cmp	r4, #0
 8006d3c:	f000 809e 	beq.w	8006e7c <_dtoa_r+0x444>
 8006d40:	2f00      	cmp	r7, #0
 8006d42:	dd33      	ble.n	8006dac <_dtoa_r+0x374>
 8006d44:	4b9c      	ldr	r3, [pc, #624]	@ (8006fb8 <_dtoa_r+0x580>)
 8006d46:	f007 020f 	and.w	r2, r7, #15
 8006d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d4e:	ed93 7b00 	vldr	d7, [r3]
 8006d52:	05f8      	lsls	r0, r7, #23
 8006d54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006d58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d5c:	d516      	bpl.n	8006d8c <_dtoa_r+0x354>
 8006d5e:	4b97      	ldr	r3, [pc, #604]	@ (8006fbc <_dtoa_r+0x584>)
 8006d60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d68:	f7f9 fd70 	bl	800084c <__aeabi_ddiv>
 8006d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d70:	f004 040f 	and.w	r4, r4, #15
 8006d74:	2603      	movs	r6, #3
 8006d76:	4d91      	ldr	r5, [pc, #580]	@ (8006fbc <_dtoa_r+0x584>)
 8006d78:	b954      	cbnz	r4, 8006d90 <_dtoa_r+0x358>
 8006d7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d82:	f7f9 fd63 	bl	800084c <__aeabi_ddiv>
 8006d86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d8a:	e028      	b.n	8006dde <_dtoa_r+0x3a6>
 8006d8c:	2602      	movs	r6, #2
 8006d8e:	e7f2      	b.n	8006d76 <_dtoa_r+0x33e>
 8006d90:	07e1      	lsls	r1, r4, #31
 8006d92:	d508      	bpl.n	8006da6 <_dtoa_r+0x36e>
 8006d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d9c:	f7f9 fc2c 	bl	80005f8 <__aeabi_dmul>
 8006da0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006da4:	3601      	adds	r6, #1
 8006da6:	1064      	asrs	r4, r4, #1
 8006da8:	3508      	adds	r5, #8
 8006daa:	e7e5      	b.n	8006d78 <_dtoa_r+0x340>
 8006dac:	f000 80af 	beq.w	8006f0e <_dtoa_r+0x4d6>
 8006db0:	427c      	negs	r4, r7
 8006db2:	4b81      	ldr	r3, [pc, #516]	@ (8006fb8 <_dtoa_r+0x580>)
 8006db4:	4d81      	ldr	r5, [pc, #516]	@ (8006fbc <_dtoa_r+0x584>)
 8006db6:	f004 020f 	and.w	r2, r4, #15
 8006dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dc6:	f7f9 fc17 	bl	80005f8 <__aeabi_dmul>
 8006dca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dce:	1124      	asrs	r4, r4, #4
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2602      	movs	r6, #2
 8006dd4:	2c00      	cmp	r4, #0
 8006dd6:	f040 808f 	bne.w	8006ef8 <_dtoa_r+0x4c0>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1d3      	bne.n	8006d86 <_dtoa_r+0x34e>
 8006dde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006de0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8094 	beq.w	8006f12 <_dtoa_r+0x4da>
 8006dea:	4b75      	ldr	r3, [pc, #468]	@ (8006fc0 <_dtoa_r+0x588>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fe73 	bl	8000adc <__aeabi_dcmplt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f000 808b 	beq.w	8006f12 <_dtoa_r+0x4da>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 8087 	beq.w	8006f12 <_dtoa_r+0x4da>
 8006e04:	f1bb 0f00 	cmp.w	fp, #0
 8006e08:	dd34      	ble.n	8006e74 <_dtoa_r+0x43c>
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4b6d      	ldr	r3, [pc, #436]	@ (8006fc4 <_dtoa_r+0x58c>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fbf1 	bl	80005f8 <__aeabi_dmul>
 8006e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e1e:	3601      	adds	r6, #1
 8006e20:	465c      	mov	r4, fp
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7f9 fb7e 	bl	8000524 <__aeabi_i2d>
 8006e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2c:	f7f9 fbe4 	bl	80005f8 <__aeabi_dmul>
 8006e30:	4b65      	ldr	r3, [pc, #404]	@ (8006fc8 <_dtoa_r+0x590>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	f7f9 fa2a 	bl	800028c <__adddf3>
 8006e38:	4605      	mov	r5, r0
 8006e3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	d16a      	bne.n	8006f18 <_dtoa_r+0x4e0>
 8006e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e46:	4b61      	ldr	r3, [pc, #388]	@ (8006fcc <_dtoa_r+0x594>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f7f9 fa1d 	bl	8000288 <__aeabi_dsub>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e56:	462a      	mov	r2, r5
 8006e58:	4633      	mov	r3, r6
 8006e5a:	f7f9 fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f040 8298 	bne.w	8007394 <_dtoa_r+0x95c>
 8006e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e68:	462a      	mov	r2, r5
 8006e6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e6e:	f7f9 fe35 	bl	8000adc <__aeabi_dcmplt>
 8006e72:	bb38      	cbnz	r0, 8006ec4 <_dtoa_r+0x48c>
 8006e74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f2c0 8157 	blt.w	8007132 <_dtoa_r+0x6fa>
 8006e84:	2f0e      	cmp	r7, #14
 8006e86:	f300 8154 	bgt.w	8007132 <_dtoa_r+0x6fa>
 8006e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb8 <_dtoa_r+0x580>)
 8006e8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e90:	ed93 7b00 	vldr	d7, [r3]
 8006e94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	ed8d 7b00 	vstr	d7, [sp]
 8006e9c:	f280 80e5 	bge.w	800706a <_dtoa_r+0x632>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f300 80e1 	bgt.w	800706a <_dtoa_r+0x632>
 8006ea8:	d10c      	bne.n	8006ec4 <_dtoa_r+0x48c>
 8006eaa:	4b48      	ldr	r3, [pc, #288]	@ (8006fcc <_dtoa_r+0x594>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	ec51 0b17 	vmov	r0, r1, d7
 8006eb2:	f7f9 fba1 	bl	80005f8 <__aeabi_dmul>
 8006eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eba:	f7f9 fe23 	bl	8000b04 <__aeabi_dcmpge>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f000 8266 	beq.w	8007390 <_dtoa_r+0x958>
 8006ec4:	2400      	movs	r4, #0
 8006ec6:	4625      	mov	r5, r4
 8006ec8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006eca:	4656      	mov	r6, sl
 8006ecc:	ea6f 0803 	mvn.w	r8, r3
 8006ed0:	2700      	movs	r7, #0
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f000 fcbf 	bl	8007858 <_Bfree>
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	f000 80bd 	beq.w	800705a <_dtoa_r+0x622>
 8006ee0:	b12f      	cbz	r7, 8006eee <_dtoa_r+0x4b6>
 8006ee2:	42af      	cmp	r7, r5
 8006ee4:	d003      	beq.n	8006eee <_dtoa_r+0x4b6>
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f000 fcb5 	bl	8007858 <_Bfree>
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4648      	mov	r0, r9
 8006ef2:	f000 fcb1 	bl	8007858 <_Bfree>
 8006ef6:	e0b0      	b.n	800705a <_dtoa_r+0x622>
 8006ef8:	07e2      	lsls	r2, r4, #31
 8006efa:	d505      	bpl.n	8006f08 <_dtoa_r+0x4d0>
 8006efc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f00:	f7f9 fb7a 	bl	80005f8 <__aeabi_dmul>
 8006f04:	3601      	adds	r6, #1
 8006f06:	2301      	movs	r3, #1
 8006f08:	1064      	asrs	r4, r4, #1
 8006f0a:	3508      	adds	r5, #8
 8006f0c:	e762      	b.n	8006dd4 <_dtoa_r+0x39c>
 8006f0e:	2602      	movs	r6, #2
 8006f10:	e765      	b.n	8006dde <_dtoa_r+0x3a6>
 8006f12:	9c03      	ldr	r4, [sp, #12]
 8006f14:	46b8      	mov	r8, r7
 8006f16:	e784      	b.n	8006e22 <_dtoa_r+0x3ea>
 8006f18:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <_dtoa_r+0x580>)
 8006f1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f24:	4454      	add	r4, sl
 8006f26:	2900      	cmp	r1, #0
 8006f28:	d054      	beq.n	8006fd4 <_dtoa_r+0x59c>
 8006f2a:	4929      	ldr	r1, [pc, #164]	@ (8006fd0 <_dtoa_r+0x598>)
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f7f9 fc8d 	bl	800084c <__aeabi_ddiv>
 8006f32:	4633      	mov	r3, r6
 8006f34:	462a      	mov	r2, r5
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f3e:	4656      	mov	r6, sl
 8006f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f44:	f7f9 fe08 	bl	8000b58 <__aeabi_d2iz>
 8006f48:	4605      	mov	r5, r0
 8006f4a:	f7f9 faeb 	bl	8000524 <__aeabi_i2d>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f56:	f7f9 f997 	bl	8000288 <__aeabi_dsub>
 8006f5a:	3530      	adds	r5, #48	@ 0x30
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f64:	f806 5b01 	strb.w	r5, [r6], #1
 8006f68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f6c:	f7f9 fdb6 	bl	8000adc <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d172      	bne.n	800705a <_dtoa_r+0x622>
 8006f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f78:	4911      	ldr	r1, [pc, #68]	@ (8006fc0 <_dtoa_r+0x588>)
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f7f9 f984 	bl	8000288 <__aeabi_dsub>
 8006f80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f84:	f7f9 fdaa 	bl	8000adc <__aeabi_dcmplt>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f040 80b4 	bne.w	80070f6 <_dtoa_r+0x6be>
 8006f8e:	42a6      	cmp	r6, r4
 8006f90:	f43f af70 	beq.w	8006e74 <_dtoa_r+0x43c>
 8006f94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f98:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <_dtoa_r+0x58c>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f7f9 fb2c 	bl	80005f8 <__aeabi_dmul>
 8006fa0:	4b08      	ldr	r3, [pc, #32]	@ (8006fc4 <_dtoa_r+0x58c>)
 8006fa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb4:	e7c4      	b.n	8006f40 <_dtoa_r+0x508>
 8006fb6:	bf00      	nop
 8006fb8:	08008820 	.word	0x08008820
 8006fbc:	080087f8 	.word	0x080087f8
 8006fc0:	3ff00000 	.word	0x3ff00000
 8006fc4:	40240000 	.word	0x40240000
 8006fc8:	401c0000 	.word	0x401c0000
 8006fcc:	40140000 	.word	0x40140000
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f7f9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8006fdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fe0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fe2:	4656      	mov	r6, sl
 8006fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe8:	f7f9 fdb6 	bl	8000b58 <__aeabi_d2iz>
 8006fec:	4605      	mov	r5, r0
 8006fee:	f7f9 fa99 	bl	8000524 <__aeabi_i2d>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ffa:	f7f9 f945 	bl	8000288 <__aeabi_dsub>
 8006ffe:	3530      	adds	r5, #48	@ 0x30
 8007000:	f806 5b01 	strb.w	r5, [r6], #1
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	42a6      	cmp	r6, r4
 800700a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	d124      	bne.n	800705e <_dtoa_r+0x626>
 8007014:	4baf      	ldr	r3, [pc, #700]	@ (80072d4 <_dtoa_r+0x89c>)
 8007016:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800701a:	f7f9 f937 	bl	800028c <__adddf3>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007026:	f7f9 fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d163      	bne.n	80070f6 <_dtoa_r+0x6be>
 800702e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007032:	49a8      	ldr	r1, [pc, #672]	@ (80072d4 <_dtoa_r+0x89c>)
 8007034:	2000      	movs	r0, #0
 8007036:	f7f9 f927 	bl	8000288 <__aeabi_dsub>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007042:	f7f9 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f af14 	beq.w	8006e74 <_dtoa_r+0x43c>
 800704c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800704e:	1e73      	subs	r3, r6, #1
 8007050:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007052:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007056:	2b30      	cmp	r3, #48	@ 0x30
 8007058:	d0f8      	beq.n	800704c <_dtoa_r+0x614>
 800705a:	4647      	mov	r7, r8
 800705c:	e03b      	b.n	80070d6 <_dtoa_r+0x69e>
 800705e:	4b9e      	ldr	r3, [pc, #632]	@ (80072d8 <_dtoa_r+0x8a0>)
 8007060:	f7f9 faca 	bl	80005f8 <__aeabi_dmul>
 8007064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007068:	e7bc      	b.n	8006fe4 <_dtoa_r+0x5ac>
 800706a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800706e:	4656      	mov	r6, sl
 8007070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 fbe8 	bl	800084c <__aeabi_ddiv>
 800707c:	f7f9 fd6c 	bl	8000b58 <__aeabi_d2iz>
 8007080:	4680      	mov	r8, r0
 8007082:	f7f9 fa4f 	bl	8000524 <__aeabi_i2d>
 8007086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800708a:	f7f9 fab5 	bl	80005f8 <__aeabi_dmul>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4620      	mov	r0, r4
 8007094:	4629      	mov	r1, r5
 8007096:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800709a:	f7f9 f8f5 	bl	8000288 <__aeabi_dsub>
 800709e:	f806 4b01 	strb.w	r4, [r6], #1
 80070a2:	9d03      	ldr	r5, [sp, #12]
 80070a4:	eba6 040a 	sub.w	r4, r6, sl
 80070a8:	42a5      	cmp	r5, r4
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	d133      	bne.n	8007118 <_dtoa_r+0x6e0>
 80070b0:	f7f9 f8ec 	bl	800028c <__adddf3>
 80070b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b8:	4604      	mov	r4, r0
 80070ba:	460d      	mov	r5, r1
 80070bc:	f7f9 fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 80070c0:	b9c0      	cbnz	r0, 80070f4 <_dtoa_r+0x6bc>
 80070c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ce:	b110      	cbz	r0, 80070d6 <_dtoa_r+0x69e>
 80070d0:	f018 0f01 	tst.w	r8, #1
 80070d4:	d10e      	bne.n	80070f4 <_dtoa_r+0x6bc>
 80070d6:	9902      	ldr	r1, [sp, #8]
 80070d8:	4648      	mov	r0, r9
 80070da:	f000 fbbd 	bl	8007858 <_Bfree>
 80070de:	2300      	movs	r3, #0
 80070e0:	7033      	strb	r3, [r6, #0]
 80070e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070e4:	3701      	adds	r7, #1
 80070e6:	601f      	str	r7, [r3, #0]
 80070e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 824b 	beq.w	8007586 <_dtoa_r+0xb4e>
 80070f0:	601e      	str	r6, [r3, #0]
 80070f2:	e248      	b.n	8007586 <_dtoa_r+0xb4e>
 80070f4:	46b8      	mov	r8, r7
 80070f6:	4633      	mov	r3, r6
 80070f8:	461e      	mov	r6, r3
 80070fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070fe:	2a39      	cmp	r2, #57	@ 0x39
 8007100:	d106      	bne.n	8007110 <_dtoa_r+0x6d8>
 8007102:	459a      	cmp	sl, r3
 8007104:	d1f8      	bne.n	80070f8 <_dtoa_r+0x6c0>
 8007106:	2230      	movs	r2, #48	@ 0x30
 8007108:	f108 0801 	add.w	r8, r8, #1
 800710c:	f88a 2000 	strb.w	r2, [sl]
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	3201      	adds	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e7a0      	b.n	800705a <_dtoa_r+0x622>
 8007118:	4b6f      	ldr	r3, [pc, #444]	@ (80072d8 <_dtoa_r+0x8a0>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	f7f9 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800712c:	2800      	cmp	r0, #0
 800712e:	d09f      	beq.n	8007070 <_dtoa_r+0x638>
 8007130:	e7d1      	b.n	80070d6 <_dtoa_r+0x69e>
 8007132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 80ea 	beq.w	800730e <_dtoa_r+0x8d6>
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	2a01      	cmp	r2, #1
 800713e:	f300 80cd 	bgt.w	80072dc <_dtoa_r+0x8a4>
 8007142:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007144:	2a00      	cmp	r2, #0
 8007146:	f000 80c1 	beq.w	80072cc <_dtoa_r+0x894>
 800714a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800714e:	9c08      	ldr	r4, [sp, #32]
 8007150:	9e00      	ldr	r6, [sp, #0]
 8007152:	9a00      	ldr	r2, [sp, #0]
 8007154:	441a      	add	r2, r3
 8007156:	9200      	str	r2, [sp, #0]
 8007158:	9a06      	ldr	r2, [sp, #24]
 800715a:	2101      	movs	r1, #1
 800715c:	441a      	add	r2, r3
 800715e:	4648      	mov	r0, r9
 8007160:	9206      	str	r2, [sp, #24]
 8007162:	f000 fc2d 	bl	80079c0 <__i2b>
 8007166:	4605      	mov	r5, r0
 8007168:	b166      	cbz	r6, 8007184 <_dtoa_r+0x74c>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	dd09      	ble.n	8007184 <_dtoa_r+0x74c>
 8007170:	42b3      	cmp	r3, r6
 8007172:	9a00      	ldr	r2, [sp, #0]
 8007174:	bfa8      	it	ge
 8007176:	4633      	movge	r3, r6
 8007178:	1ad2      	subs	r2, r2, r3
 800717a:	9200      	str	r2, [sp, #0]
 800717c:	9a06      	ldr	r2, [sp, #24]
 800717e:	1af6      	subs	r6, r6, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	9306      	str	r3, [sp, #24]
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	b30b      	cbz	r3, 80071cc <_dtoa_r+0x794>
 8007188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80c6 	beq.w	800731c <_dtoa_r+0x8e4>
 8007190:	2c00      	cmp	r4, #0
 8007192:	f000 80c0 	beq.w	8007316 <_dtoa_r+0x8de>
 8007196:	4629      	mov	r1, r5
 8007198:	4622      	mov	r2, r4
 800719a:	4648      	mov	r0, r9
 800719c:	f000 fcc8 	bl	8007b30 <__pow5mult>
 80071a0:	9a02      	ldr	r2, [sp, #8]
 80071a2:	4601      	mov	r1, r0
 80071a4:	4605      	mov	r5, r0
 80071a6:	4648      	mov	r0, r9
 80071a8:	f000 fc20 	bl	80079ec <__multiply>
 80071ac:	9902      	ldr	r1, [sp, #8]
 80071ae:	4680      	mov	r8, r0
 80071b0:	4648      	mov	r0, r9
 80071b2:	f000 fb51 	bl	8007858 <_Bfree>
 80071b6:	9b08      	ldr	r3, [sp, #32]
 80071b8:	1b1b      	subs	r3, r3, r4
 80071ba:	9308      	str	r3, [sp, #32]
 80071bc:	f000 80b1 	beq.w	8007322 <_dtoa_r+0x8ea>
 80071c0:	9a08      	ldr	r2, [sp, #32]
 80071c2:	4641      	mov	r1, r8
 80071c4:	4648      	mov	r0, r9
 80071c6:	f000 fcb3 	bl	8007b30 <__pow5mult>
 80071ca:	9002      	str	r0, [sp, #8]
 80071cc:	2101      	movs	r1, #1
 80071ce:	4648      	mov	r0, r9
 80071d0:	f000 fbf6 	bl	80079c0 <__i2b>
 80071d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071d6:	4604      	mov	r4, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 81d8 	beq.w	800758e <_dtoa_r+0xb56>
 80071de:	461a      	mov	r2, r3
 80071e0:	4601      	mov	r1, r0
 80071e2:	4648      	mov	r0, r9
 80071e4:	f000 fca4 	bl	8007b30 <__pow5mult>
 80071e8:	9b07      	ldr	r3, [sp, #28]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	4604      	mov	r4, r0
 80071ee:	f300 809f 	bgt.w	8007330 <_dtoa_r+0x8f8>
 80071f2:	9b04      	ldr	r3, [sp, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f040 8097 	bne.w	8007328 <_dtoa_r+0x8f0>
 80071fa:	9b05      	ldr	r3, [sp, #20]
 80071fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8093 	bne.w	800732c <_dtoa_r+0x8f4>
 8007206:	9b05      	ldr	r3, [sp, #20]
 8007208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800720c:	0d1b      	lsrs	r3, r3, #20
 800720e:	051b      	lsls	r3, r3, #20
 8007210:	b133      	cbz	r3, 8007220 <_dtoa_r+0x7e8>
 8007212:	9b00      	ldr	r3, [sp, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	3301      	adds	r3, #1
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	2301      	movs	r3, #1
 8007220:	9308      	str	r3, [sp, #32]
 8007222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 81b8 	beq.w	800759a <_dtoa_r+0xb62>
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007230:	6918      	ldr	r0, [r3, #16]
 8007232:	f000 fb79 	bl	8007928 <__hi0bits>
 8007236:	f1c0 0020 	rsb	r0, r0, #32
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	4418      	add	r0, r3
 800723e:	f010 001f 	ands.w	r0, r0, #31
 8007242:	f000 8082 	beq.w	800734a <_dtoa_r+0x912>
 8007246:	f1c0 0320 	rsb	r3, r0, #32
 800724a:	2b04      	cmp	r3, #4
 800724c:	dd73      	ble.n	8007336 <_dtoa_r+0x8fe>
 800724e:	9b00      	ldr	r3, [sp, #0]
 8007250:	f1c0 001c 	rsb	r0, r0, #28
 8007254:	4403      	add	r3, r0
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	4403      	add	r3, r0
 800725c:	4406      	add	r6, r0
 800725e:	9306      	str	r3, [sp, #24]
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dd05      	ble.n	8007272 <_dtoa_r+0x83a>
 8007266:	9902      	ldr	r1, [sp, #8]
 8007268:	461a      	mov	r2, r3
 800726a:	4648      	mov	r0, r9
 800726c:	f000 fcba 	bl	8007be4 <__lshift>
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	9b06      	ldr	r3, [sp, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	dd05      	ble.n	8007284 <_dtoa_r+0x84c>
 8007278:	4621      	mov	r1, r4
 800727a:	461a      	mov	r2, r3
 800727c:	4648      	mov	r0, r9
 800727e:	f000 fcb1 	bl	8007be4 <__lshift>
 8007282:	4604      	mov	r4, r0
 8007284:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d061      	beq.n	800734e <_dtoa_r+0x916>
 800728a:	9802      	ldr	r0, [sp, #8]
 800728c:	4621      	mov	r1, r4
 800728e:	f000 fd15 	bl	8007cbc <__mcmp>
 8007292:	2800      	cmp	r0, #0
 8007294:	da5b      	bge.n	800734e <_dtoa_r+0x916>
 8007296:	2300      	movs	r3, #0
 8007298:	9902      	ldr	r1, [sp, #8]
 800729a:	220a      	movs	r2, #10
 800729c:	4648      	mov	r0, r9
 800729e:	f000 fafd 	bl	800789c <__multadd>
 80072a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a4:	9002      	str	r0, [sp, #8]
 80072a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8177 	beq.w	800759e <_dtoa_r+0xb66>
 80072b0:	4629      	mov	r1, r5
 80072b2:	2300      	movs	r3, #0
 80072b4:	220a      	movs	r2, #10
 80072b6:	4648      	mov	r0, r9
 80072b8:	f000 faf0 	bl	800789c <__multadd>
 80072bc:	f1bb 0f00 	cmp.w	fp, #0
 80072c0:	4605      	mov	r5, r0
 80072c2:	dc6f      	bgt.n	80073a4 <_dtoa_r+0x96c>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	dc49      	bgt.n	800735e <_dtoa_r+0x926>
 80072ca:	e06b      	b.n	80073a4 <_dtoa_r+0x96c>
 80072cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072d2:	e73c      	b.n	800714e <_dtoa_r+0x716>
 80072d4:	3fe00000 	.word	0x3fe00000
 80072d8:	40240000 	.word	0x40240000
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	1e5c      	subs	r4, r3, #1
 80072e0:	9b08      	ldr	r3, [sp, #32]
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	db09      	blt.n	80072fa <_dtoa_r+0x8c2>
 80072e6:	1b1c      	subs	r4, r3, r4
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f6bf af30 	bge.w	8007150 <_dtoa_r+0x718>
 80072f0:	9b00      	ldr	r3, [sp, #0]
 80072f2:	9a03      	ldr	r2, [sp, #12]
 80072f4:	1a9e      	subs	r6, r3, r2
 80072f6:	2300      	movs	r3, #0
 80072f8:	e72b      	b.n	8007152 <_dtoa_r+0x71a>
 80072fa:	9b08      	ldr	r3, [sp, #32]
 80072fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072fe:	9408      	str	r4, [sp, #32]
 8007300:	1ae3      	subs	r3, r4, r3
 8007302:	441a      	add	r2, r3
 8007304:	9e00      	ldr	r6, [sp, #0]
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	920d      	str	r2, [sp, #52]	@ 0x34
 800730a:	2400      	movs	r4, #0
 800730c:	e721      	b.n	8007152 <_dtoa_r+0x71a>
 800730e:	9c08      	ldr	r4, [sp, #32]
 8007310:	9e00      	ldr	r6, [sp, #0]
 8007312:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007314:	e728      	b.n	8007168 <_dtoa_r+0x730>
 8007316:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800731a:	e751      	b.n	80071c0 <_dtoa_r+0x788>
 800731c:	9a08      	ldr	r2, [sp, #32]
 800731e:	9902      	ldr	r1, [sp, #8]
 8007320:	e750      	b.n	80071c4 <_dtoa_r+0x78c>
 8007322:	f8cd 8008 	str.w	r8, [sp, #8]
 8007326:	e751      	b.n	80071cc <_dtoa_r+0x794>
 8007328:	2300      	movs	r3, #0
 800732a:	e779      	b.n	8007220 <_dtoa_r+0x7e8>
 800732c:	9b04      	ldr	r3, [sp, #16]
 800732e:	e777      	b.n	8007220 <_dtoa_r+0x7e8>
 8007330:	2300      	movs	r3, #0
 8007332:	9308      	str	r3, [sp, #32]
 8007334:	e779      	b.n	800722a <_dtoa_r+0x7f2>
 8007336:	d093      	beq.n	8007260 <_dtoa_r+0x828>
 8007338:	9a00      	ldr	r2, [sp, #0]
 800733a:	331c      	adds	r3, #28
 800733c:	441a      	add	r2, r3
 800733e:	9200      	str	r2, [sp, #0]
 8007340:	9a06      	ldr	r2, [sp, #24]
 8007342:	441a      	add	r2, r3
 8007344:	441e      	add	r6, r3
 8007346:	9206      	str	r2, [sp, #24]
 8007348:	e78a      	b.n	8007260 <_dtoa_r+0x828>
 800734a:	4603      	mov	r3, r0
 800734c:	e7f4      	b.n	8007338 <_dtoa_r+0x900>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	46b8      	mov	r8, r7
 8007354:	dc20      	bgt.n	8007398 <_dtoa_r+0x960>
 8007356:	469b      	mov	fp, r3
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	2b02      	cmp	r3, #2
 800735c:	dd1e      	ble.n	800739c <_dtoa_r+0x964>
 800735e:	f1bb 0f00 	cmp.w	fp, #0
 8007362:	f47f adb1 	bne.w	8006ec8 <_dtoa_r+0x490>
 8007366:	4621      	mov	r1, r4
 8007368:	465b      	mov	r3, fp
 800736a:	2205      	movs	r2, #5
 800736c:	4648      	mov	r0, r9
 800736e:	f000 fa95 	bl	800789c <__multadd>
 8007372:	4601      	mov	r1, r0
 8007374:	4604      	mov	r4, r0
 8007376:	9802      	ldr	r0, [sp, #8]
 8007378:	f000 fca0 	bl	8007cbc <__mcmp>
 800737c:	2800      	cmp	r0, #0
 800737e:	f77f ada3 	ble.w	8006ec8 <_dtoa_r+0x490>
 8007382:	4656      	mov	r6, sl
 8007384:	2331      	movs	r3, #49	@ 0x31
 8007386:	f806 3b01 	strb.w	r3, [r6], #1
 800738a:	f108 0801 	add.w	r8, r8, #1
 800738e:	e59f      	b.n	8006ed0 <_dtoa_r+0x498>
 8007390:	9c03      	ldr	r4, [sp, #12]
 8007392:	46b8      	mov	r8, r7
 8007394:	4625      	mov	r5, r4
 8007396:	e7f4      	b.n	8007382 <_dtoa_r+0x94a>
 8007398:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800739c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8101 	beq.w	80075a6 <_dtoa_r+0xb6e>
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	dd05      	ble.n	80073b4 <_dtoa_r+0x97c>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4632      	mov	r2, r6
 80073ac:	4648      	mov	r0, r9
 80073ae:	f000 fc19 	bl	8007be4 <__lshift>
 80073b2:	4605      	mov	r5, r0
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d05c      	beq.n	8007474 <_dtoa_r+0xa3c>
 80073ba:	6869      	ldr	r1, [r5, #4]
 80073bc:	4648      	mov	r0, r9
 80073be:	f000 fa0b 	bl	80077d8 <_Balloc>
 80073c2:	4606      	mov	r6, r0
 80073c4:	b928      	cbnz	r0, 80073d2 <_dtoa_r+0x99a>
 80073c6:	4b82      	ldr	r3, [pc, #520]	@ (80075d0 <_dtoa_r+0xb98>)
 80073c8:	4602      	mov	r2, r0
 80073ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073ce:	f7ff bb4a 	b.w	8006a66 <_dtoa_r+0x2e>
 80073d2:	692a      	ldr	r2, [r5, #16]
 80073d4:	3202      	adds	r2, #2
 80073d6:	0092      	lsls	r2, r2, #2
 80073d8:	f105 010c 	add.w	r1, r5, #12
 80073dc:	300c      	adds	r0, #12
 80073de:	f000 fff7 	bl	80083d0 <memcpy>
 80073e2:	2201      	movs	r2, #1
 80073e4:	4631      	mov	r1, r6
 80073e6:	4648      	mov	r0, r9
 80073e8:	f000 fbfc 	bl	8007be4 <__lshift>
 80073ec:	f10a 0301 	add.w	r3, sl, #1
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	eb0a 030b 	add.w	r3, sl, fp
 80073f6:	9308      	str	r3, [sp, #32]
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	462f      	mov	r7, r5
 8007400:	9306      	str	r3, [sp, #24]
 8007402:	4605      	mov	r5, r0
 8007404:	9b00      	ldr	r3, [sp, #0]
 8007406:	9802      	ldr	r0, [sp, #8]
 8007408:	4621      	mov	r1, r4
 800740a:	f103 3bff 	add.w	fp, r3, #4294967295
 800740e:	f7ff fa88 	bl	8006922 <quorem>
 8007412:	4603      	mov	r3, r0
 8007414:	3330      	adds	r3, #48	@ 0x30
 8007416:	9003      	str	r0, [sp, #12]
 8007418:	4639      	mov	r1, r7
 800741a:	9802      	ldr	r0, [sp, #8]
 800741c:	9309      	str	r3, [sp, #36]	@ 0x24
 800741e:	f000 fc4d 	bl	8007cbc <__mcmp>
 8007422:	462a      	mov	r2, r5
 8007424:	9004      	str	r0, [sp, #16]
 8007426:	4621      	mov	r1, r4
 8007428:	4648      	mov	r0, r9
 800742a:	f000 fc63 	bl	8007cf4 <__mdiff>
 800742e:	68c2      	ldr	r2, [r0, #12]
 8007430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007432:	4606      	mov	r6, r0
 8007434:	bb02      	cbnz	r2, 8007478 <_dtoa_r+0xa40>
 8007436:	4601      	mov	r1, r0
 8007438:	9802      	ldr	r0, [sp, #8]
 800743a:	f000 fc3f 	bl	8007cbc <__mcmp>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	4602      	mov	r2, r0
 8007442:	4631      	mov	r1, r6
 8007444:	4648      	mov	r0, r9
 8007446:	920c      	str	r2, [sp, #48]	@ 0x30
 8007448:	9309      	str	r3, [sp, #36]	@ 0x24
 800744a:	f000 fa05 	bl	8007858 <_Bfree>
 800744e:	9b07      	ldr	r3, [sp, #28]
 8007450:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007452:	9e00      	ldr	r6, [sp, #0]
 8007454:	ea42 0103 	orr.w	r1, r2, r3
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	4319      	orrs	r1, r3
 800745c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745e:	d10d      	bne.n	800747c <_dtoa_r+0xa44>
 8007460:	2b39      	cmp	r3, #57	@ 0x39
 8007462:	d027      	beq.n	80074b4 <_dtoa_r+0xa7c>
 8007464:	9a04      	ldr	r2, [sp, #16]
 8007466:	2a00      	cmp	r2, #0
 8007468:	dd01      	ble.n	800746e <_dtoa_r+0xa36>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	3331      	adds	r3, #49	@ 0x31
 800746e:	f88b 3000 	strb.w	r3, [fp]
 8007472:	e52e      	b.n	8006ed2 <_dtoa_r+0x49a>
 8007474:	4628      	mov	r0, r5
 8007476:	e7b9      	b.n	80073ec <_dtoa_r+0x9b4>
 8007478:	2201      	movs	r2, #1
 800747a:	e7e2      	b.n	8007442 <_dtoa_r+0xa0a>
 800747c:	9904      	ldr	r1, [sp, #16]
 800747e:	2900      	cmp	r1, #0
 8007480:	db04      	blt.n	800748c <_dtoa_r+0xa54>
 8007482:	9807      	ldr	r0, [sp, #28]
 8007484:	4301      	orrs	r1, r0
 8007486:	9806      	ldr	r0, [sp, #24]
 8007488:	4301      	orrs	r1, r0
 800748a:	d120      	bne.n	80074ce <_dtoa_r+0xa96>
 800748c:	2a00      	cmp	r2, #0
 800748e:	ddee      	ble.n	800746e <_dtoa_r+0xa36>
 8007490:	9902      	ldr	r1, [sp, #8]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2201      	movs	r2, #1
 8007496:	4648      	mov	r0, r9
 8007498:	f000 fba4 	bl	8007be4 <__lshift>
 800749c:	4621      	mov	r1, r4
 800749e:	9002      	str	r0, [sp, #8]
 80074a0:	f000 fc0c 	bl	8007cbc <__mcmp>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	9b00      	ldr	r3, [sp, #0]
 80074a8:	dc02      	bgt.n	80074b0 <_dtoa_r+0xa78>
 80074aa:	d1e0      	bne.n	800746e <_dtoa_r+0xa36>
 80074ac:	07da      	lsls	r2, r3, #31
 80074ae:	d5de      	bpl.n	800746e <_dtoa_r+0xa36>
 80074b0:	2b39      	cmp	r3, #57	@ 0x39
 80074b2:	d1da      	bne.n	800746a <_dtoa_r+0xa32>
 80074b4:	2339      	movs	r3, #57	@ 0x39
 80074b6:	f88b 3000 	strb.w	r3, [fp]
 80074ba:	4633      	mov	r3, r6
 80074bc:	461e      	mov	r6, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074c4:	2a39      	cmp	r2, #57	@ 0x39
 80074c6:	d04e      	beq.n	8007566 <_dtoa_r+0xb2e>
 80074c8:	3201      	adds	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	e501      	b.n	8006ed2 <_dtoa_r+0x49a>
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	dd03      	ble.n	80074da <_dtoa_r+0xaa2>
 80074d2:	2b39      	cmp	r3, #57	@ 0x39
 80074d4:	d0ee      	beq.n	80074b4 <_dtoa_r+0xa7c>
 80074d6:	3301      	adds	r3, #1
 80074d8:	e7c9      	b.n	800746e <_dtoa_r+0xa36>
 80074da:	9a00      	ldr	r2, [sp, #0]
 80074dc:	9908      	ldr	r1, [sp, #32]
 80074de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074e2:	428a      	cmp	r2, r1
 80074e4:	d028      	beq.n	8007538 <_dtoa_r+0xb00>
 80074e6:	9902      	ldr	r1, [sp, #8]
 80074e8:	2300      	movs	r3, #0
 80074ea:	220a      	movs	r2, #10
 80074ec:	4648      	mov	r0, r9
 80074ee:	f000 f9d5 	bl	800789c <__multadd>
 80074f2:	42af      	cmp	r7, r5
 80074f4:	9002      	str	r0, [sp, #8]
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	f04f 020a 	mov.w	r2, #10
 80074fe:	4639      	mov	r1, r7
 8007500:	4648      	mov	r0, r9
 8007502:	d107      	bne.n	8007514 <_dtoa_r+0xadc>
 8007504:	f000 f9ca 	bl	800789c <__multadd>
 8007508:	4607      	mov	r7, r0
 800750a:	4605      	mov	r5, r0
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	3301      	adds	r3, #1
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	e777      	b.n	8007404 <_dtoa_r+0x9cc>
 8007514:	f000 f9c2 	bl	800789c <__multadd>
 8007518:	4629      	mov	r1, r5
 800751a:	4607      	mov	r7, r0
 800751c:	2300      	movs	r3, #0
 800751e:	220a      	movs	r2, #10
 8007520:	4648      	mov	r0, r9
 8007522:	f000 f9bb 	bl	800789c <__multadd>
 8007526:	4605      	mov	r5, r0
 8007528:	e7f0      	b.n	800750c <_dtoa_r+0xad4>
 800752a:	f1bb 0f00 	cmp.w	fp, #0
 800752e:	bfcc      	ite	gt
 8007530:	465e      	movgt	r6, fp
 8007532:	2601      	movle	r6, #1
 8007534:	4456      	add	r6, sl
 8007536:	2700      	movs	r7, #0
 8007538:	9902      	ldr	r1, [sp, #8]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	2201      	movs	r2, #1
 800753e:	4648      	mov	r0, r9
 8007540:	f000 fb50 	bl	8007be4 <__lshift>
 8007544:	4621      	mov	r1, r4
 8007546:	9002      	str	r0, [sp, #8]
 8007548:	f000 fbb8 	bl	8007cbc <__mcmp>
 800754c:	2800      	cmp	r0, #0
 800754e:	dcb4      	bgt.n	80074ba <_dtoa_r+0xa82>
 8007550:	d102      	bne.n	8007558 <_dtoa_r+0xb20>
 8007552:	9b00      	ldr	r3, [sp, #0]
 8007554:	07db      	lsls	r3, r3, #31
 8007556:	d4b0      	bmi.n	80074ba <_dtoa_r+0xa82>
 8007558:	4633      	mov	r3, r6
 800755a:	461e      	mov	r6, r3
 800755c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007560:	2a30      	cmp	r2, #48	@ 0x30
 8007562:	d0fa      	beq.n	800755a <_dtoa_r+0xb22>
 8007564:	e4b5      	b.n	8006ed2 <_dtoa_r+0x49a>
 8007566:	459a      	cmp	sl, r3
 8007568:	d1a8      	bne.n	80074bc <_dtoa_r+0xa84>
 800756a:	2331      	movs	r3, #49	@ 0x31
 800756c:	f108 0801 	add.w	r8, r8, #1
 8007570:	f88a 3000 	strb.w	r3, [sl]
 8007574:	e4ad      	b.n	8006ed2 <_dtoa_r+0x49a>
 8007576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007578:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80075d4 <_dtoa_r+0xb9c>
 800757c:	b11b      	cbz	r3, 8007586 <_dtoa_r+0xb4e>
 800757e:	f10a 0308 	add.w	r3, sl, #8
 8007582:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	4650      	mov	r0, sl
 8007588:	b017      	add	sp, #92	@ 0x5c
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	9b07      	ldr	r3, [sp, #28]
 8007590:	2b01      	cmp	r3, #1
 8007592:	f77f ae2e 	ble.w	80071f2 <_dtoa_r+0x7ba>
 8007596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007598:	9308      	str	r3, [sp, #32]
 800759a:	2001      	movs	r0, #1
 800759c:	e64d      	b.n	800723a <_dtoa_r+0x802>
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	f77f aed9 	ble.w	8007358 <_dtoa_r+0x920>
 80075a6:	4656      	mov	r6, sl
 80075a8:	9802      	ldr	r0, [sp, #8]
 80075aa:	4621      	mov	r1, r4
 80075ac:	f7ff f9b9 	bl	8006922 <quorem>
 80075b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80075b4:	f806 3b01 	strb.w	r3, [r6], #1
 80075b8:	eba6 020a 	sub.w	r2, r6, sl
 80075bc:	4593      	cmp	fp, r2
 80075be:	ddb4      	ble.n	800752a <_dtoa_r+0xaf2>
 80075c0:	9902      	ldr	r1, [sp, #8]
 80075c2:	2300      	movs	r3, #0
 80075c4:	220a      	movs	r2, #10
 80075c6:	4648      	mov	r0, r9
 80075c8:	f000 f968 	bl	800789c <__multadd>
 80075cc:	9002      	str	r0, [sp, #8]
 80075ce:	e7eb      	b.n	80075a8 <_dtoa_r+0xb70>
 80075d0:	08008724 	.word	0x08008724
 80075d4:	080086a8 	.word	0x080086a8

080075d8 <_free_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4605      	mov	r5, r0
 80075dc:	2900      	cmp	r1, #0
 80075de:	d041      	beq.n	8007664 <_free_r+0x8c>
 80075e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e4:	1f0c      	subs	r4, r1, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bfb8      	it	lt
 80075ea:	18e4      	addlt	r4, r4, r3
 80075ec:	f000 f8e8 	bl	80077c0 <__malloc_lock>
 80075f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007668 <_free_r+0x90>)
 80075f2:	6813      	ldr	r3, [r2, #0]
 80075f4:	b933      	cbnz	r3, 8007604 <_free_r+0x2c>
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	6014      	str	r4, [r2, #0]
 80075fa:	4628      	mov	r0, r5
 80075fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007600:	f000 b8e4 	b.w	80077cc <__malloc_unlock>
 8007604:	42a3      	cmp	r3, r4
 8007606:	d908      	bls.n	800761a <_free_r+0x42>
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	1821      	adds	r1, r4, r0
 800760c:	428b      	cmp	r3, r1
 800760e:	bf01      	itttt	eq
 8007610:	6819      	ldreq	r1, [r3, #0]
 8007612:	685b      	ldreq	r3, [r3, #4]
 8007614:	1809      	addeq	r1, r1, r0
 8007616:	6021      	streq	r1, [r4, #0]
 8007618:	e7ed      	b.n	80075f6 <_free_r+0x1e>
 800761a:	461a      	mov	r2, r3
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b10b      	cbz	r3, 8007624 <_free_r+0x4c>
 8007620:	42a3      	cmp	r3, r4
 8007622:	d9fa      	bls.n	800761a <_free_r+0x42>
 8007624:	6811      	ldr	r1, [r2, #0]
 8007626:	1850      	adds	r0, r2, r1
 8007628:	42a0      	cmp	r0, r4
 800762a:	d10b      	bne.n	8007644 <_free_r+0x6c>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	4401      	add	r1, r0
 8007630:	1850      	adds	r0, r2, r1
 8007632:	4283      	cmp	r3, r0
 8007634:	6011      	str	r1, [r2, #0]
 8007636:	d1e0      	bne.n	80075fa <_free_r+0x22>
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	6053      	str	r3, [r2, #4]
 800763e:	4408      	add	r0, r1
 8007640:	6010      	str	r0, [r2, #0]
 8007642:	e7da      	b.n	80075fa <_free_r+0x22>
 8007644:	d902      	bls.n	800764c <_free_r+0x74>
 8007646:	230c      	movs	r3, #12
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	e7d6      	b.n	80075fa <_free_r+0x22>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	1821      	adds	r1, r4, r0
 8007650:	428b      	cmp	r3, r1
 8007652:	bf04      	itt	eq
 8007654:	6819      	ldreq	r1, [r3, #0]
 8007656:	685b      	ldreq	r3, [r3, #4]
 8007658:	6063      	str	r3, [r4, #4]
 800765a:	bf04      	itt	eq
 800765c:	1809      	addeq	r1, r1, r0
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	6054      	str	r4, [r2, #4]
 8007662:	e7ca      	b.n	80075fa <_free_r+0x22>
 8007664:	bd38      	pop	{r3, r4, r5, pc}
 8007666:	bf00      	nop
 8007668:	2000058c 	.word	0x2000058c

0800766c <malloc>:
 800766c:	4b02      	ldr	r3, [pc, #8]	@ (8007678 <malloc+0xc>)
 800766e:	4601      	mov	r1, r0
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	f000 b825 	b.w	80076c0 <_malloc_r>
 8007676:	bf00      	nop
 8007678:	20000028 	.word	0x20000028

0800767c <sbrk_aligned>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4e0f      	ldr	r6, [pc, #60]	@ (80076bc <sbrk_aligned+0x40>)
 8007680:	460c      	mov	r4, r1
 8007682:	6831      	ldr	r1, [r6, #0]
 8007684:	4605      	mov	r5, r0
 8007686:	b911      	cbnz	r1, 800768e <sbrk_aligned+0x12>
 8007688:	f000 fe92 	bl	80083b0 <_sbrk_r>
 800768c:	6030      	str	r0, [r6, #0]
 800768e:	4621      	mov	r1, r4
 8007690:	4628      	mov	r0, r5
 8007692:	f000 fe8d 	bl	80083b0 <_sbrk_r>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	d103      	bne.n	80076a2 <sbrk_aligned+0x26>
 800769a:	f04f 34ff 	mov.w	r4, #4294967295
 800769e:	4620      	mov	r0, r4
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	1cc4      	adds	r4, r0, #3
 80076a4:	f024 0403 	bic.w	r4, r4, #3
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d0f8      	beq.n	800769e <sbrk_aligned+0x22>
 80076ac:	1a21      	subs	r1, r4, r0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fe7e 	bl	80083b0 <_sbrk_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d1f2      	bne.n	800769e <sbrk_aligned+0x22>
 80076b8:	e7ef      	b.n	800769a <sbrk_aligned+0x1e>
 80076ba:	bf00      	nop
 80076bc:	20000588 	.word	0x20000588

080076c0 <_malloc_r>:
 80076c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c4:	1ccd      	adds	r5, r1, #3
 80076c6:	f025 0503 	bic.w	r5, r5, #3
 80076ca:	3508      	adds	r5, #8
 80076cc:	2d0c      	cmp	r5, #12
 80076ce:	bf38      	it	cc
 80076d0:	250c      	movcc	r5, #12
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	4606      	mov	r6, r0
 80076d6:	db01      	blt.n	80076dc <_malloc_r+0x1c>
 80076d8:	42a9      	cmp	r1, r5
 80076da:	d904      	bls.n	80076e6 <_malloc_r+0x26>
 80076dc:	230c      	movs	r3, #12
 80076de:	6033      	str	r3, [r6, #0]
 80076e0:	2000      	movs	r0, #0
 80076e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077bc <_malloc_r+0xfc>
 80076ea:	f000 f869 	bl	80077c0 <__malloc_lock>
 80076ee:	f8d8 3000 	ldr.w	r3, [r8]
 80076f2:	461c      	mov	r4, r3
 80076f4:	bb44      	cbnz	r4, 8007748 <_malloc_r+0x88>
 80076f6:	4629      	mov	r1, r5
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff ffbf 	bl	800767c <sbrk_aligned>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	4604      	mov	r4, r0
 8007702:	d158      	bne.n	80077b6 <_malloc_r+0xf6>
 8007704:	f8d8 4000 	ldr.w	r4, [r8]
 8007708:	4627      	mov	r7, r4
 800770a:	2f00      	cmp	r7, #0
 800770c:	d143      	bne.n	8007796 <_malloc_r+0xd6>
 800770e:	2c00      	cmp	r4, #0
 8007710:	d04b      	beq.n	80077aa <_malloc_r+0xea>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	4639      	mov	r1, r7
 8007716:	4630      	mov	r0, r6
 8007718:	eb04 0903 	add.w	r9, r4, r3
 800771c:	f000 fe48 	bl	80083b0 <_sbrk_r>
 8007720:	4581      	cmp	r9, r0
 8007722:	d142      	bne.n	80077aa <_malloc_r+0xea>
 8007724:	6821      	ldr	r1, [r4, #0]
 8007726:	1a6d      	subs	r5, r5, r1
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ffa6 	bl	800767c <sbrk_aligned>
 8007730:	3001      	adds	r0, #1
 8007732:	d03a      	beq.n	80077aa <_malloc_r+0xea>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	442b      	add	r3, r5
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	f8d8 3000 	ldr.w	r3, [r8]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	bb62      	cbnz	r2, 800779c <_malloc_r+0xdc>
 8007742:	f8c8 7000 	str.w	r7, [r8]
 8007746:	e00f      	b.n	8007768 <_malloc_r+0xa8>
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	1b52      	subs	r2, r2, r5
 800774c:	d420      	bmi.n	8007790 <_malloc_r+0xd0>
 800774e:	2a0b      	cmp	r2, #11
 8007750:	d917      	bls.n	8007782 <_malloc_r+0xc2>
 8007752:	1961      	adds	r1, r4, r5
 8007754:	42a3      	cmp	r3, r4
 8007756:	6025      	str	r5, [r4, #0]
 8007758:	bf18      	it	ne
 800775a:	6059      	strne	r1, [r3, #4]
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	bf08      	it	eq
 8007760:	f8c8 1000 	streq.w	r1, [r8]
 8007764:	5162      	str	r2, [r4, r5]
 8007766:	604b      	str	r3, [r1, #4]
 8007768:	4630      	mov	r0, r6
 800776a:	f000 f82f 	bl	80077cc <__malloc_unlock>
 800776e:	f104 000b 	add.w	r0, r4, #11
 8007772:	1d23      	adds	r3, r4, #4
 8007774:	f020 0007 	bic.w	r0, r0, #7
 8007778:	1ac2      	subs	r2, r0, r3
 800777a:	bf1c      	itt	ne
 800777c:	1a1b      	subne	r3, r3, r0
 800777e:	50a3      	strne	r3, [r4, r2]
 8007780:	e7af      	b.n	80076e2 <_malloc_r+0x22>
 8007782:	6862      	ldr	r2, [r4, #4]
 8007784:	42a3      	cmp	r3, r4
 8007786:	bf0c      	ite	eq
 8007788:	f8c8 2000 	streq.w	r2, [r8]
 800778c:	605a      	strne	r2, [r3, #4]
 800778e:	e7eb      	b.n	8007768 <_malloc_r+0xa8>
 8007790:	4623      	mov	r3, r4
 8007792:	6864      	ldr	r4, [r4, #4]
 8007794:	e7ae      	b.n	80076f4 <_malloc_r+0x34>
 8007796:	463c      	mov	r4, r7
 8007798:	687f      	ldr	r7, [r7, #4]
 800779a:	e7b6      	b.n	800770a <_malloc_r+0x4a>
 800779c:	461a      	mov	r2, r3
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d1fb      	bne.n	800779c <_malloc_r+0xdc>
 80077a4:	2300      	movs	r3, #0
 80077a6:	6053      	str	r3, [r2, #4]
 80077a8:	e7de      	b.n	8007768 <_malloc_r+0xa8>
 80077aa:	230c      	movs	r3, #12
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	4630      	mov	r0, r6
 80077b0:	f000 f80c 	bl	80077cc <__malloc_unlock>
 80077b4:	e794      	b.n	80076e0 <_malloc_r+0x20>
 80077b6:	6005      	str	r5, [r0, #0]
 80077b8:	e7d6      	b.n	8007768 <_malloc_r+0xa8>
 80077ba:	bf00      	nop
 80077bc:	2000058c 	.word	0x2000058c

080077c0 <__malloc_lock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	@ (80077c8 <__malloc_lock+0x8>)
 80077c2:	f7ff b8ac 	b.w	800691e <__retarget_lock_acquire_recursive>
 80077c6:	bf00      	nop
 80077c8:	20000584 	.word	0x20000584

080077cc <__malloc_unlock>:
 80077cc:	4801      	ldr	r0, [pc, #4]	@ (80077d4 <__malloc_unlock+0x8>)
 80077ce:	f7ff b8a7 	b.w	8006920 <__retarget_lock_release_recursive>
 80077d2:	bf00      	nop
 80077d4:	20000584 	.word	0x20000584

080077d8 <_Balloc>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	69c6      	ldr	r6, [r0, #28]
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	b976      	cbnz	r6, 8007800 <_Balloc+0x28>
 80077e2:	2010      	movs	r0, #16
 80077e4:	f7ff ff42 	bl	800766c <malloc>
 80077e8:	4602      	mov	r2, r0
 80077ea:	61e0      	str	r0, [r4, #28]
 80077ec:	b920      	cbnz	r0, 80077f8 <_Balloc+0x20>
 80077ee:	4b18      	ldr	r3, [pc, #96]	@ (8007850 <_Balloc+0x78>)
 80077f0:	4818      	ldr	r0, [pc, #96]	@ (8007854 <_Balloc+0x7c>)
 80077f2:	216b      	movs	r1, #107	@ 0x6b
 80077f4:	f000 fdfa 	bl	80083ec <__assert_func>
 80077f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077fc:	6006      	str	r6, [r0, #0]
 80077fe:	60c6      	str	r6, [r0, #12]
 8007800:	69e6      	ldr	r6, [r4, #28]
 8007802:	68f3      	ldr	r3, [r6, #12]
 8007804:	b183      	cbz	r3, 8007828 <_Balloc+0x50>
 8007806:	69e3      	ldr	r3, [r4, #28]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800780e:	b9b8      	cbnz	r0, 8007840 <_Balloc+0x68>
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f605 	lsl.w	r6, r1, r5
 8007816:	1d72      	adds	r2, r6, #5
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fe04 	bl	8008428 <_calloc_r>
 8007820:	b160      	cbz	r0, 800783c <_Balloc+0x64>
 8007822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007826:	e00e      	b.n	8007846 <_Balloc+0x6e>
 8007828:	2221      	movs	r2, #33	@ 0x21
 800782a:	2104      	movs	r1, #4
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fdfb 	bl	8008428 <_calloc_r>
 8007832:	69e3      	ldr	r3, [r4, #28]
 8007834:	60f0      	str	r0, [r6, #12]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e4      	bne.n	8007806 <_Balloc+0x2e>
 800783c:	2000      	movs	r0, #0
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	6802      	ldr	r2, [r0, #0]
 8007842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007846:	2300      	movs	r3, #0
 8007848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800784c:	e7f7      	b.n	800783e <_Balloc+0x66>
 800784e:	bf00      	nop
 8007850:	080086b5 	.word	0x080086b5
 8007854:	08008735 	.word	0x08008735

08007858 <_Bfree>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	69c6      	ldr	r6, [r0, #28]
 800785c:	4605      	mov	r5, r0
 800785e:	460c      	mov	r4, r1
 8007860:	b976      	cbnz	r6, 8007880 <_Bfree+0x28>
 8007862:	2010      	movs	r0, #16
 8007864:	f7ff ff02 	bl	800766c <malloc>
 8007868:	4602      	mov	r2, r0
 800786a:	61e8      	str	r0, [r5, #28]
 800786c:	b920      	cbnz	r0, 8007878 <_Bfree+0x20>
 800786e:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <_Bfree+0x3c>)
 8007870:	4809      	ldr	r0, [pc, #36]	@ (8007898 <_Bfree+0x40>)
 8007872:	218f      	movs	r1, #143	@ 0x8f
 8007874:	f000 fdba 	bl	80083ec <__assert_func>
 8007878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800787c:	6006      	str	r6, [r0, #0]
 800787e:	60c6      	str	r6, [r0, #12]
 8007880:	b13c      	cbz	r4, 8007892 <_Bfree+0x3a>
 8007882:	69eb      	ldr	r3, [r5, #28]
 8007884:	6862      	ldr	r2, [r4, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800788c:	6021      	str	r1, [r4, #0]
 800788e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	080086b5 	.word	0x080086b5
 8007898:	08008735 	.word	0x08008735

0800789c <__multadd>:
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	690d      	ldr	r5, [r1, #16]
 80078a2:	4607      	mov	r7, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	461e      	mov	r6, r3
 80078a8:	f101 0c14 	add.w	ip, r1, #20
 80078ac:	2000      	movs	r0, #0
 80078ae:	f8dc 3000 	ldr.w	r3, [ip]
 80078b2:	b299      	uxth	r1, r3
 80078b4:	fb02 6101 	mla	r1, r2, r1, r6
 80078b8:	0c1e      	lsrs	r6, r3, #16
 80078ba:	0c0b      	lsrs	r3, r1, #16
 80078bc:	fb02 3306 	mla	r3, r2, r6, r3
 80078c0:	b289      	uxth	r1, r1
 80078c2:	3001      	adds	r0, #1
 80078c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078c8:	4285      	cmp	r5, r0
 80078ca:	f84c 1b04 	str.w	r1, [ip], #4
 80078ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078d2:	dcec      	bgt.n	80078ae <__multadd+0x12>
 80078d4:	b30e      	cbz	r6, 800791a <__multadd+0x7e>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc19      	bgt.n	8007910 <__multadd+0x74>
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	4638      	mov	r0, r7
 80078e0:	3101      	adds	r1, #1
 80078e2:	f7ff ff79 	bl	80077d8 <_Balloc>
 80078e6:	4680      	mov	r8, r0
 80078e8:	b928      	cbnz	r0, 80078f6 <__multadd+0x5a>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007920 <__multadd+0x84>)
 80078ee:	480d      	ldr	r0, [pc, #52]	@ (8007924 <__multadd+0x88>)
 80078f0:	21ba      	movs	r1, #186	@ 0xba
 80078f2:	f000 fd7b 	bl	80083ec <__assert_func>
 80078f6:	6922      	ldr	r2, [r4, #16]
 80078f8:	3202      	adds	r2, #2
 80078fa:	f104 010c 	add.w	r1, r4, #12
 80078fe:	0092      	lsls	r2, r2, #2
 8007900:	300c      	adds	r0, #12
 8007902:	f000 fd65 	bl	80083d0 <memcpy>
 8007906:	4621      	mov	r1, r4
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff ffa5 	bl	8007858 <_Bfree>
 800790e:	4644      	mov	r4, r8
 8007910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007914:	3501      	adds	r5, #1
 8007916:	615e      	str	r6, [r3, #20]
 8007918:	6125      	str	r5, [r4, #16]
 800791a:	4620      	mov	r0, r4
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	08008724 	.word	0x08008724
 8007924:	08008735 	.word	0x08008735

08007928 <__hi0bits>:
 8007928:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800792c:	4603      	mov	r3, r0
 800792e:	bf36      	itet	cc
 8007930:	0403      	lslcc	r3, r0, #16
 8007932:	2000      	movcs	r0, #0
 8007934:	2010      	movcc	r0, #16
 8007936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800793a:	bf3c      	itt	cc
 800793c:	021b      	lslcc	r3, r3, #8
 800793e:	3008      	addcc	r0, #8
 8007940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007944:	bf3c      	itt	cc
 8007946:	011b      	lslcc	r3, r3, #4
 8007948:	3004      	addcc	r0, #4
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794e:	bf3c      	itt	cc
 8007950:	009b      	lslcc	r3, r3, #2
 8007952:	3002      	addcc	r0, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	db05      	blt.n	8007964 <__hi0bits+0x3c>
 8007958:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800795c:	f100 0001 	add.w	r0, r0, #1
 8007960:	bf08      	it	eq
 8007962:	2020      	moveq	r0, #32
 8007964:	4770      	bx	lr

08007966 <__lo0bits>:
 8007966:	6803      	ldr	r3, [r0, #0]
 8007968:	4602      	mov	r2, r0
 800796a:	f013 0007 	ands.w	r0, r3, #7
 800796e:	d00b      	beq.n	8007988 <__lo0bits+0x22>
 8007970:	07d9      	lsls	r1, r3, #31
 8007972:	d421      	bmi.n	80079b8 <__lo0bits+0x52>
 8007974:	0798      	lsls	r0, r3, #30
 8007976:	bf49      	itett	mi
 8007978:	085b      	lsrmi	r3, r3, #1
 800797a:	089b      	lsrpl	r3, r3, #2
 800797c:	2001      	movmi	r0, #1
 800797e:	6013      	strmi	r3, [r2, #0]
 8007980:	bf5c      	itt	pl
 8007982:	6013      	strpl	r3, [r2, #0]
 8007984:	2002      	movpl	r0, #2
 8007986:	4770      	bx	lr
 8007988:	b299      	uxth	r1, r3
 800798a:	b909      	cbnz	r1, 8007990 <__lo0bits+0x2a>
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	2010      	movs	r0, #16
 8007990:	b2d9      	uxtb	r1, r3
 8007992:	b909      	cbnz	r1, 8007998 <__lo0bits+0x32>
 8007994:	3008      	adds	r0, #8
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	0719      	lsls	r1, r3, #28
 800799a:	bf04      	itt	eq
 800799c:	091b      	lsreq	r3, r3, #4
 800799e:	3004      	addeq	r0, #4
 80079a0:	0799      	lsls	r1, r3, #30
 80079a2:	bf04      	itt	eq
 80079a4:	089b      	lsreq	r3, r3, #2
 80079a6:	3002      	addeq	r0, #2
 80079a8:	07d9      	lsls	r1, r3, #31
 80079aa:	d403      	bmi.n	80079b4 <__lo0bits+0x4e>
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	f100 0001 	add.w	r0, r0, #1
 80079b2:	d003      	beq.n	80079bc <__lo0bits+0x56>
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	4770      	bx	lr
 80079b8:	2000      	movs	r0, #0
 80079ba:	4770      	bx	lr
 80079bc:	2020      	movs	r0, #32
 80079be:	4770      	bx	lr

080079c0 <__i2b>:
 80079c0:	b510      	push	{r4, lr}
 80079c2:	460c      	mov	r4, r1
 80079c4:	2101      	movs	r1, #1
 80079c6:	f7ff ff07 	bl	80077d8 <_Balloc>
 80079ca:	4602      	mov	r2, r0
 80079cc:	b928      	cbnz	r0, 80079da <__i2b+0x1a>
 80079ce:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <__i2b+0x24>)
 80079d0:	4805      	ldr	r0, [pc, #20]	@ (80079e8 <__i2b+0x28>)
 80079d2:	f240 1145 	movw	r1, #325	@ 0x145
 80079d6:	f000 fd09 	bl	80083ec <__assert_func>
 80079da:	2301      	movs	r3, #1
 80079dc:	6144      	str	r4, [r0, #20]
 80079de:	6103      	str	r3, [r0, #16]
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	08008724 	.word	0x08008724
 80079e8:	08008735 	.word	0x08008735

080079ec <__multiply>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	4617      	mov	r7, r2
 80079f2:	690a      	ldr	r2, [r1, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	bfa8      	it	ge
 80079fa:	463b      	movge	r3, r7
 80079fc:	4689      	mov	r9, r1
 80079fe:	bfa4      	itt	ge
 8007a00:	460f      	movge	r7, r1
 8007a02:	4699      	movge	r9, r3
 8007a04:	693d      	ldr	r5, [r7, #16]
 8007a06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	eb05 060a 	add.w	r6, r5, sl
 8007a12:	42b3      	cmp	r3, r6
 8007a14:	b085      	sub	sp, #20
 8007a16:	bfb8      	it	lt
 8007a18:	3101      	addlt	r1, #1
 8007a1a:	f7ff fedd 	bl	80077d8 <_Balloc>
 8007a1e:	b930      	cbnz	r0, 8007a2e <__multiply+0x42>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b41      	ldr	r3, [pc, #260]	@ (8007b28 <__multiply+0x13c>)
 8007a24:	4841      	ldr	r0, [pc, #260]	@ (8007b2c <__multiply+0x140>)
 8007a26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a2a:	f000 fcdf 	bl	80083ec <__assert_func>
 8007a2e:	f100 0414 	add.w	r4, r0, #20
 8007a32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a36:	4623      	mov	r3, r4
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4573      	cmp	r3, lr
 8007a3c:	d320      	bcc.n	8007a80 <__multiply+0x94>
 8007a3e:	f107 0814 	add.w	r8, r7, #20
 8007a42:	f109 0114 	add.w	r1, r9, #20
 8007a46:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a4a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a4e:	9302      	str	r3, [sp, #8]
 8007a50:	1beb      	subs	r3, r5, r7
 8007a52:	3b15      	subs	r3, #21
 8007a54:	f023 0303 	bic.w	r3, r3, #3
 8007a58:	3304      	adds	r3, #4
 8007a5a:	3715      	adds	r7, #21
 8007a5c:	42bd      	cmp	r5, r7
 8007a5e:	bf38      	it	cc
 8007a60:	2304      	movcc	r3, #4
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	9b02      	ldr	r3, [sp, #8]
 8007a66:	9103      	str	r1, [sp, #12]
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	d80c      	bhi.n	8007a86 <__multiply+0x9a>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	dd03      	ble.n	8007a78 <__multiply+0x8c>
 8007a70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d055      	beq.n	8007b24 <__multiply+0x138>
 8007a78:	6106      	str	r6, [r0, #16]
 8007a7a:	b005      	add	sp, #20
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	f843 2b04 	str.w	r2, [r3], #4
 8007a84:	e7d9      	b.n	8007a3a <__multiply+0x4e>
 8007a86:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a8a:	f1ba 0f00 	cmp.w	sl, #0
 8007a8e:	d01f      	beq.n	8007ad0 <__multiply+0xe4>
 8007a90:	46c4      	mov	ip, r8
 8007a92:	46a1      	mov	r9, r4
 8007a94:	2700      	movs	r7, #0
 8007a96:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007a9e:	fa1f fb82 	uxth.w	fp, r2
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aa8:	443b      	add	r3, r7
 8007aaa:	f8d9 7000 	ldr.w	r7, [r9]
 8007aae:	0c12      	lsrs	r2, r2, #16
 8007ab0:	0c3f      	lsrs	r7, r7, #16
 8007ab2:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ab6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac0:	4565      	cmp	r5, ip
 8007ac2:	f849 3b04 	str.w	r3, [r9], #4
 8007ac6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007aca:	d8e4      	bhi.n	8007a96 <__multiply+0xaa>
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	50e7      	str	r7, [r4, r3]
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ad6:	3104      	adds	r1, #4
 8007ad8:	f1b9 0f00 	cmp.w	r9, #0
 8007adc:	d020      	beq.n	8007b20 <__multiply+0x134>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	4647      	mov	r7, r8
 8007ae2:	46a4      	mov	ip, r4
 8007ae4:	f04f 0a00 	mov.w	sl, #0
 8007ae8:	f8b7 b000 	ldrh.w	fp, [r7]
 8007aec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007af0:	fb09 220b 	mla	r2, r9, fp, r2
 8007af4:	4452      	add	r2, sl
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afc:	f84c 3b04 	str.w	r3, [ip], #4
 8007b00:	f857 3b04 	ldr.w	r3, [r7], #4
 8007b04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b08:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b0c:	fb09 330a 	mla	r3, r9, sl, r3
 8007b10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b14:	42bd      	cmp	r5, r7
 8007b16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b1a:	d8e5      	bhi.n	8007ae8 <__multiply+0xfc>
 8007b1c:	9a01      	ldr	r2, [sp, #4]
 8007b1e:	50a3      	str	r3, [r4, r2]
 8007b20:	3404      	adds	r4, #4
 8007b22:	e79f      	b.n	8007a64 <__multiply+0x78>
 8007b24:	3e01      	subs	r6, #1
 8007b26:	e7a1      	b.n	8007a6c <__multiply+0x80>
 8007b28:	08008724 	.word	0x08008724
 8007b2c:	08008735 	.word	0x08008735

08007b30 <__pow5mult>:
 8007b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b34:	4615      	mov	r5, r2
 8007b36:	f012 0203 	ands.w	r2, r2, #3
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	460e      	mov	r6, r1
 8007b3e:	d007      	beq.n	8007b50 <__pow5mult+0x20>
 8007b40:	4c25      	ldr	r4, [pc, #148]	@ (8007bd8 <__pow5mult+0xa8>)
 8007b42:	3a01      	subs	r2, #1
 8007b44:	2300      	movs	r3, #0
 8007b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b4a:	f7ff fea7 	bl	800789c <__multadd>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	10ad      	asrs	r5, r5, #2
 8007b52:	d03d      	beq.n	8007bd0 <__pow5mult+0xa0>
 8007b54:	69fc      	ldr	r4, [r7, #28]
 8007b56:	b97c      	cbnz	r4, 8007b78 <__pow5mult+0x48>
 8007b58:	2010      	movs	r0, #16
 8007b5a:	f7ff fd87 	bl	800766c <malloc>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	61f8      	str	r0, [r7, #28]
 8007b62:	b928      	cbnz	r0, 8007b70 <__pow5mult+0x40>
 8007b64:	4b1d      	ldr	r3, [pc, #116]	@ (8007bdc <__pow5mult+0xac>)
 8007b66:	481e      	ldr	r0, [pc, #120]	@ (8007be0 <__pow5mult+0xb0>)
 8007b68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b6c:	f000 fc3e 	bl	80083ec <__assert_func>
 8007b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b74:	6004      	str	r4, [r0, #0]
 8007b76:	60c4      	str	r4, [r0, #12]
 8007b78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b80:	b94c      	cbnz	r4, 8007b96 <__pow5mult+0x66>
 8007b82:	f240 2171 	movw	r1, #625	@ 0x271
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7ff ff1a 	bl	80079c0 <__i2b>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b92:	4604      	mov	r4, r0
 8007b94:	6003      	str	r3, [r0, #0]
 8007b96:	f04f 0900 	mov.w	r9, #0
 8007b9a:	07eb      	lsls	r3, r5, #31
 8007b9c:	d50a      	bpl.n	8007bb4 <__pow5mult+0x84>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f7ff ff22 	bl	80079ec <__multiply>
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4680      	mov	r8, r0
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff fe53 	bl	8007858 <_Bfree>
 8007bb2:	4646      	mov	r6, r8
 8007bb4:	106d      	asrs	r5, r5, #1
 8007bb6:	d00b      	beq.n	8007bd0 <__pow5mult+0xa0>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	b938      	cbnz	r0, 8007bcc <__pow5mult+0x9c>
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff ff13 	bl	80079ec <__multiply>
 8007bc6:	6020      	str	r0, [r4, #0]
 8007bc8:	f8c0 9000 	str.w	r9, [r0]
 8007bcc:	4604      	mov	r4, r0
 8007bce:	e7e4      	b.n	8007b9a <__pow5mult+0x6a>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd6:	bf00      	nop
 8007bd8:	080087e8 	.word	0x080087e8
 8007bdc:	080086b5 	.word	0x080086b5
 8007be0:	08008735 	.word	0x08008735

08007be4 <__lshift>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	460c      	mov	r4, r1
 8007bea:	6849      	ldr	r1, [r1, #4]
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bf2:	68a3      	ldr	r3, [r4, #8]
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	4691      	mov	r9, r2
 8007bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bfc:	f108 0601 	add.w	r6, r8, #1
 8007c00:	42b3      	cmp	r3, r6
 8007c02:	db0b      	blt.n	8007c1c <__lshift+0x38>
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff fde7 	bl	80077d8 <_Balloc>
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	b948      	cbnz	r0, 8007c22 <__lshift+0x3e>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	4b28      	ldr	r3, [pc, #160]	@ (8007cb4 <__lshift+0xd0>)
 8007c12:	4829      	ldr	r0, [pc, #164]	@ (8007cb8 <__lshift+0xd4>)
 8007c14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c18:	f000 fbe8 	bl	80083ec <__assert_func>
 8007c1c:	3101      	adds	r1, #1
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	e7ee      	b.n	8007c00 <__lshift+0x1c>
 8007c22:	2300      	movs	r3, #0
 8007c24:	f100 0114 	add.w	r1, r0, #20
 8007c28:	f100 0210 	add.w	r2, r0, #16
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	4553      	cmp	r3, sl
 8007c30:	db33      	blt.n	8007c9a <__lshift+0xb6>
 8007c32:	6920      	ldr	r0, [r4, #16]
 8007c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c38:	f104 0314 	add.w	r3, r4, #20
 8007c3c:	f019 091f 	ands.w	r9, r9, #31
 8007c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c48:	d02b      	beq.n	8007ca2 <__lshift+0xbe>
 8007c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c4e:	468a      	mov	sl, r1
 8007c50:	2200      	movs	r2, #0
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	fa00 f009 	lsl.w	r0, r0, r9
 8007c58:	4310      	orrs	r0, r2
 8007c5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c62:	459c      	cmp	ip, r3
 8007c64:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c68:	d8f3      	bhi.n	8007c52 <__lshift+0x6e>
 8007c6a:	ebac 0304 	sub.w	r3, ip, r4
 8007c6e:	3b15      	subs	r3, #21
 8007c70:	f023 0303 	bic.w	r3, r3, #3
 8007c74:	3304      	adds	r3, #4
 8007c76:	f104 0015 	add.w	r0, r4, #21
 8007c7a:	4560      	cmp	r0, ip
 8007c7c:	bf88      	it	hi
 8007c7e:	2304      	movhi	r3, #4
 8007c80:	50ca      	str	r2, [r1, r3]
 8007c82:	b10a      	cbz	r2, 8007c88 <__lshift+0xa4>
 8007c84:	f108 0602 	add.w	r6, r8, #2
 8007c88:	3e01      	subs	r6, #1
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	612e      	str	r6, [r5, #16]
 8007c8e:	4621      	mov	r1, r4
 8007c90:	f7ff fde2 	bl	8007858 <_Bfree>
 8007c94:	4628      	mov	r0, r5
 8007c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	e7c5      	b.n	8007c2e <__lshift+0x4a>
 8007ca2:	3904      	subs	r1, #4
 8007ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cac:	459c      	cmp	ip, r3
 8007cae:	d8f9      	bhi.n	8007ca4 <__lshift+0xc0>
 8007cb0:	e7ea      	b.n	8007c88 <__lshift+0xa4>
 8007cb2:	bf00      	nop
 8007cb4:	08008724 	.word	0x08008724
 8007cb8:	08008735 	.word	0x08008735

08007cbc <__mcmp>:
 8007cbc:	690a      	ldr	r2, [r1, #16]
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6900      	ldr	r0, [r0, #16]
 8007cc2:	1a80      	subs	r0, r0, r2
 8007cc4:	b530      	push	{r4, r5, lr}
 8007cc6:	d10e      	bne.n	8007ce6 <__mcmp+0x2a>
 8007cc8:	3314      	adds	r3, #20
 8007cca:	3114      	adds	r1, #20
 8007ccc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cdc:	4295      	cmp	r5, r2
 8007cde:	d003      	beq.n	8007ce8 <__mcmp+0x2c>
 8007ce0:	d205      	bcs.n	8007cee <__mcmp+0x32>
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce6:	bd30      	pop	{r4, r5, pc}
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	d3f3      	bcc.n	8007cd4 <__mcmp+0x18>
 8007cec:	e7fb      	b.n	8007ce6 <__mcmp+0x2a>
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e7f9      	b.n	8007ce6 <__mcmp+0x2a>
	...

08007cf4 <__mdiff>:
 8007cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4648      	mov	r0, r9
 8007d00:	4614      	mov	r4, r2
 8007d02:	f7ff ffdb 	bl	8007cbc <__mcmp>
 8007d06:	1e05      	subs	r5, r0, #0
 8007d08:	d112      	bne.n	8007d30 <__mdiff+0x3c>
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff fd63 	bl	80077d8 <_Balloc>
 8007d12:	4602      	mov	r2, r0
 8007d14:	b928      	cbnz	r0, 8007d22 <__mdiff+0x2e>
 8007d16:	4b3f      	ldr	r3, [pc, #252]	@ (8007e14 <__mdiff+0x120>)
 8007d18:	f240 2137 	movw	r1, #567	@ 0x237
 8007d1c:	483e      	ldr	r0, [pc, #248]	@ (8007e18 <__mdiff+0x124>)
 8007d1e:	f000 fb65 	bl	80083ec <__assert_func>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d28:	4610      	mov	r0, r2
 8007d2a:	b003      	add	sp, #12
 8007d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d30:	bfbc      	itt	lt
 8007d32:	464b      	movlt	r3, r9
 8007d34:	46a1      	movlt	r9, r4
 8007d36:	4630      	mov	r0, r6
 8007d38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d3c:	bfba      	itte	lt
 8007d3e:	461c      	movlt	r4, r3
 8007d40:	2501      	movlt	r5, #1
 8007d42:	2500      	movge	r5, #0
 8007d44:	f7ff fd48 	bl	80077d8 <_Balloc>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	b918      	cbnz	r0, 8007d54 <__mdiff+0x60>
 8007d4c:	4b31      	ldr	r3, [pc, #196]	@ (8007e14 <__mdiff+0x120>)
 8007d4e:	f240 2145 	movw	r1, #581	@ 0x245
 8007d52:	e7e3      	b.n	8007d1c <__mdiff+0x28>
 8007d54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d58:	6926      	ldr	r6, [r4, #16]
 8007d5a:	60c5      	str	r5, [r0, #12]
 8007d5c:	f109 0310 	add.w	r3, r9, #16
 8007d60:	f109 0514 	add.w	r5, r9, #20
 8007d64:	f104 0e14 	add.w	lr, r4, #20
 8007d68:	f100 0b14 	add.w	fp, r0, #20
 8007d6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	46d9      	mov	r9, fp
 8007d78:	f04f 0c00 	mov.w	ip, #0
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	fa1f f38a 	uxth.w	r3, sl
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	b283      	uxth	r3, r0
 8007d90:	1acb      	subs	r3, r1, r3
 8007d92:	0c00      	lsrs	r0, r0, #16
 8007d94:	4463      	add	r3, ip
 8007d96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007da4:	4576      	cmp	r6, lr
 8007da6:	f849 3b04 	str.w	r3, [r9], #4
 8007daa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dae:	d8e5      	bhi.n	8007d7c <__mdiff+0x88>
 8007db0:	1b33      	subs	r3, r6, r4
 8007db2:	3b15      	subs	r3, #21
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	3415      	adds	r4, #21
 8007dba:	3304      	adds	r3, #4
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	bf38      	it	cc
 8007dc0:	2304      	movcc	r3, #4
 8007dc2:	441d      	add	r5, r3
 8007dc4:	445b      	add	r3, fp
 8007dc6:	461e      	mov	r6, r3
 8007dc8:	462c      	mov	r4, r5
 8007dca:	4544      	cmp	r4, r8
 8007dcc:	d30e      	bcc.n	8007dec <__mdiff+0xf8>
 8007dce:	f108 0103 	add.w	r1, r8, #3
 8007dd2:	1b49      	subs	r1, r1, r5
 8007dd4:	f021 0103 	bic.w	r1, r1, #3
 8007dd8:	3d03      	subs	r5, #3
 8007dda:	45a8      	cmp	r8, r5
 8007ddc:	bf38      	it	cc
 8007dde:	2100      	movcc	r1, #0
 8007de0:	440b      	add	r3, r1
 8007de2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007de6:	b191      	cbz	r1, 8007e0e <__mdiff+0x11a>
 8007de8:	6117      	str	r7, [r2, #16]
 8007dea:	e79d      	b.n	8007d28 <__mdiff+0x34>
 8007dec:	f854 1b04 	ldr.w	r1, [r4], #4
 8007df0:	46e6      	mov	lr, ip
 8007df2:	0c08      	lsrs	r0, r1, #16
 8007df4:	fa1c fc81 	uxtah	ip, ip, r1
 8007df8:	4471      	add	r1, lr
 8007dfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007dfe:	b289      	uxth	r1, r1
 8007e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e04:	f846 1b04 	str.w	r1, [r6], #4
 8007e08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e0c:	e7dd      	b.n	8007dca <__mdiff+0xd6>
 8007e0e:	3f01      	subs	r7, #1
 8007e10:	e7e7      	b.n	8007de2 <__mdiff+0xee>
 8007e12:	bf00      	nop
 8007e14:	08008724 	.word	0x08008724
 8007e18:	08008735 	.word	0x08008735

08007e1c <__d2b>:
 8007e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	460f      	mov	r7, r1
 8007e22:	2101      	movs	r1, #1
 8007e24:	ec59 8b10 	vmov	r8, r9, d0
 8007e28:	4616      	mov	r6, r2
 8007e2a:	f7ff fcd5 	bl	80077d8 <_Balloc>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	b930      	cbnz	r0, 8007e40 <__d2b+0x24>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b23      	ldr	r3, [pc, #140]	@ (8007ec4 <__d2b+0xa8>)
 8007e36:	4824      	ldr	r0, [pc, #144]	@ (8007ec8 <__d2b+0xac>)
 8007e38:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e3c:	f000 fad6 	bl	80083ec <__assert_func>
 8007e40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e48:	b10d      	cbz	r5, 8007e4e <__d2b+0x32>
 8007e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	f1b8 0300 	subs.w	r3, r8, #0
 8007e54:	d023      	beq.n	8007e9e <__d2b+0x82>
 8007e56:	4668      	mov	r0, sp
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	f7ff fd84 	bl	8007966 <__lo0bits>
 8007e5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e62:	b1d0      	cbz	r0, 8007e9a <__d2b+0x7e>
 8007e64:	f1c0 0320 	rsb	r3, r0, #32
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	40c2      	lsrs	r2, r0
 8007e70:	6163      	str	r3, [r4, #20]
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	61a3      	str	r3, [r4, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2201      	moveq	r2, #1
 8007e7e:	2202      	movne	r2, #2
 8007e80:	6122      	str	r2, [r4, #16]
 8007e82:	b1a5      	cbz	r5, 8007eae <__d2b+0x92>
 8007e84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e88:	4405      	add	r5, r0
 8007e8a:	603d      	str	r5, [r7, #0]
 8007e8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e90:	6030      	str	r0, [r6, #0]
 8007e92:	4620      	mov	r0, r4
 8007e94:	b003      	add	sp, #12
 8007e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	6161      	str	r1, [r4, #20]
 8007e9c:	e7ea      	b.n	8007e74 <__d2b+0x58>
 8007e9e:	a801      	add	r0, sp, #4
 8007ea0:	f7ff fd61 	bl	8007966 <__lo0bits>
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	6163      	str	r3, [r4, #20]
 8007ea8:	3020      	adds	r0, #32
 8007eaa:	2201      	movs	r2, #1
 8007eac:	e7e8      	b.n	8007e80 <__d2b+0x64>
 8007eae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007eb6:	6038      	str	r0, [r7, #0]
 8007eb8:	6918      	ldr	r0, [r3, #16]
 8007eba:	f7ff fd35 	bl	8007928 <__hi0bits>
 8007ebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ec2:	e7e5      	b.n	8007e90 <__d2b+0x74>
 8007ec4:	08008724 	.word	0x08008724
 8007ec8:	08008735 	.word	0x08008735

08007ecc <__sfputc_r>:
 8007ecc:	6893      	ldr	r3, [r2, #8]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	b410      	push	{r4}
 8007ed4:	6093      	str	r3, [r2, #8]
 8007ed6:	da08      	bge.n	8007eea <__sfputc_r+0x1e>
 8007ed8:	6994      	ldr	r4, [r2, #24]
 8007eda:	42a3      	cmp	r3, r4
 8007edc:	db01      	blt.n	8007ee2 <__sfputc_r+0x16>
 8007ede:	290a      	cmp	r1, #10
 8007ee0:	d103      	bne.n	8007eea <__sfputc_r+0x1e>
 8007ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee6:	f7fe bc08 	b.w	80066fa <__swbuf_r>
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	1c58      	adds	r0, r3, #1
 8007eee:	6010      	str	r0, [r2, #0]
 8007ef0:	7019      	strb	r1, [r3, #0]
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <__sfputs_r>:
 8007efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	4614      	mov	r4, r2
 8007f02:	18d5      	adds	r5, r2, r3
 8007f04:	42ac      	cmp	r4, r5
 8007f06:	d101      	bne.n	8007f0c <__sfputs_r+0x12>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e007      	b.n	8007f1c <__sfputs_r+0x22>
 8007f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f10:	463a      	mov	r2, r7
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff ffda 	bl	8007ecc <__sfputc_r>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d1f3      	bne.n	8007f04 <__sfputs_r+0xa>
 8007f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f20 <_vfiprintf_r>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	460d      	mov	r5, r1
 8007f26:	b09d      	sub	sp, #116	@ 0x74
 8007f28:	4614      	mov	r4, r2
 8007f2a:	4698      	mov	r8, r3
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	b118      	cbz	r0, 8007f38 <_vfiprintf_r+0x18>
 8007f30:	6a03      	ldr	r3, [r0, #32]
 8007f32:	b90b      	cbnz	r3, 8007f38 <_vfiprintf_r+0x18>
 8007f34:	f7fe faf8 	bl	8006528 <__sinit>
 8007f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f3a:	07d9      	lsls	r1, r3, #31
 8007f3c:	d405      	bmi.n	8007f4a <_vfiprintf_r+0x2a>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	059a      	lsls	r2, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_vfiprintf_r+0x2a>
 8007f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f46:	f7fe fcea 	bl	800691e <__retarget_lock_acquire_recursive>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	071b      	lsls	r3, r3, #28
 8007f4e:	d501      	bpl.n	8007f54 <_vfiprintf_r+0x34>
 8007f50:	692b      	ldr	r3, [r5, #16]
 8007f52:	b99b      	cbnz	r3, 8007f7c <_vfiprintf_r+0x5c>
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7fe fc0e 	bl	8006778 <__swsetup_r>
 8007f5c:	b170      	cbz	r0, 8007f7c <_vfiprintf_r+0x5c>
 8007f5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f60:	07dc      	lsls	r4, r3, #31
 8007f62:	d504      	bpl.n	8007f6e <_vfiprintf_r+0x4e>
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	b01d      	add	sp, #116	@ 0x74
 8007f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	0598      	lsls	r0, r3, #22
 8007f72:	d4f7      	bmi.n	8007f64 <_vfiprintf_r+0x44>
 8007f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f76:	f7fe fcd3 	bl	8006920 <__retarget_lock_release_recursive>
 8007f7a:	e7f3      	b.n	8007f64 <_vfiprintf_r+0x44>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f80:	2320      	movs	r3, #32
 8007f82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f8a:	2330      	movs	r3, #48	@ 0x30
 8007f8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800813c <_vfiprintf_r+0x21c>
 8007f90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f94:	f04f 0901 	mov.w	r9, #1
 8007f98:	4623      	mov	r3, r4
 8007f9a:	469a      	mov	sl, r3
 8007f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa0:	b10a      	cbz	r2, 8007fa6 <_vfiprintf_r+0x86>
 8007fa2:	2a25      	cmp	r2, #37	@ 0x25
 8007fa4:	d1f9      	bne.n	8007f9a <_vfiprintf_r+0x7a>
 8007fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8007faa:	d00b      	beq.n	8007fc4 <_vfiprintf_r+0xa4>
 8007fac:	465b      	mov	r3, fp
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffa1 	bl	8007efa <__sfputs_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f000 80a7 	beq.w	800810c <_vfiprintf_r+0x1ec>
 8007fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc0:	445a      	add	r2, fp
 8007fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 809f 	beq.w	800810c <_vfiprintf_r+0x1ec>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd8:	f10a 0a01 	add.w	sl, sl, #1
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fe4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fe6:	4654      	mov	r4, sl
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fee:	4853      	ldr	r0, [pc, #332]	@ (800813c <_vfiprintf_r+0x21c>)
 8007ff0:	f7f8 f8ee 	bl	80001d0 <memchr>
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	b9d8      	cbnz	r0, 8008030 <_vfiprintf_r+0x110>
 8007ff8:	06d1      	lsls	r1, r2, #27
 8007ffa:	bf44      	itt	mi
 8007ffc:	2320      	movmi	r3, #32
 8007ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008002:	0713      	lsls	r3, r2, #28
 8008004:	bf44      	itt	mi
 8008006:	232b      	movmi	r3, #43	@ 0x2b
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b2a      	cmp	r3, #42	@ 0x2a
 8008012:	d015      	beq.n	8008040 <_vfiprintf_r+0x120>
 8008014:	9a07      	ldr	r2, [sp, #28]
 8008016:	4654      	mov	r4, sl
 8008018:	2000      	movs	r0, #0
 800801a:	f04f 0c0a 	mov.w	ip, #10
 800801e:	4621      	mov	r1, r4
 8008020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008024:	3b30      	subs	r3, #48	@ 0x30
 8008026:	2b09      	cmp	r3, #9
 8008028:	d94b      	bls.n	80080c2 <_vfiprintf_r+0x1a2>
 800802a:	b1b0      	cbz	r0, 800805a <_vfiprintf_r+0x13a>
 800802c:	9207      	str	r2, [sp, #28]
 800802e:	e014      	b.n	800805a <_vfiprintf_r+0x13a>
 8008030:	eba0 0308 	sub.w	r3, r0, r8
 8008034:	fa09 f303 	lsl.w	r3, r9, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	46a2      	mov	sl, r4
 800803e:	e7d2      	b.n	8007fe6 <_vfiprintf_r+0xc6>
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	1d19      	adds	r1, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	9103      	str	r1, [sp, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfbb      	ittet	lt
 800804c:	425b      	neglt	r3, r3
 800804e:	f042 0202 	orrlt.w	r2, r2, #2
 8008052:	9307      	strge	r3, [sp, #28]
 8008054:	9307      	strlt	r3, [sp, #28]
 8008056:	bfb8      	it	lt
 8008058:	9204      	strlt	r2, [sp, #16]
 800805a:	7823      	ldrb	r3, [r4, #0]
 800805c:	2b2e      	cmp	r3, #46	@ 0x2e
 800805e:	d10a      	bne.n	8008076 <_vfiprintf_r+0x156>
 8008060:	7863      	ldrb	r3, [r4, #1]
 8008062:	2b2a      	cmp	r3, #42	@ 0x2a
 8008064:	d132      	bne.n	80080cc <_vfiprintf_r+0x1ac>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	1d1a      	adds	r2, r3, #4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	9203      	str	r2, [sp, #12]
 800806e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008072:	3402      	adds	r4, #2
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800814c <_vfiprintf_r+0x22c>
 800807a:	7821      	ldrb	r1, [r4, #0]
 800807c:	2203      	movs	r2, #3
 800807e:	4650      	mov	r0, sl
 8008080:	f7f8 f8a6 	bl	80001d0 <memchr>
 8008084:	b138      	cbz	r0, 8008096 <_vfiprintf_r+0x176>
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	eba0 000a 	sub.w	r0, r0, sl
 800808c:	2240      	movs	r2, #64	@ 0x40
 800808e:	4082      	lsls	r2, r0
 8008090:	4313      	orrs	r3, r2
 8008092:	3401      	adds	r4, #1
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809a:	4829      	ldr	r0, [pc, #164]	@ (8008140 <_vfiprintf_r+0x220>)
 800809c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080a0:	2206      	movs	r2, #6
 80080a2:	f7f8 f895 	bl	80001d0 <memchr>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d03f      	beq.n	800812a <_vfiprintf_r+0x20a>
 80080aa:	4b26      	ldr	r3, [pc, #152]	@ (8008144 <_vfiprintf_r+0x224>)
 80080ac:	bb1b      	cbnz	r3, 80080f6 <_vfiprintf_r+0x1d6>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	3307      	adds	r3, #7
 80080b2:	f023 0307 	bic.w	r3, r3, #7
 80080b6:	3308      	adds	r3, #8
 80080b8:	9303      	str	r3, [sp, #12]
 80080ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080bc:	443b      	add	r3, r7
 80080be:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c0:	e76a      	b.n	8007f98 <_vfiprintf_r+0x78>
 80080c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080c6:	460c      	mov	r4, r1
 80080c8:	2001      	movs	r0, #1
 80080ca:	e7a8      	b.n	800801e <_vfiprintf_r+0xfe>
 80080cc:	2300      	movs	r3, #0
 80080ce:	3401      	adds	r4, #1
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	4619      	mov	r1, r3
 80080d4:	f04f 0c0a 	mov.w	ip, #10
 80080d8:	4620      	mov	r0, r4
 80080da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080de:	3a30      	subs	r2, #48	@ 0x30
 80080e0:	2a09      	cmp	r2, #9
 80080e2:	d903      	bls.n	80080ec <_vfiprintf_r+0x1cc>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0c6      	beq.n	8008076 <_vfiprintf_r+0x156>
 80080e8:	9105      	str	r1, [sp, #20]
 80080ea:	e7c4      	b.n	8008076 <_vfiprintf_r+0x156>
 80080ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f0:	4604      	mov	r4, r0
 80080f2:	2301      	movs	r3, #1
 80080f4:	e7f0      	b.n	80080d8 <_vfiprintf_r+0x1b8>
 80080f6:	ab03      	add	r3, sp, #12
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	462a      	mov	r2, r5
 80080fc:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <_vfiprintf_r+0x228>)
 80080fe:	a904      	add	r1, sp, #16
 8008100:	4630      	mov	r0, r6
 8008102:	f7fd fdcf 	bl	8005ca4 <_printf_float>
 8008106:	4607      	mov	r7, r0
 8008108:	1c78      	adds	r0, r7, #1
 800810a:	d1d6      	bne.n	80080ba <_vfiprintf_r+0x19a>
 800810c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810e:	07d9      	lsls	r1, r3, #31
 8008110:	d405      	bmi.n	800811e <_vfiprintf_r+0x1fe>
 8008112:	89ab      	ldrh	r3, [r5, #12]
 8008114:	059a      	lsls	r2, r3, #22
 8008116:	d402      	bmi.n	800811e <_vfiprintf_r+0x1fe>
 8008118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800811a:	f7fe fc01 	bl	8006920 <__retarget_lock_release_recursive>
 800811e:	89ab      	ldrh	r3, [r5, #12]
 8008120:	065b      	lsls	r3, r3, #25
 8008122:	f53f af1f 	bmi.w	8007f64 <_vfiprintf_r+0x44>
 8008126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008128:	e71e      	b.n	8007f68 <_vfiprintf_r+0x48>
 800812a:	ab03      	add	r3, sp, #12
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	462a      	mov	r2, r5
 8008130:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <_vfiprintf_r+0x228>)
 8008132:	a904      	add	r1, sp, #16
 8008134:	4630      	mov	r0, r6
 8008136:	f7fe f84d 	bl	80061d4 <_printf_i>
 800813a:	e7e4      	b.n	8008106 <_vfiprintf_r+0x1e6>
 800813c:	0800878e 	.word	0x0800878e
 8008140:	08008798 	.word	0x08008798
 8008144:	08005ca5 	.word	0x08005ca5
 8008148:	08007efb 	.word	0x08007efb
 800814c:	08008794 	.word	0x08008794

08008150 <__sflush_r>:
 8008150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	0716      	lsls	r6, r2, #28
 800815a:	4605      	mov	r5, r0
 800815c:	460c      	mov	r4, r1
 800815e:	d454      	bmi.n	800820a <__sflush_r+0xba>
 8008160:	684b      	ldr	r3, [r1, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	dc02      	bgt.n	800816c <__sflush_r+0x1c>
 8008166:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	dd48      	ble.n	80081fe <__sflush_r+0xae>
 800816c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800816e:	2e00      	cmp	r6, #0
 8008170:	d045      	beq.n	80081fe <__sflush_r+0xae>
 8008172:	2300      	movs	r3, #0
 8008174:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008178:	682f      	ldr	r7, [r5, #0]
 800817a:	6a21      	ldr	r1, [r4, #32]
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	d030      	beq.n	80081e2 <__sflush_r+0x92>
 8008180:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	0759      	lsls	r1, r3, #29
 8008186:	d505      	bpl.n	8008194 <__sflush_r+0x44>
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800818e:	b10b      	cbz	r3, 8008194 <__sflush_r+0x44>
 8008190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	2300      	movs	r3, #0
 8008196:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008198:	6a21      	ldr	r1, [r4, #32]
 800819a:	4628      	mov	r0, r5
 800819c:	47b0      	blx	r6
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	d106      	bne.n	80081b2 <__sflush_r+0x62>
 80081a4:	6829      	ldr	r1, [r5, #0]
 80081a6:	291d      	cmp	r1, #29
 80081a8:	d82b      	bhi.n	8008202 <__sflush_r+0xb2>
 80081aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008254 <__sflush_r+0x104>)
 80081ac:	40ca      	lsrs	r2, r1
 80081ae:	07d6      	lsls	r6, r2, #31
 80081b0:	d527      	bpl.n	8008202 <__sflush_r+0xb2>
 80081b2:	2200      	movs	r2, #0
 80081b4:	6062      	str	r2, [r4, #4]
 80081b6:	04d9      	lsls	r1, r3, #19
 80081b8:	6922      	ldr	r2, [r4, #16]
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	d504      	bpl.n	80081c8 <__sflush_r+0x78>
 80081be:	1c42      	adds	r2, r0, #1
 80081c0:	d101      	bne.n	80081c6 <__sflush_r+0x76>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b903      	cbnz	r3, 80081c8 <__sflush_r+0x78>
 80081c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80081c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ca:	602f      	str	r7, [r5, #0]
 80081cc:	b1b9      	cbz	r1, 80081fe <__sflush_r+0xae>
 80081ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081d2:	4299      	cmp	r1, r3
 80081d4:	d002      	beq.n	80081dc <__sflush_r+0x8c>
 80081d6:	4628      	mov	r0, r5
 80081d8:	f7ff f9fe 	bl	80075d8 <_free_r>
 80081dc:	2300      	movs	r3, #0
 80081de:	6363      	str	r3, [r4, #52]	@ 0x34
 80081e0:	e00d      	b.n	80081fe <__sflush_r+0xae>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4628      	mov	r0, r5
 80081e6:	47b0      	blx	r6
 80081e8:	4602      	mov	r2, r0
 80081ea:	1c50      	adds	r0, r2, #1
 80081ec:	d1c9      	bne.n	8008182 <__sflush_r+0x32>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0c6      	beq.n	8008182 <__sflush_r+0x32>
 80081f4:	2b1d      	cmp	r3, #29
 80081f6:	d001      	beq.n	80081fc <__sflush_r+0xac>
 80081f8:	2b16      	cmp	r3, #22
 80081fa:	d11e      	bne.n	800823a <__sflush_r+0xea>
 80081fc:	602f      	str	r7, [r5, #0]
 80081fe:	2000      	movs	r0, #0
 8008200:	e022      	b.n	8008248 <__sflush_r+0xf8>
 8008202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008206:	b21b      	sxth	r3, r3
 8008208:	e01b      	b.n	8008242 <__sflush_r+0xf2>
 800820a:	690f      	ldr	r7, [r1, #16]
 800820c:	2f00      	cmp	r7, #0
 800820e:	d0f6      	beq.n	80081fe <__sflush_r+0xae>
 8008210:	0793      	lsls	r3, r2, #30
 8008212:	680e      	ldr	r6, [r1, #0]
 8008214:	bf08      	it	eq
 8008216:	694b      	ldreq	r3, [r1, #20]
 8008218:	600f      	str	r7, [r1, #0]
 800821a:	bf18      	it	ne
 800821c:	2300      	movne	r3, #0
 800821e:	eba6 0807 	sub.w	r8, r6, r7
 8008222:	608b      	str	r3, [r1, #8]
 8008224:	f1b8 0f00 	cmp.w	r8, #0
 8008228:	dde9      	ble.n	80081fe <__sflush_r+0xae>
 800822a:	6a21      	ldr	r1, [r4, #32]
 800822c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800822e:	4643      	mov	r3, r8
 8008230:	463a      	mov	r2, r7
 8008232:	4628      	mov	r0, r5
 8008234:	47b0      	blx	r6
 8008236:	2800      	cmp	r0, #0
 8008238:	dc08      	bgt.n	800824c <__sflush_r+0xfc>
 800823a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824c:	4407      	add	r7, r0
 800824e:	eba8 0800 	sub.w	r8, r8, r0
 8008252:	e7e7      	b.n	8008224 <__sflush_r+0xd4>
 8008254:	20400001 	.word	0x20400001

08008258 <_fflush_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b913      	cbnz	r3, 8008268 <_fflush_r+0x10>
 8008262:	2500      	movs	r5, #0
 8008264:	4628      	mov	r0, r5
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	b118      	cbz	r0, 8008272 <_fflush_r+0x1a>
 800826a:	6a03      	ldr	r3, [r0, #32]
 800826c:	b90b      	cbnz	r3, 8008272 <_fflush_r+0x1a>
 800826e:	f7fe f95b 	bl	8006528 <__sinit>
 8008272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f3      	beq.n	8008262 <_fflush_r+0xa>
 800827a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800827c:	07d0      	lsls	r0, r2, #31
 800827e:	d404      	bmi.n	800828a <_fflush_r+0x32>
 8008280:	0599      	lsls	r1, r3, #22
 8008282:	d402      	bmi.n	800828a <_fflush_r+0x32>
 8008284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008286:	f7fe fb4a 	bl	800691e <__retarget_lock_acquire_recursive>
 800828a:	4628      	mov	r0, r5
 800828c:	4621      	mov	r1, r4
 800828e:	f7ff ff5f 	bl	8008150 <__sflush_r>
 8008292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008294:	07da      	lsls	r2, r3, #31
 8008296:	4605      	mov	r5, r0
 8008298:	d4e4      	bmi.n	8008264 <_fflush_r+0xc>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	059b      	lsls	r3, r3, #22
 800829e:	d4e1      	bmi.n	8008264 <_fflush_r+0xc>
 80082a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082a2:	f7fe fb3d 	bl	8006920 <__retarget_lock_release_recursive>
 80082a6:	e7dd      	b.n	8008264 <_fflush_r+0xc>

080082a8 <__swhatbuf_r>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	460c      	mov	r4, r1
 80082ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b0:	2900      	cmp	r1, #0
 80082b2:	b096      	sub	sp, #88	@ 0x58
 80082b4:	4615      	mov	r5, r2
 80082b6:	461e      	mov	r6, r3
 80082b8:	da0d      	bge.n	80082d6 <__swhatbuf_r+0x2e>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082c0:	f04f 0100 	mov.w	r1, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2340      	movne	r3, #64	@ 0x40
 80082c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082cc:	2000      	movs	r0, #0
 80082ce:	6031      	str	r1, [r6, #0]
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	b016      	add	sp, #88	@ 0x58
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
 80082d6:	466a      	mov	r2, sp
 80082d8:	f000 f848 	bl	800836c <_fstat_r>
 80082dc:	2800      	cmp	r0, #0
 80082de:	dbec      	blt.n	80082ba <__swhatbuf_r+0x12>
 80082e0:	9901      	ldr	r1, [sp, #4]
 80082e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082ea:	4259      	negs	r1, r3
 80082ec:	4159      	adcs	r1, r3
 80082ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082f2:	e7eb      	b.n	80082cc <__swhatbuf_r+0x24>

080082f4 <__smakebuf_r>:
 80082f4:	898b      	ldrh	r3, [r1, #12]
 80082f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f8:	079d      	lsls	r5, r3, #30
 80082fa:	4606      	mov	r6, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	d507      	bpl.n	8008310 <__smakebuf_r+0x1c>
 8008300:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	6123      	str	r3, [r4, #16]
 8008308:	2301      	movs	r3, #1
 800830a:	6163      	str	r3, [r4, #20]
 800830c:	b003      	add	sp, #12
 800830e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008310:	ab01      	add	r3, sp, #4
 8008312:	466a      	mov	r2, sp
 8008314:	f7ff ffc8 	bl	80082a8 <__swhatbuf_r>
 8008318:	9f00      	ldr	r7, [sp, #0]
 800831a:	4605      	mov	r5, r0
 800831c:	4639      	mov	r1, r7
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff f9ce 	bl	80076c0 <_malloc_r>
 8008324:	b948      	cbnz	r0, 800833a <__smakebuf_r+0x46>
 8008326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832a:	059a      	lsls	r2, r3, #22
 800832c:	d4ee      	bmi.n	800830c <__smakebuf_r+0x18>
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	f043 0302 	orr.w	r3, r3, #2
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	e7e2      	b.n	8008300 <__smakebuf_r+0xc>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	6020      	str	r0, [r4, #0]
 800833e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800834a:	b15b      	cbz	r3, 8008364 <__smakebuf_r+0x70>
 800834c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008350:	4630      	mov	r0, r6
 8008352:	f000 f81d 	bl	8008390 <_isatty_r>
 8008356:	b128      	cbz	r0, 8008364 <__smakebuf_r+0x70>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	431d      	orrs	r5, r3
 8008368:	81a5      	strh	r5, [r4, #12]
 800836a:	e7cf      	b.n	800830c <__smakebuf_r+0x18>

0800836c <_fstat_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	@ (800838c <_fstat_r+0x20>)
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	f7f9 feea 	bl	8002152 <_fstat>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d102      	bne.n	8008388 <_fstat_r+0x1c>
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	b103      	cbz	r3, 8008388 <_fstat_r+0x1c>
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	20000580 	.word	0x20000580

08008390 <_isatty_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d06      	ldr	r5, [pc, #24]	@ (80083ac <_isatty_r+0x1c>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7f9 fee9 	bl	8002172 <_isatty>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_isatty_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_isatty_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	20000580 	.word	0x20000580

080083b0 <_sbrk_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d06      	ldr	r5, [pc, #24]	@ (80083cc <_sbrk_r+0x1c>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f7f9 fef2 	bl	80021a4 <_sbrk>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_sbrk_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_sbrk_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	20000580 	.word	0x20000580

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <__assert_func>:
 80083ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ee:	4614      	mov	r4, r2
 80083f0:	461a      	mov	r2, r3
 80083f2:	4b09      	ldr	r3, [pc, #36]	@ (8008418 <__assert_func+0x2c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4605      	mov	r5, r0
 80083f8:	68d8      	ldr	r0, [r3, #12]
 80083fa:	b14c      	cbz	r4, 8008410 <__assert_func+0x24>
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <__assert_func+0x30>)
 80083fe:	9100      	str	r1, [sp, #0]
 8008400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008404:	4906      	ldr	r1, [pc, #24]	@ (8008420 <__assert_func+0x34>)
 8008406:	462b      	mov	r3, r5
 8008408:	f000 f842 	bl	8008490 <fiprintf>
 800840c:	f000 f852 	bl	80084b4 <abort>
 8008410:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <__assert_func+0x38>)
 8008412:	461c      	mov	r4, r3
 8008414:	e7f3      	b.n	80083fe <__assert_func+0x12>
 8008416:	bf00      	nop
 8008418:	20000028 	.word	0x20000028
 800841c:	080087a9 	.word	0x080087a9
 8008420:	080087b6 	.word	0x080087b6
 8008424:	080087e4 	.word	0x080087e4

08008428 <_calloc_r>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	fba1 5402 	umull	r5, r4, r1, r2
 800842e:	b934      	cbnz	r4, 800843e <_calloc_r+0x16>
 8008430:	4629      	mov	r1, r5
 8008432:	f7ff f945 	bl	80076c0 <_malloc_r>
 8008436:	4606      	mov	r6, r0
 8008438:	b928      	cbnz	r0, 8008446 <_calloc_r+0x1e>
 800843a:	4630      	mov	r0, r6
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	220c      	movs	r2, #12
 8008440:	6002      	str	r2, [r0, #0]
 8008442:	2600      	movs	r6, #0
 8008444:	e7f9      	b.n	800843a <_calloc_r+0x12>
 8008446:	462a      	mov	r2, r5
 8008448:	4621      	mov	r1, r4
 800844a:	f7fe f9eb 	bl	8006824 <memset>
 800844e:	e7f4      	b.n	800843a <_calloc_r+0x12>

08008450 <__ascii_mbtowc>:
 8008450:	b082      	sub	sp, #8
 8008452:	b901      	cbnz	r1, 8008456 <__ascii_mbtowc+0x6>
 8008454:	a901      	add	r1, sp, #4
 8008456:	b142      	cbz	r2, 800846a <__ascii_mbtowc+0x1a>
 8008458:	b14b      	cbz	r3, 800846e <__ascii_mbtowc+0x1e>
 800845a:	7813      	ldrb	r3, [r2, #0]
 800845c:	600b      	str	r3, [r1, #0]
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	1e10      	subs	r0, r2, #0
 8008462:	bf18      	it	ne
 8008464:	2001      	movne	r0, #1
 8008466:	b002      	add	sp, #8
 8008468:	4770      	bx	lr
 800846a:	4610      	mov	r0, r2
 800846c:	e7fb      	b.n	8008466 <__ascii_mbtowc+0x16>
 800846e:	f06f 0001 	mvn.w	r0, #1
 8008472:	e7f8      	b.n	8008466 <__ascii_mbtowc+0x16>

08008474 <__ascii_wctomb>:
 8008474:	4603      	mov	r3, r0
 8008476:	4608      	mov	r0, r1
 8008478:	b141      	cbz	r1, 800848c <__ascii_wctomb+0x18>
 800847a:	2aff      	cmp	r2, #255	@ 0xff
 800847c:	d904      	bls.n	8008488 <__ascii_wctomb+0x14>
 800847e:	228a      	movs	r2, #138	@ 0x8a
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
 8008486:	4770      	bx	lr
 8008488:	700a      	strb	r2, [r1, #0]
 800848a:	2001      	movs	r0, #1
 800848c:	4770      	bx	lr
	...

08008490 <fiprintf>:
 8008490:	b40e      	push	{r1, r2, r3}
 8008492:	b503      	push	{r0, r1, lr}
 8008494:	4601      	mov	r1, r0
 8008496:	ab03      	add	r3, sp, #12
 8008498:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <fiprintf+0x20>)
 800849a:	f853 2b04 	ldr.w	r2, [r3], #4
 800849e:	6800      	ldr	r0, [r0, #0]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	f7ff fd3d 	bl	8007f20 <_vfiprintf_r>
 80084a6:	b002      	add	sp, #8
 80084a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ac:	b003      	add	sp, #12
 80084ae:	4770      	bx	lr
 80084b0:	20000028 	.word	0x20000028

080084b4 <abort>:
 80084b4:	b508      	push	{r3, lr}
 80084b6:	2006      	movs	r0, #6
 80084b8:	f000 f82c 	bl	8008514 <raise>
 80084bc:	2001      	movs	r0, #1
 80084be:	f7f9 fdf8 	bl	80020b2 <_exit>

080084c2 <_raise_r>:
 80084c2:	291f      	cmp	r1, #31
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4605      	mov	r5, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	d904      	bls.n	80084d6 <_raise_r+0x14>
 80084cc:	2316      	movs	r3, #22
 80084ce:	6003      	str	r3, [r0, #0]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084d8:	b112      	cbz	r2, 80084e0 <_raise_r+0x1e>
 80084da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084de:	b94b      	cbnz	r3, 80084f4 <_raise_r+0x32>
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 f831 	bl	8008548 <_getpid_r>
 80084e6:	4622      	mov	r2, r4
 80084e8:	4601      	mov	r1, r0
 80084ea:	4628      	mov	r0, r5
 80084ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f0:	f000 b818 	b.w	8008524 <_kill_r>
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d00a      	beq.n	800850e <_raise_r+0x4c>
 80084f8:	1c59      	adds	r1, r3, #1
 80084fa:	d103      	bne.n	8008504 <_raise_r+0x42>
 80084fc:	2316      	movs	r3, #22
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	2001      	movs	r0, #1
 8008502:	e7e7      	b.n	80084d4 <_raise_r+0x12>
 8008504:	2100      	movs	r1, #0
 8008506:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800850a:	4620      	mov	r0, r4
 800850c:	4798      	blx	r3
 800850e:	2000      	movs	r0, #0
 8008510:	e7e0      	b.n	80084d4 <_raise_r+0x12>
	...

08008514 <raise>:
 8008514:	4b02      	ldr	r3, [pc, #8]	@ (8008520 <raise+0xc>)
 8008516:	4601      	mov	r1, r0
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f7ff bfd2 	b.w	80084c2 <_raise_r>
 800851e:	bf00      	nop
 8008520:	20000028 	.word	0x20000028

08008524 <_kill_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d07      	ldr	r5, [pc, #28]	@ (8008544 <_kill_r+0x20>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	4611      	mov	r1, r2
 8008530:	602b      	str	r3, [r5, #0]
 8008532:	f7f9 fdae 	bl	8002092 <_kill>
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	d102      	bne.n	8008540 <_kill_r+0x1c>
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	b103      	cbz	r3, 8008540 <_kill_r+0x1c>
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	bd38      	pop	{r3, r4, r5, pc}
 8008542:	bf00      	nop
 8008544:	20000580 	.word	0x20000580

08008548 <_getpid_r>:
 8008548:	f7f9 bd9b 	b.w	8002082 <_getpid>

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
